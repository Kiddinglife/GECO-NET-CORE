; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0EK@LHPDGAG@Failed?5assertion?5?$CIQ?5?$CG?$CG?5GenPt?$CJ?5at@ ; `string'
PUBLIC	??_C@_0EF@JNADEBKC@Failed?5assertion?5?$CIinout?$CJ?5at?5?4?4?2?4@ ; `string'
PUBLIC	??_C@_0EF@COODGBPK@Failed?5assertion?5?$CIinout?$CJ?5at?5?4?4?2?4@ ; `string'
PUBLIC	??_C@_0EJ@DCBJOEKB@Failed?5assertion?5?$CIin?5?$CG?$CG?5out?$CJ?5at?5@ ; `string'
PUBLIC	??_C@_0FE@HLMINELE@Failed?5assertion?5?$CIin?5?$CG?$CG?5out_x?5?$CG?$CG@ ; `string'
PUBLIC	??_C@_0FE@IMAEMKHM@Failed?5assertion?5?$CIin_x?5?$CG?$CG?5in_y?5?$CG@ ; `string'
;	COMDAT ??_C@_0FE@IMAEMKHM@Failed?5assertion?5?$CIin_x?5?$CG?$CG?5in_y?5?$CG@
CONST	SEGMENT
??_C@_0FE@IMAEMKHM@Failed?5assertion?5?$CIin_x?5?$CG?$CG?5in_y?5?$CG@ DB 'F'
	DB	'ailed assertion (in_x && in_y && out) at ..\..\src\math\BigTw'
	DB	'istedEdwards.cpp:107', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@HLMINELE@Failed?5assertion?5?$CIin?5?$CG?$CG?5out_x?5?$CG?$CG@
CONST	SEGMENT
??_C@_0FE@HLMINELE@Failed?5assertion?5?$CIin?5?$CG?$CG?5out_x?5?$CG?$CG@ DB 'F'
	DB	'ailed assertion (in && out_x && out_y) at ..\..\src\math\BigT'
	DB	'wistedEdwards.cpp:98', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@DCBJOEKB@Failed?5assertion?5?$CIin?5?$CG?$CG?5out?$CJ?5at?5@
CONST	SEGMENT
??_C@_0EJ@DCBJOEKB@Failed?5assertion?5?$CIin?5?$CG?$CG?5out?$CJ?5at?5@ DB 'F'
	DB	'ailed assertion (in && out) at ..\..\src\math\BigTwistedEdwar'
	DB	'ds.cpp:87', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@COODGBPK@Failed?5assertion?5?$CIinout?$CJ?5at?5?4?4?2?4@
CONST	SEGMENT
??_C@_0EF@COODGBPK@Failed?5assertion?5?$CIinout?$CJ?5at?5?4?4?2?4@ DB 'Fa'
	DB	'iled assertion (inout) at ..\..\src\math\BigTwistedEdwards.cp'
	DB	'p:77', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@JNADEBKC@Failed?5assertion?5?$CIinout?$CJ?5at?5?4?4?2?4@
CONST	SEGMENT
??_C@_0EF@JNADEBKC@Failed?5assertion?5?$CIinout?$CJ?5at?5?4?4?2?4@ DB 'Fa'
	DB	'iled assertion (inout) at ..\..\src\math\BigTwistedEdwards.cp'
	DB	'p:68', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@LHPDGAG@Failed?5assertion?5?$CIQ?5?$CG?$CG?5GenPt?$CJ?5at@
CONST	SEGMENT
??_C@_0EK@LHPDGAG@Failed?5assertion?5?$CIQ?5?$CG?$CG?5GenPt?$CJ?5at@ DB 'F'
	DB	'ailed assertion (Q && GenPt) at ..\..\src\math\BigTwistedEdwa'
	DB	'rds.cpp:36', 0aH, 00H			; `string'
	ORG $+4096
MOF_LUT	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	02H
	DB	01H
	DB	04H
	DB	00H
	DB	01H
	DB	03H
	DB	05H
	DB	00H
	DB	03H
	DB	01H
	DB	06H
	DB	00H
	DB	02H
	DB	02H
	DB	07H
	DB	00H
	DB	04H
	DB	01H
	DB	08H
	DB	00H
	DB	01H
	DB	04H
	DB	09H
	DB	00H
	DB	05H
	DB	01H
	DB	0aH
	DB	00H
	DB	03H
	DB	02H
	DB	0bH
	DB	00H
	DB	06H
	DB	01H
	DB	0cH
	DB	00H
	DB	02H
	DB	03H
	DB	0dH
	DB	00H
	DB	07H
	DB	01H
	DB	0eH
	DB	00H
	DB	04H
	DB	02H
	DB	0fH
	DB	00H
	DB	08H
	DB	01H
	DB	010H
	DB	00H
	DB	01H
	DB	05H
	DB	011H
	DB	00H
	DB	09H
	DB	01H
	DB	012H
	DB	00H
	DB	05H
	DB	02H
	DB	013H
	DB	00H
	DB	0aH
	DB	01H
	DB	014H
	DB	00H
	DB	03H
	DB	03H
	DB	015H
	DB	00H
	DB	0bH
	DB	01H
	DB	016H
	DB	00H
	DB	06H
	DB	02H
	DB	017H
	DB	00H
	DB	0cH
	DB	01H
	DB	018H
	DB	00H
	DB	02H
	DB	04H
	DB	019H
	DB	00H
	DB	0dH
	DB	01H
	DB	01aH
	DB	00H
	DB	07H
	DB	02H
	DB	01bH
	DB	00H
	DB	0eH
	DB	01H
	DB	01cH
	DB	00H
	DB	04H
	DB	03H
	DB	01dH
	DB	00H
	DB	0fH
	DB	01H
	DB	01eH
	DB	00H
	DB	08H
	DB	02H
	DB	01fH
	DB	00H
	DB	010H
	DB	01H
	DB	020H
	DB	00H
	DB	01H
	DB	06H
	DB	021H
	DB	00H
	DB	011H
	DB	01H
	DB	022H
	DB	00H
	DB	09H
	DB	02H
	DB	023H
	DB	00H
	DB	012H
	DB	01H
	DB	024H
	DB	00H
	DB	05H
	DB	03H
	DB	025H
	DB	00H
	DB	013H
	DB	01H
	DB	026H
	DB	00H
	DB	0aH
	DB	02H
	DB	027H
	DB	00H
	DB	014H
	DB	01H
	DB	028H
	DB	00H
	DB	03H
	DB	04H
	DB	029H
	DB	00H
	DB	015H
	DB	01H
	DB	02aH
	DB	00H
	DB	0bH
	DB	02H
	DB	02bH
	DB	00H
	DB	016H
	DB	01H
	DB	02cH
	DB	00H
	DB	06H
	DB	03H
	DB	02dH
	DB	00H
	DB	017H
	DB	01H
	DB	02eH
	DB	00H
	DB	0cH
	DB	02H
	DB	02fH
	DB	00H
	DB	018H
	DB	01H
	DB	030H
	DB	00H
	DB	02H
	DB	05H
	DB	031H
	DB	00H
	DB	019H
	DB	01H
	DB	032H
	DB	00H
	DB	0dH
	DB	02H
	DB	033H
	DB	00H
	DB	01aH
	DB	01H
	DB	034H
	DB	00H
	DB	07H
	DB	03H
	DB	035H
	DB	00H
	DB	01bH
	DB	01H
	DB	036H
	DB	00H
	DB	0eH
	DB	02H
	DB	037H
	DB	00H
	DB	01cH
	DB	01H
	DB	038H
	DB	00H
	DB	04H
	DB	04H
	DB	039H
	DB	00H
	DB	01dH
	DB	01H
	DB	03aH
	DB	00H
	DB	0fH
	DB	02H
	DB	03bH
	DB	00H
	DB	01eH
	DB	01H
	DB	03cH
	DB	00H
	DB	08H
	DB	03H
	DB	03dH
	DB	00H
	DB	01fH
	DB	01H
	DB	03eH
	DB	00H
	DB	010H
	DB	02H
	DB	03fH
	DB	00H
	DB	020H
	DB	01H
	DB	040H
	DB	00H
	DB	01H
	DB	07H
PUBLIC	?PtSiMultiply@BigTwistedEdwards@cat@@QEAAXPEB_K0H0E0EPEA_K@Z ; cat::BigTwistedEdwards::PtSiMultiply
PUBLIC	?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_KH0EPEA_K@Z ; cat::BigTwistedEdwards::PtMultiply
PUBLIC	?PtPrecompAddSub@BigTwistedEdwards@cat@@IEAAXPEB_K0PEA_K1H@Z ; cat::BigTwistedEdwards::PtPrecompAddSub
PUBLIC	?PtMultiplyPrecomp@BigTwistedEdwards@cat@@QEAAXPEB_KHPEA_K@Z ; cat::BigTwistedEdwards::PtMultiplyPrecomp
PUBLIC	?PtMultiplyPrecompAlloc@BigTwistedEdwards@cat@@QEAAPEA_KH@Z ; cat::BigTwistedEdwards::PtMultiplyPrecompAlloc
PUBLIC	?PtDoubleZ1@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtDoubleZ1
PUBLIC	?PtDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtDouble
PUBLIC	?PtEDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtEDouble
PUBLIC	?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtNegate
PUBLIC	?PtAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtAdd
PUBLIC	?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtEAdd
PUBLIC	?SaveAffineX@BigTwistedEdwards@cat@@QEAAXPEB_KPEAX@Z ; cat::BigTwistedEdwards::SaveAffineX
PUBLIC	?IsAffineIdentity@BigTwistedEdwards@cat@@QEAA_NPEB_K@Z ; cat::BigTwistedEdwards::IsAffineIdentity
PUBLIC	?PtValidAffine@BigTwistedEdwards@cat@@QEAA_NPEB_K@Z ; cat::BigTwistedEdwards::PtValidAffine
PUBLIC	?PtNormalize@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtNormalize
PUBLIC	?LoadVerifyAffineXY@BigTwistedEdwards@cat@@QEAA_NPEBX0PEA_K@Z ; cat::BigTwistedEdwards::LoadVerifyAffineXY
PUBLIC	?PtCopy@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtCopy
PUBLIC	?PtIdentity@BigTwistedEdwards@cat@@QEAAXPEA_K@Z	; cat::BigTwistedEdwards::PtIdentity
PUBLIC	?PtUnpack@BigTwistedEdwards@cat@@QEAAXPEA_K@Z	; cat::BigTwistedEdwards::PtUnpack
PUBLIC	??1BigPseudoMersenne@cat@@QEAA@XZ		; cat::BigPseudoMersenne::~BigPseudoMersenne
PUBLIC	??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z	; cat::BigTwistedEdwards::BigTwistedEdwards
PUBLIC	?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_K0EPEA_K@Z ; cat::BigTwistedEdwards::PtMultiply
PUBLIC	?SaveAffineXY@BigTwistedEdwards@cat@@QEAAXPEB_KPEAX1@Z ; cat::BigTwistedEdwards::SaveAffineXY
pdata	SEGMENT
$pdata$?PtSiMultiply@BigTwistedEdwards@cat@@QEAAXPEB_K0H0E0EPEA_K@Z DD imagerel $LN189
	DD	imagerel $LN189+874
	DD	imagerel $unwind$?PtSiMultiply@BigTwistedEdwards@cat@@QEAAXPEB_K0H0E0EPEA_K@Z
$pdata$?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_KH0EPEA_K@Z DD imagerel $LN172
	DD	imagerel $LN172+611
	DD	imagerel $unwind$?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_KH0EPEA_K@Z
$pdata$?PtPrecompAddSub@BigTwistedEdwards@cat@@IEAAXPEB_K0PEA_K1H@Z DD imagerel $LN124
	DD	imagerel $LN124+1158
	DD	imagerel $unwind$?PtPrecompAddSub@BigTwistedEdwards@cat@@IEAAXPEB_K0PEA_K1H@Z
$pdata$?PtMultiplyPrecomp@BigTwistedEdwards@cat@@QEAAXPEB_KHPEA_K@Z DD imagerel $LN152
	DD	imagerel $LN152+1160
	DD	imagerel $unwind$?PtMultiplyPrecomp@BigTwistedEdwards@cat@@QEAAXPEB_KHPEA_K@Z
$pdata$?PtMultiplyPrecompAlloc@BigTwistedEdwards@cat@@QEAAPEA_KH@Z DD imagerel $LN6
	DD	imagerel $LN6+52
	DD	imagerel $unwind$?PtMultiplyPrecompAlloc@BigTwistedEdwards@cat@@QEAAPEA_KH@Z
$pdata$?PtDoubleZ1@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN78
	DD	imagerel $LN78+582
	DD	imagerel $unwind$?PtDoubleZ1@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z
$pdata$?PtDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN76
	DD	imagerel $LN76+598
	DD	imagerel $unwind$?PtDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z
$pdata$?PtEDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN76
	DD	imagerel $LN76+630
	DD	imagerel $unwind$?PtEDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z
$pdata$?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN8
	DD	imagerel $LN8+114
	DD	imagerel $unwind$?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z
$pdata$?PtAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z DD imagerel $LN100
	DD	imagerel $LN100+806
	DD	imagerel $unwind$?PtAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z
$pdata$?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z DD imagerel $LN100
	DD	imagerel $LN100+838
	DD	imagerel $unwind$?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z
$pdata$?SaveAffineX@BigTwistedEdwards@cat@@QEAAXPEB_KPEAX@Z DD imagerel $LN49
	DD	imagerel $LN49+264
	DD	imagerel $unwind$?SaveAffineX@BigTwistedEdwards@cat@@QEAAXPEB_KPEAX@Z
$pdata$?PtValidAffine@BigTwistedEdwards@cat@@QEAA_NPEB_K@Z DD imagerel $LN114
	DD	imagerel $LN114+488
	DD	imagerel $unwind$?PtValidAffine@BigTwistedEdwards@cat@@QEAA_NPEB_K@Z
$pdata$?PtNormalize@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN111
	DD	imagerel $LN111+369
	DD	imagerel $unwind$?PtNormalize@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z
$pdata$?LoadVerifyAffineXY@BigTwistedEdwards@cat@@QEAA_NPEBX0PEA_K@Z DD imagerel $LN62
	DD	imagerel $LN62+90
	DD	imagerel $unwind$?LoadVerifyAffineXY@BigTwistedEdwards@cat@@QEAA_NPEBX0PEA_K@Z
$pdata$?PtCopy@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN66
	DD	imagerel $LN66+130
	DD	imagerel $unwind$?PtCopy@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z
$pdata$?PtIdentity@BigTwistedEdwards@cat@@QEAAXPEA_K@Z DD imagerel $LN64
	DD	imagerel $LN64+173
	DD	imagerel $unwind$?PtIdentity@BigTwistedEdwards@cat@@QEAAXPEA_K@Z
$pdata$?PtUnpack@BigTwistedEdwards@cat@@QEAAXPEA_K@Z DD imagerel $LN58
	DD	imagerel $LN58+86
	DD	imagerel $unwind$?PtUnpack@BigTwistedEdwards@cat@@QEAAXPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1BigPseudoMersenne@cat@@QEAA@XZ DD imagerel $LN14
	DD	imagerel $LN14+21
	DD	imagerel $unwind$??1BigPseudoMersenne@cat@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$??1BigPseudoMersenne@cat@@QEAA@XZ DD imagerel $LN14+21
	DD	imagerel $LN14+71
	DD	imagerel $chain$0$??1BigPseudoMersenne@cat@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??1BigPseudoMersenne@cat@@QEAA@XZ DD imagerel $LN14+71
	DD	imagerel $LN14+77
	DD	imagerel $chain$1$??1BigPseudoMersenne@cat@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z DD imagerel $LN151
	DD	imagerel $LN151+544
	DD	imagerel $unwind$??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z
$pdata$?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_K0EPEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+104
	DD	imagerel $unwind$?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_K0EPEA_K@Z
$pdata$?SaveAffineXY@BigTwistedEdwards@cat@@QEAAXPEB_KPEAX1@Z DD imagerel $LN78
	DD	imagerel $LN78+434
	DD	imagerel $unwind$?SaveAffineXY@BigTwistedEdwards@cat@@QEAAXPEB_KPEAX1@Z
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??1BigPseudoMersenne@cat@@QEAA@XZ DD 021H
	DD	imagerel $LN14
	DD	imagerel $LN14+21
	DD	imagerel $unwind$??1BigPseudoMersenne@cat@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$??1BigPseudoMersenne@cat@@QEAA@XZ DD 020521H
	DD	063405H
	DD	imagerel $LN14
	DD	imagerel $LN14+21
	DD	imagerel $unwind$??1BigPseudoMersenne@cat@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1BigPseudoMersenne@cat@@QEAA@XZ DD 020601H
	DD	070023206H
xdata	ENDS
xdata	SEGMENT
$unwind$?PtSiMultiply@BigTwistedEdwards@cat@@QEAAXPEB_K0H0E0EPEA_K@Z DD 0a1e01H
	DD	013341eH
	DD	0f01a721eH
	DD	0d016e018H
	DD	07012c014H
	DD	050106011H
$unwind$?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_KH0EPEA_K@Z DD 091f01H
	DD	0f01b821fH
	DD	0d017e019H
	DD	07013c015H
	DD	050116012H
	DD	03010H
$unwind$?PtPrecompAddSub@BigTwistedEdwards@cat@@IEAAXPEB_K0PEA_K1H@Z DD 0a1a01H
	DD	09e41aH
	DD	08741aH
	DD	07641aH
	DD	06341aH
	DD	0f016321aH
$unwind$?PtMultiplyPrecomp@BigTwistedEdwards@cat@@QEAAXPEB_KHPEA_K@Z DD 091101H
	DD	0f00d8211H
	DD	0d009e00bH
	DD	07005c007H
	DD	050036004H
	DD	03002H
$unwind$?PtMultiplyPrecompAlloc@BigTwistedEdwards@cat@@QEAAPEA_KH@Z DD 020601H
	DD	030023206H
$unwind$?PtDoubleZ1@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
$unwind$?PtDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
$unwind$?PtEDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
$unwind$?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$?PtAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z DD 0a1a01H
	DD	09e41aH
	DD	08741aH
	DD	07641aH
	DD	06341aH
	DD	0f016321aH
$unwind$?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z DD 0a1a01H
	DD	09e41aH
	DD	08741aH
	DD	07641aH
	DD	06341aH
	DD	0f016321aH
$unwind$?SaveAffineX@BigTwistedEdwards@cat@@QEAAXPEB_KPEAX@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
$unwind$?PtValidAffine@BigTwistedEdwards@cat@@QEAA_NPEB_K@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$?PtNormalize@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$?LoadVerifyAffineXY@BigTwistedEdwards@cat@@QEAA_NPEBX0PEA_K@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$?PtCopy@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$?PtIdentity@BigTwistedEdwards@cat@@QEAAXPEA_K@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$?PtUnpack@BigTwistedEdwards@cat@@QEAAXPEA_K@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z DD 041411H
	DD	093414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z
$stateUnwindMap$??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	05H
	DD	00H
$ip2state$??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z DD imagerel ??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z
	DD	0ffffffffH
	DD	imagerel ??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z+100
	DD	00H
	DD	imagerel ??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z+530
	DD	0ffffffffH
$unwind$?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_K0EPEA_K@Z DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
$unwind$?SaveAffineXY@BigTwistedEdwards@cat@@QEAAXPEB_KPEAX1@Z DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
$cppxdata$??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z DD 019930522H
	DD	07H
	DD	imagerel $stateUnwindMap$??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z
	DD	020H
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc
_TEXT	SEGMENT
this$ = 48
in$ = 56
out_x$ = 64
out_y$ = 72
?SaveAffineXY@BigTwistedEdwards@cat@@QEAAXPEB_KPEAX1@Z PROC ; cat::BigTwistedEdwards::SaveAffineXY

; 34   : {

$LN78:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H

; 36   :     if (EqualX(in+ZOFF, 1))

	movsxd	rax, DWORD PTR [rcx+56]
	mov	rsi, rdx
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc

; 85   :     if (in[0] != x) return false;

	mov	edi, 1
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc

; 36   :     if (EqualX(in+ZOFF, 1))

	lea	rdx, QWORD PTR [rdx+rax*8]
	mov	rbp, r9
	mov	r14, r8
	mov	rbx, rcx
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc

; 85   :     if (in[0] != x) return false;

	cmp	QWORD PTR [rdx], rdi
	jne	SHORT $LN2@SaveAffine
	movsxd	r9, DWORD PTR [rcx+4]

; 86   : 
; 87   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	eax, edi
	cmp	rdi, r9
	jge	SHORT $LN6@SaveAffine
$LL8@SaveAffine:

; 88   :         if (in[ii]) return false;

	cmp	QWORD PTR [rdx+rax*8], 0
	jne	SHORT $LN2@SaveAffine

; 86   : 
; 87   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	rax
	cmp	rax, r9
	jl	SHORT $LL8@SaveAffine
$LN6@SaveAffine:
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	lea	r9d, DWORD PTR [r9*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc

; 38   :         Save(in+XOFF, out_x, RegBytes());

	mov	rdx, rsi
	call	?Save@BigRTL@cat@@QEAAXPEB_KPEAXH@Z	; cat::BigRTL::Save

; 39   :         Save(in+YOFF, out_y, RegBytes());

	movsxd	rax, DWORD PTR [rbx+48]
	lea	rdx, QWORD PTR [rsi+rax*8]

; 40   :     }
; 41   :     else

	jmp	$LN76@SaveAffine
$LN2@SaveAffine:

; 42   :     {
; 43   :         // A = 1 / in.Z
; 44   :         MrInvert(in+ZOFF, A);

	mov	r8, QWORD PTR [rcx+72]
	call	?MrInvert@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrInvert

; 45   : 
; 46   :         // B = A * in.X
; 47   :         MrMultiply(in+XOFF, A, B);

	mov	r9, QWORD PTR [rbx+80]
	mov	r8, QWORD PTR [rbx+72]
	mov	rdx, rsi
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc

; 48   :         MrReduce(B);

	mov	rdx, QWORD PTR [rbx+80]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	rcx, rdi
	cmp	rdi, r8
	jge	SHORT $LN18@SaveAffine
	npad	5
$LL20@SaveAffine:

; 36   :         if (~inout[ii]) return;

	mov	rax, QWORD PTR [rdx+rcx*8]
	not	rax
	test	rax, rax
	jne	SHORT $LN74@SaveAffine

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	rcx
	cmp	rcx, r8
	jl	SHORT $LL20@SaveAffine
$LN18@SaveAffine:

; 37   : 
; 38   :     if (inout[0] >= (0 - modulus_c))

	mov	rcx, QWORD PTR [rbx+40]
	mov	r8, QWORD PTR [rdx]
	mov	rax, rcx
	neg	rax
	cmp	r8, rax
	jb	SHORT $LN74@SaveAffine
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	lea	rax, QWORD PTR [r8+rcx]
	mov	QWORD PTR [rdx], rax
	cmp	rax, rcx
	jae	SHORT $LN74@SaveAffine

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, edi
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LN74@SaveAffine
	lea	rax, QWORD PTR [rdx+8]
	npad	3
$LL26@SaveAffine:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN74@SaveAffine

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL26@SaveAffine
$LN74@SaveAffine:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc

; 51   :         MrMultiply(in+YOFF, A, C);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r9, QWORD PTR [rbx+88]
	mov	r8, QWORD PTR [rbx+72]
	lea	rdx, QWORD PTR [rsi+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc

; 52   :         MrReduce(C);

	mov	rdx, QWORD PTR [rbx+88]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	rcx, rdi
	cmp	rdi, r8
	jge	SHORT $LN32@SaveAffine
	npad	8
$LL34@SaveAffine:

; 36   :         if (~inout[ii]) return;

	mov	rax, QWORD PTR [rdx+rcx*8]
	not	rax
	test	rax, rax
	jne	SHORT $LN75@SaveAffine

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	rcx
	cmp	rcx, r8
	jl	SHORT $LL34@SaveAffine
$LN32@SaveAffine:

; 37   : 
; 38   :     if (inout[0] >= (0 - modulus_c))

	mov	rcx, QWORD PTR [rbx+40]
	mov	r8, QWORD PTR [rdx]
	mov	rax, rcx
	neg	rax
	cmp	r8, rax
	jb	SHORT $LN75@SaveAffine
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	lea	rax, QWORD PTR [r8+rcx]
	mov	QWORD PTR [rdx], rax
	cmp	rax, rcx
	jae	SHORT $LN75@SaveAffine

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	cmp	DWORD PTR [rbx+4], edi
	jle	SHORT $LN75@SaveAffine
	lea	rax, QWORD PTR [rdx+8]
	npad	5
$LL40@SaveAffine:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN75@SaveAffine

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	edi
	add	rax, 8
	cmp	edi, DWORD PTR [rbx+4]
	jl	SHORT $LL40@SaveAffine
$LN75@SaveAffine:
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	mov	r9d, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc

; 54   : 		Save(B, out_x, RegBytes());

	mov	rdx, QWORD PTR [rbx+80]
	mov	r8, r14
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	shl	r9d, 3
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc

; 54   : 		Save(B, out_x, RegBytes());

	call	?Save@BigRTL@cat@@QEAAXPEB_KPEAXH@Z	; cat::BigRTL::Save

; 55   :         Save(C, out_y, RegBytes());

	mov	rdx, QWORD PTR [rbx+88]
$LN76@SaveAffine:
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	mov	r9d, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc

; 55   :         Save(C, out_y, RegBytes());

	mov	r8, rbp
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	shl	r9d, 3
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinexy.inc

; 57   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14

; 55   :         Save(C, out_y, RegBytes());

	jmp	?Save@BigRTL@cat@@QEAAXPEB_KPEAXH@Z	; cat::BigRTL::Save
?SaveAffineXY@BigTwistedEdwards@cat@@QEAAXPEB_KPEAX1@Z ENDP ; cat::BigTwistedEdwards::SaveAffineXY
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc
_TEXT	SEGMENT
this$ = 64
in_p$ = 72
in_k$ = 80
msb_k$dead$ = 88
out$ = 96
?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_K0EPEA_K@Z PROC ; cat::BigTwistedEdwards::PtMultiply

; 35   : {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 36   :     Leg *DefaultPrecomp = Get(te_regs - TE_OVERHEAD);

	mov	eax, DWORD PTR [rcx+64]
	mov	rdi, r8

; 38   :     PtMultiplyPrecomp(in_p, WINDOW_BITS, DefaultPrecomp);

	mov	r8d, 6
	sub	eax, 149				; 00000095H
	mov	rsi, rcx
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, DWORD PTR [rcx+4]
	movsxd	r9, eax
	mov	rax, QWORD PTR [rcx+8]
	lea	rbx, QWORD PTR [rax+r9*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc

; 38   :     PtMultiplyPrecomp(in_p, WINDOW_BITS, DefaultPrecomp);

	mov	r9, rbx
	call	?PtMultiplyPrecomp@BigTwistedEdwards@cat@@QEAAXPEB_KHPEA_K@Z ; cat::BigTwistedEdwards::PtMultiplyPrecomp

; 39   :     PtMultiply(DefaultPrecomp, WINDOW_BITS, in_k, msb_k, out);

	mov	rax, QWORD PTR out$[rsp]
	mov	r9, rdi
	mov	r8d, 6
	mov	rdx, rbx
	mov	rcx, rsi
	mov	QWORD PTR [rsp+40], rax
	call	?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_KH0EPEA_K@Z ; cat::BigTwistedEdwards::PtMultiply

; 40   : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_K0EPEA_K@Z ENDP ; cat::BigTwistedEdwards::PtMultiply
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigpseudomersenne.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigpseudomersenne.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
_TEXT	SEGMENT
$T1 = 32
this$ = 64
regs$dead$ = 72
bits$ = 80
modulusC$ = 88
paramD$ = 96
Q$ = 104
GenPt$ = 112
??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z PROC		; cat::BigTwistedEdwards::BigTwistedEdwards

; 35   : {

$LN151:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	QWORD PTR $T1[rsp], -2
	mov	QWORD PTR [rsp+72], rbx
	movsxd	rbx, r9d
	mov	rdi, rcx
; File c:\users\jakez\desktop\libcatid-master\src\math\bigpseudomersenne.cpp

; 35   : {

	call	??0BigRTL@cat@@QEAA@HH@Z		; cat::BigRTL::BigRTL

; 36   :     pm_regs = regs + PM_OVERHEAD;

	mov	DWORD PTR [rdi+24], 176			; 000000b0H

; 37   :     modulus_c = C;

	mov	r8, rbx
	mov	QWORD PTR [rdi+40], rbx
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, DWORD PTR [rdi+4], 175		; 000000afH
	movsxd	rdx, eax
	mov	rax, QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [rax+rdx*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigpseudomersenne.cpp

; 40   :     CachedModulus = Get(pm_regs - 1);

	mov	QWORD PTR [rdi+32], rcx

; 41   :     CopyModulus(CachedModulus);
; 42   : }
; 43   : 
; 44   : void CAT_FASTCALL BigPseudoMersenne::CopyModulus(Leg *out)
; 45   : {
; 46   :     // Set low leg to -C, set all bits on the rest
; 47   :     out[0] = 0 - modulus_c;

	neg	r8
	mov	QWORD PTR [rcx], r8

; 48   :     memset(&out[1], 0xFF, (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rdi+4]
	dec	eax
	movsxd	r8, eax
	shl	r8, 3
	add	rcx, 8
	mov	edx, 255				; 000000ffH
	call	memset
	npad	1
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 38   : 	te_regs = regs + TE_OVERHEAD;

	mov	DWORD PTR [rdi+64], 170			; 000000aaH

; 39   : 	curve_d = paramD;

	movsxd	rax, DWORD PTR paramD$[rsp]
	mov	QWORD PTR [rdi+160], rax

; 40   : 
; 41   : 	YOFF = library_legs;

	mov	r8d, DWORD PTR [rdi+4]
	mov	DWORD PTR [rdi+48], r8d

; 42   : 	TOFF = library_legs * 2;

	lea	eax, DWORD PTR [r8+r8]
	mov	DWORD PTR [rdi+52], eax

; 43   : 	ZOFF = library_legs * 3;

	lea	eax, DWORD PTR [r8+r8*2]
	mov	DWORD PTR [rdi+56], eax

; 44   : 	POINT_STRIDE = library_legs * POINT_REGS;

	lea	eax, DWORD PTR [r8*4]
	mov	DWORD PTR [rdi+60], eax
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	mov	rdx, QWORD PTR [rdi+8]
	imul	eax, r8d, 169				; 000000a9H
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rdx+rcx*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 46   : 	A = Get(te_regs - 1);

	mov	QWORD PTR [rdi+72], rax
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r8d, 168				; 000000a8H
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rdx+rcx*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 47   : 	B = Get(te_regs - 2);

	mov	QWORD PTR [rdi+80], rax
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r8d, 167				; 000000a7H
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rdx+rcx*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 48   : 	C = Get(te_regs - 3);

	mov	QWORD PTR [rdi+88], rax
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r8d, 166				; 000000a6H
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rdx+rcx*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 49   : 	D = Get(te_regs - 4);

	mov	QWORD PTR [rdi+96], rax
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r8d, 165				; 000000a5H
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rdx+rcx*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 50   : 	E = Get(te_regs - 5);

	mov	QWORD PTR [rdi+104], rax
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r8d, 164				; 000000a4H
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rdx+rcx*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 51   : 	F = Get(te_regs - 6);

	mov	QWORD PTR [rdi+112], rax
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r8d, 163				; 000000a3H
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rdx+rcx*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 52   : 	G = Get(te_regs - 7);

	mov	QWORD PTR [rdi+120], rax
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r8d, 162				; 000000a2H
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rdx+rcx*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 53   : 	H = Get(te_regs - 8);

	mov	QWORD PTR [rdi+128], rax
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r8d, 161				; 000000a1H
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rdx+rcx*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 54   : 	CurveQ = Get(te_regs - 9);

	mov	QWORD PTR [rdi+136], rax
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r8d, 157				; 0000009dH
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rdx+rcx*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 55   : 	TempPt = Get(te_regs - 13);

	mov	QWORD PTR [rdi+152], rax
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r8d, 153				; 00000099H
	movsxd	rcx, eax
	lea	r9, QWORD PTR [rdx+rcx*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 56   : 	Generator = Get(te_regs - 17);

	mov	QWORD PTR [rdi+144], r9
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	lea	r8d, DWORD PTR [r8*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 58   : 	Load(GenPt, RegBytes(), Generator);

	mov	rdx, QWORD PTR GenPt$[rsp]
	mov	rcx, rdi
	call	?Load@BigRTL@cat@@QEAAXPEBXHPEA_K@Z	; cat::BigRTL::Load

; 59   : 	Load(GenPt + RegBytes(), RegBytes(), Generator + library_legs);

	movsxd	rax, DWORD PTR [rdi+4]
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	lea	r8d, DWORD PTR [rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 59   : 	Load(GenPt + RegBytes(), RegBytes(), Generator + library_legs);

	mov	rcx, rax
	mov	rax, QWORD PTR [rdi+144]
	lea	r9, QWORD PTR [rax+rcx*8]
	movsxd	rdx, r8d
	add	rdx, QWORD PTR GenPt$[rsp]
	mov	rcx, rdi
	call	?Load@BigRTL@cat@@QEAAXPEBXHPEA_K@Z	; cat::BigRTL::Load

; 60   : 	PtUnpack(Generator);

	mov	rbx, QWORD PTR [rdi+144]

; 64   : 
; 65   : // Unpack an Extended Projective point (X,Y,T,Z) from affine point (x,y)
; 66   : void BigTwistedEdwards::PtUnpack(Leg *inout)
; 67   : {
; 68   : 	CAT_DEBUG_ENFORCE(inout);
; 69   : 
; 70   : 	MrMultiply(inout+XOFF, inout+YOFF, inout+TOFF);

	movsxd	rax, DWORD PTR [rdi+52]
	lea	r9, QWORD PTR [rbx+rax*8]
	movsxd	rax, DWORD PTR [rdi+48]
	lea	r8, QWORD PTR [rbx+rax*8]
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 71   : 	CopyX(1, inout+ZOFF);

	movsxd	rax, DWORD PTR [rdi+56]
	lea	rcx, QWORD PTR [rbx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 76   :     out_reg[0] = in_reg;

	mov	QWORD PTR [rcx], 1

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rdi+4]
	dec	eax
	movsxd	r8, eax
	shl	r8, 3
	add	rcx, 8
	xor	edx, edx
	call	memset
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	mov	r8d, DWORD PTR [rdi+4]
	shl	r8d, 3
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 62   : 	Load(Q, RegBytes(), CurveQ);

	mov	r9, QWORD PTR [rdi+136]
	mov	rdx, QWORD PTR Q$[rsp]
	mov	rcx, rdi
	call	?Load@BigRTL@cat@@QEAAXPEBXHPEA_K@Z	; cat::BigRTL::Load
	npad	1

; 63   : }

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z ENDP		; cat::BigTwistedEdwards::BigTwistedEdwards
_TEXT	ENDS
; Function compile flags: /Ogtpy
text$x	SEGMENT
$T1 = 32
this$ = 64
regs$dead$ = 72
bits$ = 80
modulusC$ = 88
paramD$ = 96
Q$ = 104
GenPt$ = 112
?dtor$0@?0???0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z@4HA PROC ; `cat::BigTwistedEdwards::BigTwistedEdwards'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1BigPseudoMersenne@cat@@QEAA@XZ
?dtor$0@?0???0BigTwistedEdwards@cat@@QEAA@HHHHPEBE0@Z@4HA ENDP ; `cat::BigTwistedEdwards::BigTwistedEdwards'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\include\cat\mem\iallocator.hpp
;	COMDAT ??1BigPseudoMersenne@cat@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1BigPseudoMersenne@cat@@QEAA@XZ PROC			; cat::BigPseudoMersenne::~BigPseudoMersenne, COMDAT
$LN14:
	push	rdi
	sub	rsp, 32					; 00000020H
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 55   :     if (library_memory)

	mov	rdi, QWORD PTR [rcx+8]
	mov	rdx, rcx
	test	rdi, rdi
	je	SHORT $LN9@BigPseudoM

; 58   :         CAT_SECURE_CLR(library_memory, library_legs * library_regs * sizeof(Leg));

	mov	eax, DWORD PTR [rcx+4]
	mov	QWORD PTR [rsp+48], rbx
	imul	eax, DWORD PTR [rcx]
	movsxd	rcx, eax
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h

; 17792:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

	xor	eax, eax
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 58   :         CAT_SECURE_CLR(library_memory, library_legs * library_regs * sizeof(Leg));

	shl	rcx, 3
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h

; 17792:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

	rep stosb
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 59   :         AlignedAllocator::ref()->Delete(library_memory);

	mov	rbx, QWORD PTR [rdx+8]
	call	?ref@?$Singleton@VAlignedAllocator@cat@@@cat@@SAPEAVAlignedAllocator@2@XZ ; cat::Singleton<cat::AlignedAllocator>::ref
; File c:\users\jakez\desktop\libcatid-master\include\cat\mem\iallocator.hpp

; 165  : 		if (ptr)

	test	rbx, rbx
	je	SHORT $LN12@BigPseudoM

; 166  : 		{
; 167  : 			ptr->~T();
; 168  : 			Release(ptr);

	mov	rdi, QWORD PTR [rax]
	mov	rdx, rbx
	mov	rcx, rax
	call	QWORD PTR [rdi+32]
$LN12@BigPseudoM:
	mov	rbx, QWORD PTR [rsp+48]
$LN9@BigPseudoM:
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1BigPseudoMersenne@cat@@QEAA@XZ ENDP			; cat::BigPseudoMersenne::~BigPseudoMersenne
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
_TEXT	SEGMENT
this$ = 48
inout$ = 56
?PtUnpack@BigTwistedEdwards@cat@@QEAAXPEA_K@Z PROC	; cat::BigTwistedEdwards::PtUnpack

; 67   : {

$LN58:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 68   : 	CAT_DEBUG_ENFORCE(inout);
; 69   : 
; 70   : 	MrMultiply(inout+XOFF, inout+YOFF, inout+TOFF);

	movsxd	rax, DWORD PTR [rcx+52]
	mov	rbx, rdx
	mov	rdi, rcx
	lea	r9, QWORD PTR [rdx+rax*8]
	movsxd	rax, DWORD PTR [rcx+48]
	lea	r8, QWORD PTR [rdx+rax*8]
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 71   : 	CopyX(1, inout+ZOFF);

	movsxd	rax, DWORD PTR [rdi+56]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 76   :     out_reg[0] = in_reg;

	mov	QWORD PTR [rbx+rax*8], 1
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 71   : 	CopyX(1, inout+ZOFF);

	lea	rcx, QWORD PTR [rbx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rdi+4]
	xor	edx, edx
	dec	eax
	add	rcx, 8
	movsxd	r8, eax
	shl	r8, 3
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 72   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	jmp	memset
?PtUnpack@BigTwistedEdwards@cat@@QEAAXPEA_K@Z ENDP	; cat::BigTwistedEdwards::PtUnpack
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
_TEXT	SEGMENT
this$ = 48
inout$ = 56
?PtIdentity@BigTwistedEdwards@cat@@QEAAXPEA_K@Z PROC	; cat::BigTwistedEdwards::PtIdentity

; 76   : {

$LN64:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 76   :     out_reg[0] = in_reg;

	mov	QWORD PTR [rdx], 0

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rcx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 76   : {

	mov	rdi, rcx
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	dec	eax
	lea	rcx, QWORD PTR [rdx+8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 76   : {

	mov	rbx, rdx
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	movsxd	r8, eax
	xor	edx, edx
	shl	r8, 3
	call	memset
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 80   : 	CopyX(1, inout+YOFF);

	movsxd	rax, DWORD PTR [rdi+48]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 76   :     out_reg[0] = in_reg;

	mov	QWORD PTR [rbx+rax*8], 1
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 80   : 	CopyX(1, inout+YOFF);

	lea	rcx, QWORD PTR [rbx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rdi+4]
	xor	edx, edx
	dec	eax
	add	rcx, 8
	movsxd	r8, eax
	shl	r8, 3
	call	memset
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 81   : 	CopyX(0, inout+TOFF);

	movsxd	rax, DWORD PTR [rdi+52]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 76   :     out_reg[0] = in_reg;

	mov	QWORD PTR [rbx+rax*8], 0
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 81   : 	CopyX(0, inout+TOFF);

	lea	rcx, QWORD PTR [rbx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rdi+4]
	xor	edx, edx
	dec	eax
	add	rcx, 8
	movsxd	r8, eax
	shl	r8, 3
	call	memset
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 82   : 	CopyX(1, inout+ZOFF);

	movsxd	rax, DWORD PTR [rdi+56]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 76   :     out_reg[0] = in_reg;

	mov	QWORD PTR [rbx+rax*8], 1
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 82   : 	CopyX(1, inout+ZOFF);

	lea	rcx, QWORD PTR [rbx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rdi+4]
	xor	edx, edx
	dec	eax
	add	rcx, 8
	movsxd	r8, eax
	shl	r8, 3
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 83   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	jmp	memset
?PtIdentity@BigTwistedEdwards@cat@@QEAAXPEA_K@Z ENDP	; cat::BigTwistedEdwards::PtIdentity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
_TEXT	SEGMENT
this$ = 48
in$ = 56
out$ = 64
?PtCopy@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z PROC	; cat::BigTwistedEdwards::PtCopy

; 86   : {

$LN66:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r8
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rcx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 86   : {

	mov	rbx, rcx
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	mov	rcx, rsi
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 86   : {

	mov	rdi, rdx
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 90   : 	Copy(in+YOFF, out+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 90   : 	Copy(in+YOFF, out+YOFF);

	lea	rdx, QWORD PTR [rdi+rax*8]
	lea	rcx, QWORD PTR [rsi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 91   : 	Copy(in+TOFF, out+TOFF);

	movsxd	rax, DWORD PTR [rbx+52]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 91   : 	Copy(in+TOFF, out+TOFF);

	lea	rdx, QWORD PTR [rdi+rax*8]
	lea	rcx, QWORD PTR [rsi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 92   : 	Copy(in+ZOFF, out+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 92   : 	Copy(in+ZOFF, out+ZOFF);

	lea	rdx, QWORD PTR [rdi+rax*8]
	lea	rcx, QWORD PTR [rsi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 93   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	jmp	memcpy
?PtCopy@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ENDP	; cat::BigTwistedEdwards::PtCopy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
_TEXT	SEGMENT
this$ = 48
in_x$ = 56
in_y$ = 64
out$ = 72
?LoadVerifyAffineXY@BigTwistedEdwards@cat@@QEAA_NPEBX0PEA_K@Z PROC ; cat::BigTwistedEdwards::LoadVerifyAffineXY

; 106  : {

$LN62:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	mov	r8d, DWORD PTR [rcx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 106  : {

	mov	rsi, r9
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	shl	r8d, 3
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 106  : {

	mov	rdi, rcx

; 107  : 	CAT_DEBUG_ENFORCE(in_x && in_y && out);
; 108  : 
; 109  : 	Load(in_x, RegBytes(), out+XOFF);

	call	?Load@BigRTL@cat@@QEAAXPEBXHPEA_K@Z	; cat::BigRTL::Load

; 110  : 	Load(in_y, RegBytes(), out+YOFF);

	movsxd	rax, DWORD PTR [rdi+48]
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	mov	r8d, DWORD PTR [rdi+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 110  : 	Load(in_y, RegBytes(), out+YOFF);

	lea	r9, QWORD PTR [rsi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	shl	r8d, 3
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 110  : 	Load(in_y, RegBytes(), out+YOFF);

	mov	rdx, rbx
	mov	rcx, rdi
	call	?Load@BigRTL@cat@@QEAAXPEBXHPEA_K@Z	; cat::BigRTL::Load

; 111  : 
; 112  : 	return PtValidAffine(out);

	mov	rdx, rsi
	mov	rcx, rdi

; 113  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 111  : 
; 112  : 	return PtValidAffine(out);

	jmp	?PtValidAffine@BigTwistedEdwards@cat@@QEAA_NPEB_K@Z ; cat::BigTwistedEdwards::PtValidAffine
?LoadVerifyAffineXY@BigTwistedEdwards@cat@@QEAA_NPEBX0PEA_K@Z ENDP ; cat::BigTwistedEdwards::LoadVerifyAffineXY
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptnormalize.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptnormalize.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptnormalize.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptnormalize.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptnormalize.inc
_TEXT	SEGMENT
this$ = 48
in$ = 56
out$ = 64
?PtNormalize@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z PROC ; cat::BigTwistedEdwards::PtNormalize

; 34   : {

$LN111:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 35   :     // A = 1 / in.Z
; 36   :     MrInvert(in+ZOFF, A);

	movsxd	rax, DWORD PTR [rcx+56]
	mov	rdi, r8
	mov	r8, QWORD PTR [rcx+72]
	mov	rsi, rdx
	lea	rdx, QWORD PTR [rdx+rax*8]
	mov	rbx, rcx
	call	?MrInvert@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrInvert

; 37   : 
; 38   :     // out.X = A * in.X
; 39   :     MrMultiply(in+XOFF, A, out+XOFF);

	mov	r8, QWORD PTR [rbx+72]
	mov	r9, rdi
	mov	rdx, rsi
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	movsxd	rdx, DWORD PTR [rbx+4]
	mov	ecx, 1
	cmp	rcx, rdx
	jge	SHORT $LN5@PtNormaliz
	npad	7
$LL7@PtNormaliz:

; 36   :         if (~inout[ii]) return;

	mov	rax, QWORD PTR [rdi+rcx*8]
	not	rax
	test	rax, rax
	jne	SHORT $LN108@PtNormaliz

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	rcx
	cmp	rcx, rdx
	jl	SHORT $LL7@PtNormaliz
$LN5@PtNormaliz:

; 37   : 
; 38   :     if (inout[0] >= (0 - modulus_c))

	mov	rcx, QWORD PTR [rbx+40]
	mov	rdx, QWORD PTR [rdi]
	mov	rax, rcx
	neg	rax
	cmp	rdx, rax
	jb	SHORT $LN108@PtNormaliz
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	lea	rax, QWORD PTR [rdx+rcx]
	mov	QWORD PTR [rdi], rax
	cmp	rax, rcx
	jae	SHORT $LN108@PtNormaliz

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LN108@PtNormaliz
	lea	rax, QWORD PTR [rdi+8]
$LL13@PtNormaliz:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN108@PtNormaliz

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL13@PtNormaliz
$LN108@PtNormaliz:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptnormalize.inc

; 43   :     MrMultiply(in+YOFF, A, out+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r8, QWORD PTR [rbx+72]
	mov	rcx, rbx
	lea	r9, QWORD PTR [rdi+rax*8]
	lea	rdx, QWORD PTR [rsi+rax*8]
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 44   :     MrReduce(out+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	movsxd	r8, DWORD PTR [rbx+4]
	mov	ecx, 1
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptnormalize.inc

; 44   :     MrReduce(out+YOFF);

	lea	rdx, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	cmp	rcx, r8
	jge	SHORT $LN19@PtNormaliz
	npad	2
$LL21@PtNormaliz:

; 36   :         if (~inout[ii]) return;

	mov	rax, QWORD PTR [rdx+rcx*8]
	not	rax
	test	rax, rax
	jne	SHORT $LN33@PtNormaliz

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	rcx
	cmp	rcx, r8
	jl	SHORT $LL21@PtNormaliz
$LN19@PtNormaliz:

; 37   : 
; 38   :     if (inout[0] >= (0 - modulus_c))

	mov	rcx, QWORD PTR [rbx+40]
	mov	r8, QWORD PTR [rdx]
	mov	rax, rcx
	neg	rax
	cmp	r8, rax
	jb	SHORT $LN33@PtNormaliz
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	lea	rax, QWORD PTR [r8+rcx]
	mov	QWORD PTR [rdx], rax
	cmp	rax, rcx
	jae	SHORT $LN33@PtNormaliz

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LN33@PtNormaliz
	lea	rax, QWORD PTR [rdx+8]
$LL27@PtNormaliz:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN33@PtNormaliz

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL27@PtNormaliz
$LN33@PtNormaliz:
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 70   : 	MrMultiply(inout+XOFF, inout+YOFF, inout+TOFF);

	movsxd	rax, DWORD PTR [rbx+52]
	mov	rdx, rdi
	mov	rcx, rbx
	lea	r9, QWORD PTR [rdi+rax*8]
	movsxd	rax, DWORD PTR [rbx+48]
	lea	r8, QWORD PTR [rdi+rax*8]
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 71   : 	CopyX(1, inout+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 76   :     out_reg[0] = in_reg;

	mov	QWORD PTR [rdi+rax*8], 1
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 71   : 	CopyX(1, inout+ZOFF);

	lea	rcx, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rbx+4]
	xor	edx, edx
	dec	eax
	add	rcx, 8
	movsxd	r8, eax
	shl	r8, 3
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptnormalize.inc

; 47   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	jmp	memset
?PtNormalize@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ENDP ; cat::BigTwistedEdwards::PtNormalize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc
_TEXT	SEGMENT
this$ = 48
in$ = 56
?PtValidAffine@BigTwistedEdwards@cat@@QEAA_NPEB_K@Z PROC ; cat::BigTwistedEdwards::PtValidAffine

; 58   : {

$LN114:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 59   :     // 0 = 1 + d*x^2*y^2 + x^2 - y^2
; 60   : 
; 61   :     // A = x^2
; 62   :     MrSquare(in+XOFF, A);

	mov	r8, QWORD PTR [rcx+72]
	mov	rdi, rdx
	mov	rbx, rcx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 63   : 
; 64   :     // B = y^2
; 65   :     MrSquare(in+YOFF, B);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r8, QWORD PTR [rbx+80]
	lea	rdx, QWORD PTR [rdi+rax*8]
	mov	rcx, rbx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 66   : 
; 67   :     // C = A * B * d + 1 + A - B
; 68   :     MrMultiply(A, B, C);

	mov	r9, QWORD PTR [rbx+88]
	mov	r8, QWORD PTR [rbx+80]
	mov	rdx, QWORD PTR [rbx+72]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 69   :     MrMultiplyX(C, curve_d, C);

	mov	rdx, QWORD PTR [rbx+88]
	mov	r8, QWORD PTR [rbx+160]
	mov	r9, rdx
	mov	rcx, rbx
	call	?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z ; cat::BigPseudoMersenne::MrMultiplyX

; 70   :     MrAddX(C, 1);

	mov	rdx, QWORD PTR [rbx+88]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	mov	edi, 1
	inc	QWORD PTR [rdx]
	cmp	QWORD PTR [rdx], rdi
	jae	SHORT $LN103@PtValidAff

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, edi
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL4@PtValidAff
	lea	rax, QWORD PTR [rdx+8]
$LL11@PtValidAff:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN103@PtValidAff

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL11@PtValidAff
	npad	8
$LL4@PtValidAff:
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 37   :         while (AddX(inout, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdx], rax
	cmp	QWORD PTR [rdx], rax
	jae	SHORT $LN103@PtValidAff

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, edi
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL4@PtValidAff
	lea	rax, QWORD PTR [rdx+8]
$LL18@PtValidAff:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN103@PtValidAff

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL18@PtValidAff
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 37   :         while (AddX(inout, modulus_c));

	jmp	SHORT $LL4@PtValidAff
$LN103@PtValidAff:

; 38   : }
; 39   : 
; 40   : void CAT_FASTCALL BigPseudoMersenne::MrAdd(const Leg *in_a, const Leg *in_b, Leg *out)
; 41   : {
; 42   : #if defined(CAT_USE_LEGS_ASM64)
; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc

; 71   :     MrAdd(C, A, C);

	mov	rsi, QWORD PTR [rbx+88]
	mov	r8, QWORD PTR [rbx+72]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rsi
	mov	rdx, rsi
	jne	$LN25@PtValidAff
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN104@PtValidAff:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc

; 72   :     MrSubtract(C, B, C);

	mov	rdx, QWORD PTR [rbx+88]
	mov	r8, QWORD PTR [rbx+80]
	mov	rcx, rbx
	mov	r9, rdx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc

; 73   :     MrReduce(C);

	mov	rdx, QWORD PTR [rbx+88]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	rcx, rdi
	cmp	rdi, r8
	jge	SHORT $LN37@PtValidAff
	npad	3
$LL39@PtValidAff:

; 36   :         if (~inout[ii]) return;

	mov	rax, QWORD PTR [rdx+rcx*8]
	not	rax
	test	rax, rax
	jne	SHORT $LN105@PtValidAff

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	rcx
	cmp	rcx, r8
	jl	SHORT $LL39@PtValidAff
$LN37@PtValidAff:

; 37   : 
; 38   :     if (inout[0] >= (0 - modulus_c))

	mov	rcx, QWORD PTR [rbx+40]
	mov	r8, QWORD PTR [rdx]
	mov	rax, rcx
	neg	rax
	cmp	r8, rax
	jb	SHORT $LN105@PtValidAff
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	lea	rax, QWORD PTR [r8+rcx]
	mov	QWORD PTR [rdx], rax
	cmp	rax, rcx
	jae	SHORT $LN105@PtValidAff

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	cmp	DWORD PTR [rbx+4], edi
	jle	SHORT $LN105@PtValidAff
	lea	rax, QWORD PTR [rdx+8]
	npad	5
$LL45@PtValidAff:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN105@PtValidAff

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	edi
	add	rax, 8
	cmp	edi, DWORD PTR [rbx+4]
	jl	SHORT $LL45@PtValidAff
$LN105@PtValidAff:
	movsxd	rax, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc

; 95   :     for (int ii = 0; ii < library_legs; ++ii)

	test	eax, eax
	jle	SHORT $LN50@PtValidAff
	mov	rdx, rax
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc

; 76   :     return IsZero(C);

	mov	rax, QWORD PTR [rbx+88]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc

; 95   :     for (int ii = 0; ii < library_legs; ++ii)

	xor	ecx, ecx
$LL52@PtValidAff:

; 96   :         if (in[ii]) return false;

	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN68@PtValidAff

; 95   :     for (int ii = 0; ii < library_legs; ++ii)

	inc	rcx
	add	rax, 8
	cmp	rcx, rdx
	jl	SHORT $LL52@PtValidAff
$LN50@PtValidAff:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc

; 76   :     return IsZero(C);

	mov	al, 1

; 77   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN25@PtValidAff:
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN104@PtValidAff
	npad	11
$LL23@PtValidAff:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rsi], rax
	cmp	QWORD PTR [rsi], rax
	jae	$LN104@PtValidAff

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, edi
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL23@PtValidAff
	lea	rax, QWORD PTR [rsi+8]
	npad	5
$LL31@PtValidAff:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN104@PtValidAff

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL31@PtValidAff
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL23@PtValidAff
$LN68@PtValidAff:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc

; 77   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	xor	al, al
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?PtValidAffine@BigTwistedEdwards@cat@@QEAA_NPEB_K@Z ENDP ; cat::BigTwistedEdwards::PtValidAffine
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc
_TEXT	SEGMENT
this$ = 8
in$ = 16
?IsAffineIdentity@BigTwistedEdwards@cat@@QEAA_NPEB_K@Z PROC ; cat::BigTwistedEdwards::IsAffineIdentity
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc

; 85   :     if (in[0] != x) return false;

	cmp	QWORD PTR [rdx], 0
	je	SHORT $LN7@IsAffineId
$LN11@IsAffineId:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc

; 82   : 	return EqualX(in+XOFF, 0);

	xor	al, al

; 83   : }

	ret	0
$LN7@IsAffineId:
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc

; 87   :     for (int ii = 1; ii < library_legs; ++ii)

	movsxd	rcx, DWORD PTR [rcx+4]
	mov	eax, 1
	cmp	rax, rcx
	jge	SHORT $LN4@IsAffineId
$LL6@IsAffineId:

; 88   :         if (in[ii]) return false;

	cmp	QWORD PTR [rdx+rax*8], 0
	jne	SHORT $LN11@IsAffineId

; 87   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	rax
	cmp	rax, rcx
	jl	SHORT $LL6@IsAffineId
$LN4@IsAffineId:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\ptvalidaffine.inc

; 82   : 	return EqualX(in+XOFF, 0);

	mov	al, 1

; 83   : }

	ret	0
?IsAffineIdentity@BigTwistedEdwards@cat@@QEAA_NPEB_K@Z ENDP ; cat::BigTwistedEdwards::IsAffineIdentity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinex.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinex.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinex.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinex.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinex.inc
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinex.inc
_TEXT	SEGMENT
this$ = 48
in$ = 56
out_x$ = 64
?SaveAffineX@BigTwistedEdwards@cat@@QEAAXPEB_KPEAX@Z PROC ; cat::BigTwistedEdwards::SaveAffineX

; 34   : {

$LN49:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 36   :     if (EqualX(in+ZOFF, 1))

	movsxd	rax, DWORD PTR [rcx+56]
	mov	rsi, rdx
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc

; 85   :     if (in[0] != x) return false;

	mov	ebx, 1
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinex.inc

; 36   :     if (EqualX(in+ZOFF, 1))

	lea	rdx, QWORD PTR [rdx+rax*8]
	mov	rbp, r8
	mov	rdi, rcx
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\compare.inc

; 85   :     if (in[0] != x) return false;

	cmp	QWORD PTR [rdx], rbx
	jne	SHORT $LN2@SaveAffine
	movsxd	r9, DWORD PTR [rcx+4]

; 86   : 
; 87   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	eax, ebx
	cmp	rbx, r9
	jge	SHORT $LN6@SaveAffine
	npad	6
$LL8@SaveAffine:

; 88   :         if (in[ii]) return false;

	cmp	QWORD PTR [rdx+rax*8], 0
	jne	SHORT $LN2@SaveAffine

; 86   : 
; 87   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	rax
	cmp	rax, r9
	jl	SHORT $LL8@SaveAffine
$LN6@SaveAffine:
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	lea	r9d, DWORD PTR [r9*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinex.inc

; 38   :         Save(in+XOFF, out_x, RegBytes());

	mov	rdx, rsi

; 39   :     }
; 40   :     else

	jmp	$LN47@SaveAffine
$LN2@SaveAffine:

; 41   :     {
; 42   :         // A = 1 / in.Z
; 43   :         MrInvert(in+ZOFF, A);

	mov	r8, QWORD PTR [rcx+72]
	call	?MrInvert@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrInvert

; 44   : 
; 45   :         // B = A * in.X
; 46   :         MrMultiply(in+XOFF, A, B);

	mov	r9, QWORD PTR [rdi+80]
	mov	r8, QWORD PTR [rdi+72]
	mov	rdx, rsi
	mov	rcx, rdi
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	movsxd	r8, DWORD PTR [rdi+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinex.inc

; 47   :         MrReduce(B);

	mov	rdx, QWORD PTR [rdi+80]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\reduce\mrreduce.inc

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	rcx, rbx
	cmp	rbx, r8
	jge	SHORT $LN16@SaveAffine
	npad	5
$LL18@SaveAffine:

; 36   :         if (~inout[ii]) return;

	mov	rax, QWORD PTR [rdx+rcx*8]
	not	rax
	test	rax, rax
	jne	SHORT $LN46@SaveAffine

; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	rcx
	cmp	rcx, r8
	jl	SHORT $LL18@SaveAffine
$LN16@SaveAffine:

; 37   : 
; 38   :     if (inout[0] >= (0 - modulus_c))

	mov	rcx, QWORD PTR [rdi+40]
	mov	r8, QWORD PTR [rdx]
	mov	rax, rcx
	neg	rax
	cmp	r8, rax
	jb	SHORT $LN46@SaveAffine
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	lea	rax, QWORD PTR [r8+rcx]
	mov	QWORD PTR [rdx], rax
	cmp	rax, rcx
	jae	SHORT $LN46@SaveAffine

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	cmp	DWORD PTR [rdi+4], ebx
	jle	SHORT $LN46@SaveAffine
	lea	rax, QWORD PTR [rdx+8]
	npad	5
$LL24@SaveAffine:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN46@SaveAffine

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ebx
	add	rax, 8
	cmp	ebx, DWORD PTR [rdi+4]
	jl	SHORT $LL24@SaveAffine
$LN46@SaveAffine:
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	mov	r9d, DWORD PTR [rdi+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinex.inc

; 49   :         Save(B, out_x, RegBytes());

	mov	rdx, QWORD PTR [rdi+80]
	mov	r8, rbp
; File c:\users\jakez\desktop\libcatid-master\include\cat\math\bigrtl.hpp

; 83   :     CAT_INLINE int RegBytes() { return library_legs * sizeof(Leg); }

	shl	r9d, 3
$LN47@SaveAffine:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\io\saveaffinex.inc

; 51   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi

; 49   :         Save(B, out_x, RegBytes());

	jmp	?Save@BigRTL@cat@@QEAAXPEB_KPEAXH@Z	; cat::BigRTL::Save
?SaveAffineX@BigTwistedEdwards@cat@@QEAAXPEB_KPEAX@Z ENDP ; cat::BigTwistedEdwards::SaveAffineX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
_TEXT	SEGMENT
this$ = 48
in_a$ = 56
in_b$ = 64
out$ = 72
?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z PROC	; cat::BigTwistedEdwards::PtEAdd

; 60   : {

$LN100:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	r15
	sub	rsp, 32					; 00000020H

; 61   :     // A = (Y1 - X1) * (Y2 - X2)
; 62   :     MrSubtract(in_a+YOFF, in_a+XOFF, C);

	movsxd	rax, DWORD PTR [rcx+48]
	mov	r14, rdx
	mov	r15, r9
	mov	r9, QWORD PTR [rcx+88]
	mov	rsi, r8
	lea	rdx, QWORD PTR [rdx+rax*8]
	mov	r8, r14
	mov	rbx, rcx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract

; 63   :     MrSubtract(in_b+YOFF, in_b+XOFF, D);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r9, QWORD PTR [rbx+96]
	lea	rdx, QWORD PTR [rsi+rax*8]
	mov	r8, rsi
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 66   :     MrAdd(in_a+YOFF, in_a+XOFF, G);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	rdi, QWORD PTR [rbx+120]
	lea	rdx, QWORD PTR [r14+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r8, r14
	mov	r9, rdi
	jne	$LN6@PtEAdd
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN95@PtEAdd:

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 67   :     MrAdd(in_b+YOFF, in_b+XOFF, H);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	rdi, QWORD PTR [rbx+128]
	lea	rdx, QWORD PTR [rsi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	mov	r8, rsi
	jne	$LN19@PtEAdd
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN96@PtEAdd:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 68   : 	MrMultiply(C, D, A);

	mov	r9, QWORD PTR [rbx+72]
	mov	r8, QWORD PTR [rbx+96]
	mov	rdx, QWORD PTR [rbx+88]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 69   : 
; 70   :     // C = 2 * d * T1 * T2 (can remove multiplication by d if inputs are known to be different)
; 71   :     MrMultiply(in_a+TOFF, in_b+TOFF, C);

	movsxd	rax, DWORD PTR [rbx+52]
	mov	r9, QWORD PTR [rbx+88]
	lea	r8, QWORD PTR [rsi+rax*8]
	lea	rdx, QWORD PTR [r14+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 72   : 	MrMultiply(G, H, B);

	mov	r9, QWORD PTR [rbx+80]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+120]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 73   : 	MrMultiplyX(C, curve_d * 2, C);

	mov	rdx, QWORD PTR [rbx+88]
	mov	r8, QWORD PTR [rbx+160]
	add	r8, r8
	mov	r9, rdx
	mov	rcx, rbx
	call	?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z ; cat::BigPseudoMersenne::MrMultiplyX

; 74   : 
; 75   :     // D = 2 * Z1 * Z2
; 76   :     MrMultiply(in_a+ZOFF, in_b+ZOFF, D);

	movsxd	rax, DWORD PTR [rbx+56]
	mov	r9, QWORD PTR [rbx+96]
	lea	r8, QWORD PTR [rsi+rax*8]
	lea	rdx, QWORD PTR [r14+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 77   : 
; 78   :     // E = B - A, F = D - C, G = D + C, H = B + A
; 79   :     MrSubtract(B, A, E);

	mov	r9, QWORD PTR [rbx+104]
	mov	r8, QWORD PTR [rbx+72]
	mov	rdx, QWORD PTR [rbx+80]
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract

; 80   : 	MrDouble(D, D);

	mov	r8, QWORD PTR [rbx+96]
	mov	rcx, rbx
	mov	rdx, r8
	call	?MrDouble@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrDouble
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 81   :     MrAdd(B, A, H);

	mov	rdi, QWORD PTR [rbx+128]
	mov	r8, QWORD PTR [rbx+72]
	mov	rdx, QWORD PTR [rbx+80]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	jne	$LN32@PtEAdd
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN97@PtEAdd:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 82   : 	MrSubtract(D, C, F);

	mov	r9, QWORD PTR [rbx+112]
	mov	r8, QWORD PTR [rbx+88]
	mov	rdx, QWORD PTR [rbx+96]
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 83   : 	MrAdd(D, C, G);

	mov	rdi, QWORD PTR [rbx+120]
	mov	r8, QWORD PTR [rbx+88]
	mov	rdx, QWORD PTR [rbx+96]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	jne	$LN45@PtEAdd
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN98@PtEAdd:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 86   :     MrMultiply(E, F, out+XOFF);

	mov	r8, QWORD PTR [rbx+112]
	mov	rdx, QWORD PTR [rbx+104]
	mov	r9, r15
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 87   :     MrMultiply(G, H, out+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+120]
	lea	r9, QWORD PTR [r15+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 88   : #if defined(EXTENDED_T)
; 89   :     MrMultiply(E, H, out+TOFF);

	movsxd	rax, DWORD PTR [rbx+52]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+104]
	lea	r9, QWORD PTR [r15+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 90   : #endif
; 91   :     MrMultiply(F, G, out+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
	mov	r8, QWORD PTR [rbx+120]
	mov	rdx, QWORD PTR [rbx+112]
	lea	r9, QWORD PTR [r15+rax*8]
	mov	rcx, rbx

; 92   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15

; 90   : #endif
; 91   :     MrMultiply(F, G, out+ZOFF);

	jmp	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
$LN6@PtEAdd:
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN95@PtEAdd
	npad	5
$LL4@PtEAdd:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN95@PtEAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL4@PtEAdd
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL12@PtEAdd:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN95@PtEAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL12@PtEAdd
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL4@PtEAdd
$LN19@PtEAdd:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN96@PtEAdd
	npad	10
$LL17@PtEAdd:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN96@PtEAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL17@PtEAdd
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL25@PtEAdd:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN96@PtEAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL25@PtEAdd
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL17@PtEAdd
$LN32@PtEAdd:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN97@PtEAdd
	npad	10
$LL30@PtEAdd:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN97@PtEAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL30@PtEAdd
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL38@PtEAdd:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN97@PtEAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL38@PtEAdd
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL30@PtEAdd
$LN45@PtEAdd:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN98@PtEAdd
	npad	10
$LL43@PtEAdd:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN98@PtEAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL43@PtEAdd
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL51@PtEAdd:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN98@PtEAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL51@PtEAdd
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL43@PtEAdd
?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ENDP	; cat::BigTwistedEdwards::PtEAdd
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc
_TEXT	SEGMENT
this$ = 48
in_a$ = 56
in_b$ = 64
out$ = 72
?PtAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z PROC	; cat::BigTwistedEdwards::PtAdd

; 60   : {

$LN100:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	r15
	sub	rsp, 32					; 00000020H

; 61   :     // A = (Y1 - X1) * (Y2 - X2)
; 62   :     MrSubtract(in_a+YOFF, in_a+XOFF, C);

	movsxd	rax, DWORD PTR [rcx+48]
	mov	r14, rdx
	mov	r15, r9
	mov	r9, QWORD PTR [rcx+88]
	mov	rsi, r8
	lea	rdx, QWORD PTR [rdx+rax*8]
	mov	r8, r14
	mov	rbx, rcx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract

; 63   :     MrSubtract(in_b+YOFF, in_b+XOFF, D);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r9, QWORD PTR [rbx+96]
	lea	rdx, QWORD PTR [rsi+rax*8]
	mov	r8, rsi
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 66   :     MrAdd(in_a+YOFF, in_a+XOFF, G);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	rdi, QWORD PTR [rbx+120]
	lea	rdx, QWORD PTR [r14+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r8, r14
	mov	r9, rdi
	jne	$LN6@PtAdd
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN95@PtAdd:

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 67   :     MrAdd(in_b+YOFF, in_b+XOFF, H);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	rdi, QWORD PTR [rbx+128]
	lea	rdx, QWORD PTR [rsi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	mov	r8, rsi
	jne	$LN19@PtAdd
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN96@PtAdd:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 68   : 	MrMultiply(C, D, A);

	mov	r9, QWORD PTR [rbx+72]
	mov	r8, QWORD PTR [rbx+96]
	mov	rdx, QWORD PTR [rbx+88]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 69   : 
; 70   :     // C = 2 * d * T1 * T2 (can remove multiplication by d if inputs are known to be different)
; 71   :     MrMultiply(in_a+TOFF, in_b+TOFF, C);

	movsxd	rax, DWORD PTR [rbx+52]
	mov	r9, QWORD PTR [rbx+88]
	lea	r8, QWORD PTR [rsi+rax*8]
	lea	rdx, QWORD PTR [r14+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 72   : 	MrMultiply(G, H, B);

	mov	r9, QWORD PTR [rbx+80]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+120]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 73   : 	MrMultiplyX(C, curve_d * 2, C);

	mov	rdx, QWORD PTR [rbx+88]
	mov	r8, QWORD PTR [rbx+160]
	add	r8, r8
	mov	r9, rdx
	mov	rcx, rbx
	call	?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z ; cat::BigPseudoMersenne::MrMultiplyX

; 74   : 
; 75   :     // D = 2 * Z1 * Z2
; 76   :     MrMultiply(in_a+ZOFF, in_b+ZOFF, D);

	movsxd	rax, DWORD PTR [rbx+56]
	mov	r9, QWORD PTR [rbx+96]
	lea	r8, QWORD PTR [rsi+rax*8]
	lea	rdx, QWORD PTR [r14+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 77   : 
; 78   :     // E = B - A, F = D - C, G = D + C, H = B + A
; 79   :     MrSubtract(B, A, E);

	mov	r9, QWORD PTR [rbx+104]
	mov	r8, QWORD PTR [rbx+72]
	mov	rdx, QWORD PTR [rbx+80]
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract

; 80   : 	MrDouble(D, D);

	mov	r8, QWORD PTR [rbx+96]
	mov	rcx, rbx
	mov	rdx, r8
	call	?MrDouble@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrDouble
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 81   :     MrAdd(B, A, H);

	mov	rdi, QWORD PTR [rbx+128]
	mov	r8, QWORD PTR [rbx+72]
	mov	rdx, QWORD PTR [rbx+80]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	jne	$LN32@PtAdd
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN97@PtAdd:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 82   : 	MrSubtract(D, C, F);

	mov	r9, QWORD PTR [rbx+112]
	mov	r8, QWORD PTR [rbx+88]
	mov	rdx, QWORD PTR [rbx+96]
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 83   : 	MrAdd(D, C, G);

	mov	rdi, QWORD PTR [rbx+120]
	mov	r8, QWORD PTR [rbx+88]
	mov	rdx, QWORD PTR [rbx+96]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	jne	$LN45@PtAdd
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN98@PtAdd:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptadd.inc

; 86   :     MrMultiply(E, F, out+XOFF);

	mov	r8, QWORD PTR [rbx+112]
	mov	rdx, QWORD PTR [rbx+104]
	mov	r9, r15
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 87   :     MrMultiply(G, H, out+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+120]
	lea	r9, QWORD PTR [r15+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 88   : #if defined(EXTENDED_T)
; 89   :     MrMultiply(E, H, out+TOFF);
; 90   : #endif
; 91   :     MrMultiply(F, G, out+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
	mov	r8, QWORD PTR [rbx+120]
	mov	rdx, QWORD PTR [rbx+112]
	lea	r9, QWORD PTR [r15+rax*8]
	mov	rcx, rbx

; 92   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15

; 88   : #if defined(EXTENDED_T)
; 89   :     MrMultiply(E, H, out+TOFF);
; 90   : #endif
; 91   :     MrMultiply(F, G, out+ZOFF);

	jmp	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
$LN6@PtAdd:
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN95@PtAdd
$LL4@PtAdd:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN95@PtAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL4@PtAdd
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL12@PtAdd:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN95@PtAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL12@PtAdd
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL4@PtAdd
$LN19@PtAdd:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN96@PtAdd
	npad	10
$LL17@PtAdd:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN96@PtAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL17@PtAdd
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL25@PtAdd:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN96@PtAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL25@PtAdd
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL17@PtAdd
$LN32@PtAdd:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN97@PtAdd
	npad	10
$LL30@PtAdd:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN97@PtAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL30@PtAdd
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL38@PtAdd:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN97@PtAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL38@PtAdd
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL30@PtAdd
$LN45@PtAdd:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN98@PtAdd
	npad	10
$LL43@PtAdd:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN98@PtAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL43@PtAdd
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL51@PtAdd:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN98@PtAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL51@PtAdd
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL43@PtAdd
?PtAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ENDP	; cat::BigTwistedEdwards::PtAdd
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
_TEXT	SEGMENT
this$ = 48
in$ = 56
out$ = 64
?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z PROC	; cat::BigTwistedEdwards::PtNegate

; 34   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r8
	mov	rdi, rdx
	mov	rbx, rcx

; 35   :     // -(X : Y : T : Z) = (-X : Y : -T : Z)
; 36   :     MrNegate(in+XOFF, out+XOFF);

	call	?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrNegate

; 37   :     Copy(in+YOFF, out+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 37   :     Copy(in+YOFF, out+YOFF);

	lea	rdx, QWORD PTR [rdi+rax*8]
	lea	rcx, QWORD PTR [rsi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 38   :     MrNegate(in+TOFF, out+TOFF);

	movsxd	rax, DWORD PTR [rbx+52]
	mov	rcx, rbx
	lea	r8, QWORD PTR [rsi+rax*8]
	lea	rdx, QWORD PTR [rdi+rax*8]
	call	?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrNegate

; 39   :     Copy(in+ZOFF, out+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 39   :     Copy(in+ZOFF, out+ZOFF);

	lea	rdx, QWORD PTR [rdi+rax*8]
	lea	rcx, QWORD PTR [rsi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 40   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	jmp	memcpy
?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ENDP	; cat::BigTwistedEdwards::PtNegate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
_TEXT	SEGMENT
this$ = 48
in$ = 56
out$ = 64
?PtEDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z PROC ; cat::BigTwistedEdwards::PtEDouble

; 87   : {

$LN76:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rcx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc

; 91   :     MrAdd(in+XOFF, in+YOFF, E);

	movsxd	rax, DWORD PTR [rcx+48]
	mov	rdi, QWORD PTR [rcx+104]
	mov	r14, r8
	mov	rsi, rdx
	mov	rbx, rcx
	lea	r8, QWORD PTR [rdx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	jne	$LN6@PtEDouble
	mov	rcx, QWORD PTR [rcx+40]
	call	bpm_add_4
$LN72@PtEDouble:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc

; 96   :     MrSquare(in+XOFF, A);

	mov	r8, QWORD PTR [rbx+72]
	mov	rdx, rsi
	mov	rcx, rbx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 97   :     MrSquare(in+YOFF, B);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r8, QWORD PTR [rbx+80]
	lea	rdx, QWORD PTR [rsi+rax*8]
	mov	rcx, rbx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 98   :     MrSquare(in+ZOFF, C);

	movsxd	rax, DWORD PTR [rbx+56]
	mov	r8, QWORD PTR [rbx+88]
	lea	rdx, QWORD PTR [rsi+rax*8]
	mov	rcx, rbx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 99   : 	MrSquare(E, E); // Keep MrSquare() in cache

	mov	rdx, QWORD PTR [rbx+104]
	mov	rcx, rbx
	mov	r8, rdx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 100  : 
; 101  : 	CAT_CYCLE_COUNT(u32 t2 = Clock::cycles());
; 102  : 
; 103  : 	CAT_CYCLE_COUNT(u32 t2a = Clock::cycles());
; 104  : 
; 105  : 	// G = -A + B, F = G - C, H = -A - B
; 106  :     MrNegate(A, A);

	mov	rdx, QWORD PTR [rbx+72]
	mov	rcx, rbx
	mov	r8, rdx
	call	?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrNegate

; 107  : 
; 108  : 	MrDouble(C, C);

	mov	r8, QWORD PTR [rbx+88]
	mov	rcx, rbx
	mov	rdx, r8
	call	?MrDouble@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrDouble

; 109  : 
; 110  : 	CAT_CYCLE_COUNT(u32 t2b = Clock::cycles());
; 111  : 
; 112  :     MrSubtract(A, B, H);

	mov	r9, QWORD PTR [rbx+128]
	mov	r8, QWORD PTR [rbx+80]
	mov	rdx, QWORD PTR [rbx+72]
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc

; 116  : 	MrAdd(A, B, G);

	mov	rdi, QWORD PTR [rbx+120]
	mov	r8, QWORD PTR [rbx+80]
	mov	rdx, QWORD PTR [rbx+72]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	jne	$LN19@PtEDouble
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN73@PtEDouble:

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc

; 120  : 	MrAdd(E, H, E);

	mov	rdi, QWORD PTR [rbx+104]
	mov	r8, QWORD PTR [rbx+128]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	mov	rdx, rdi
	jne	$LN32@PtEDouble
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN74@PtEDouble:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc

; 124  : 	MrSubtract(G, C, F);

	mov	r9, QWORD PTR [rbx+112]
	mov	r8, QWORD PTR [rbx+88]
	mov	rdx, QWORD PTR [rbx+120]
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract

; 125  : 
; 126  : 	CAT_CYCLE_COUNT(u32 t3 = Clock::cycles());
; 127  : 
; 128  :     // X3 = E * F, Y3 = G * H, T3 = E * H, Z3 = F * G
; 129  :     MrMultiply(G, H, out+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+120]
	lea	r9, QWORD PTR [r14+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 130  : #if defined(EXTENDED_T)
; 131  :     MrMultiply(E, H, out+TOFF);

	movsxd	rax, DWORD PTR [rbx+52]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+104]
	lea	r9, QWORD PTR [r14+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 132  : #endif
; 133  : 	MrMultiply(E, F, out+XOFF);

	mov	r8, QWORD PTR [rbx+112]
	mov	rdx, QWORD PTR [rbx+104]
	mov	r9, r14
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 134  :     MrMultiply(F, G, out+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
	mov	r8, QWORD PTR [rbx+120]
	mov	rdx, QWORD PTR [rbx+112]
	lea	r9, QWORD PTR [r14+rax*8]
	mov	rcx, rbx

; 167  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14

; 134  :     MrMultiply(F, G, out+ZOFF);

	jmp	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
$LN6@PtEDouble:
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 51   :     if (Add(in_a, in_b, out))

	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN72@PtEDouble
	npad	8
$LL4@PtEDouble:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN72@PtEDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL4@PtEDouble
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL12@PtEDouble:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN72@PtEDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL12@PtEDouble
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL4@PtEDouble
$LN19@PtEDouble:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN73@PtEDouble
	npad	10
$LL17@PtEDouble:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN73@PtEDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL17@PtEDouble
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL25@PtEDouble:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN73@PtEDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL25@PtEDouble
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL17@PtEDouble
$LN32@PtEDouble:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN74@PtEDouble
	npad	10
$LL30@PtEDouble:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN74@PtEDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL30@PtEDouble
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL38@PtEDouble:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN74@PtEDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL38@PtEDouble
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL30@PtEDouble
?PtEDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ENDP ; cat::BigTwistedEdwards::PtEDouble
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc
_TEXT	SEGMENT
this$ = 48
in$ = 56
out$ = 64
?PtDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z PROC	; cat::BigTwistedEdwards::PtDouble

; 87   : {

$LN76:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rcx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc

; 91   :     MrAdd(in+XOFF, in+YOFF, E);

	movsxd	rax, DWORD PTR [rcx+48]
	mov	rdi, QWORD PTR [rcx+104]
	mov	r14, r8
	mov	rsi, rdx
	mov	rbx, rcx
	lea	r8, QWORD PTR [rdx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	jne	$LN6@PtDouble
	mov	rcx, QWORD PTR [rcx+40]
	call	bpm_add_4
$LN72@PtDouble:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc

; 96   :     MrSquare(in+XOFF, A);

	mov	r8, QWORD PTR [rbx+72]
	mov	rdx, rsi
	mov	rcx, rbx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 97   :     MrSquare(in+YOFF, B);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r8, QWORD PTR [rbx+80]
	lea	rdx, QWORD PTR [rsi+rax*8]
	mov	rcx, rbx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 98   :     MrSquare(in+ZOFF, C);

	movsxd	rax, DWORD PTR [rbx+56]
	mov	r8, QWORD PTR [rbx+88]
	lea	rdx, QWORD PTR [rsi+rax*8]
	mov	rcx, rbx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 99   : 	MrSquare(E, E); // Keep MrSquare() in cache

	mov	rdx, QWORD PTR [rbx+104]
	mov	rcx, rbx
	mov	r8, rdx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 100  : 
; 101  : 	CAT_CYCLE_COUNT(u32 t2 = Clock::cycles());
; 102  : 
; 103  : 	CAT_CYCLE_COUNT(u32 t2a = Clock::cycles());
; 104  : 
; 105  : 	// G = -A + B, F = G - C, H = -A - B
; 106  :     MrNegate(A, A);

	mov	rdx, QWORD PTR [rbx+72]
	mov	rcx, rbx
	mov	r8, rdx
	call	?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrNegate

; 107  : 
; 108  : 	MrDouble(C, C);

	mov	r8, QWORD PTR [rbx+88]
	mov	rcx, rbx
	mov	rdx, r8
	call	?MrDouble@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrDouble

; 109  : 
; 110  : 	CAT_CYCLE_COUNT(u32 t2b = Clock::cycles());
; 111  : 
; 112  :     MrSubtract(A, B, H);

	mov	r9, QWORD PTR [rbx+128]
	mov	r8, QWORD PTR [rbx+80]
	mov	rdx, QWORD PTR [rbx+72]
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc

; 116  : 	MrAdd(A, B, G);

	mov	rdi, QWORD PTR [rbx+120]
	mov	r8, QWORD PTR [rbx+80]
	mov	rdx, QWORD PTR [rbx+72]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	jne	$LN19@PtDouble
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN73@PtDouble:

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc

; 120  : 	MrAdd(E, H, E);

	mov	rdi, QWORD PTR [rbx+104]
	mov	r8, QWORD PTR [rbx+128]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	mov	rdx, rdi
	jne	$LN32@PtDouble
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN74@PtDouble:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdouble.inc

; 124  : 	MrSubtract(G, C, F);

	mov	r9, QWORD PTR [rbx+112]
	mov	r8, QWORD PTR [rbx+88]
	mov	rdx, QWORD PTR [rbx+120]
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract

; 125  : 
; 126  : 	CAT_CYCLE_COUNT(u32 t3 = Clock::cycles());
; 127  : 
; 128  :     // X3 = E * F, Y3 = G * H, T3 = E * H, Z3 = F * G
; 129  :     MrMultiply(G, H, out+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+120]
	lea	r9, QWORD PTR [r14+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 130  : #if defined(EXTENDED_T)
; 131  :     MrMultiply(E, H, out+TOFF);
; 132  : #endif
; 133  : 	MrMultiply(E, F, out+XOFF);

	mov	r8, QWORD PTR [rbx+112]
	mov	rdx, QWORD PTR [rbx+104]
	mov	r9, r14
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 134  :     MrMultiply(F, G, out+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
	mov	r8, QWORD PTR [rbx+120]
	mov	rdx, QWORD PTR [rbx+112]
	lea	r9, QWORD PTR [r14+rax*8]
	mov	rcx, rbx

; 167  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14

; 134  :     MrMultiply(F, G, out+ZOFF);

	jmp	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
$LN6@PtDouble:
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 51   :     if (Add(in_a, in_b, out))

	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN72@PtDouble
	npad	3
$LL4@PtDouble:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN72@PtDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL4@PtDouble
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL12@PtDouble:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN72@PtDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL12@PtDouble
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL4@PtDouble
$LN19@PtDouble:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN73@PtDouble
	npad	10
$LL17@PtDouble:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN73@PtDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL17@PtDouble
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL25@PtDouble:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN73@PtDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL25@PtDouble
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL17@PtDouble
$LN32@PtDouble:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN74@PtDouble
	npad	10
$LL30@PtDouble:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN74@PtDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL30@PtDouble
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL38@PtDouble:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN74@PtDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL38@PtDouble
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL30@PtDouble
?PtDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ENDP	; cat::BigTwistedEdwards::PtDouble
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc
_TEXT	SEGMENT
this$ = 48
in$ = 56
out$ = 64
?PtDoubleZ1@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z PROC ; cat::BigTwistedEdwards::PtDoubleZ1

; 44   : {

$LN78:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	r14, r8

; 45   :     // A = X1^2, B = Y1^2, C = 2 * Z1^2 = 2
; 46   :     MrSquare(in+XOFF, A);

	mov	r8, QWORD PTR [rcx+72]
	mov	rsi, rdx
	mov	rbx, rcx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 47   :     MrSquare(in+YOFF, B);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r8, QWORD PTR [rbx+80]
	lea	rdx, QWORD PTR [rsi+rax*8]
	mov	rcx, rbx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 48   :     //MrSquare(in+ZOFF, C);
; 49   :     //MrDouble(C, C);
; 50   : 
; 51   :     // G = -A + B, F = G - C = G - 2, H = -A - B
; 52   :     MrNegate(A, A);

	mov	rdx, QWORD PTR [rbx+72]
	mov	rcx, rbx
	mov	r8, rdx
	call	?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrNegate
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc

; 53   :     MrAdd(A, B, G);

	mov	rdi, QWORD PTR [rbx+120]
	mov	r8, QWORD PTR [rbx+80]
	mov	rdx, QWORD PTR [rbx+72]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	jne	$LN6@PtDoubleZ1
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN74@PtDoubleZ1:
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
	mov	rdx, QWORD PTR [rbx+120]
	mov	rcx, QWORD PTR [rbx+112]
	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc

; 56   :     MrSubtractX(F, 2); // C = 2

	mov	rdx, QWORD PTR [rbx+112]
	mov	rcx, rbx
	call	?MrSubtractX@BigPseudoMersenne@cat@@QEAAXPEA_K_K@Z ; cat::BigPseudoMersenne::MrSubtractX

; 57   :     MrSubtract(A, B, H);

	mov	r9, QWORD PTR [rbx+128]
	mov	r8, QWORD PTR [rbx+80]
	mov	rdx, QWORD PTR [rbx+72]
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc

; 60   :     MrAdd(in+XOFF, in+YOFF, E);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	rdi, QWORD PTR [rbx+104]
	lea	r8, QWORD PTR [rsi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	rdx, rsi
	mov	r9, rdi
	jne	$LN21@PtDoubleZ1
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN75@PtDoubleZ1:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc

; 61   :     MrSquare(E, E);

	mov	rdx, QWORD PTR [rbx+104]
	mov	rcx, rbx
	mov	r8, rdx
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc

; 62   :     MrAdd(E, H, E);

	mov	rdi, QWORD PTR [rbx+104]
	mov	r8, QWORD PTR [rbx+128]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	mov	rdx, rdi
	jne	$LN34@PtDoubleZ1
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN76@PtDoubleZ1:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptdoublez1.inc

; 65   :     MrMultiply(E, F, out+XOFF);

	mov	r8, QWORD PTR [rbx+112]
	mov	rdx, QWORD PTR [rbx+104]
	mov	r9, r14
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 66   :     MrMultiply(G, H, out+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+120]
	lea	r9, QWORD PTR [r14+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 67   : #if defined(EXTENDED_T)
; 68   :     MrMultiply(E, H, out+TOFF);
; 69   : #endif
; 70   :     MrMultiply(F, G, out+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
	mov	r8, QWORD PTR [rbx+120]
	mov	rdx, QWORD PTR [rbx+112]
	lea	r9, QWORD PTR [r14+rax*8]
	mov	rcx, rbx

; 71   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14

; 67   : #if defined(EXTENDED_T)
; 68   :     MrMultiply(E, H, out+TOFF);
; 69   : #endif
; 70   :     MrMultiply(F, G, out+ZOFF);

	jmp	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
$LN6@PtDoubleZ1:
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN74@PtDoubleZ1
	npad	9
$LL4@PtDoubleZ1:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN74@PtDoubleZ1

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL4@PtDoubleZ1
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL12@PtDoubleZ1:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN74@PtDoubleZ1

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL12@PtDoubleZ1
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL4@PtDoubleZ1
$LN21@PtDoubleZ1:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN75@PtDoubleZ1
	npad	10
$LL19@PtDoubleZ1:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN75@PtDoubleZ1

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL19@PtDoubleZ1
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL27@PtDoubleZ1:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN75@PtDoubleZ1

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL27@PtDoubleZ1
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL19@PtDoubleZ1
$LN34@PtDoubleZ1:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN76@PtDoubleZ1
	npad	10
$LL32@PtDoubleZ1:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN76@PtDoubleZ1

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL32@PtDoubleZ1
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL40@PtDoubleZ1:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN76@PtDoubleZ1

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL40@PtDoubleZ1
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL32@PtDoubleZ1
?PtDoubleZ1@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ENDP ; cat::BigTwistedEdwards::PtDoubleZ1
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc
; File c:\users\jakez\desktop\libcatid-master\include\cat\mem\iallocator.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc
; File c:\users\jakez\desktop\libcatid-master\include\cat\mem\iallocator.hpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc
_TEXT	SEGMENT
this$ = 48
w$ = 56
?PtMultiplyPrecompAlloc@BigTwistedEdwards@cat@@QEAAPEA_KH@Z PROC ; cat::BigTwistedEdwards::PtMultiplyPrecompAlloc

; 36   : {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rax, rcx

; 37   :     int points = 1 + (1 << (w - 1));

	lea	ecx, DWORD PTR [rdx-1]
	mov	ebx, 1
	shl	ebx, cl
	inc	ebx

; 38   : 
; 39   : 	Leg *out = AlignedAllocator::ref()->AcquireArray<Leg>(points * POINT_STRIDE);

	imul	ebx, DWORD PTR [rax+60]
	call	?ref@?$Singleton@VAlignedAllocator@cat@@@cat@@SAPEAVAlignedAllocator@2@XZ ; cat::Singleton<cat::AlignedAllocator>::ref
; File c:\users\jakez\desktop\libcatid-master\include\cat\mem\iallocator.hpp

; 124  : 		return reinterpret_cast<T*>( Acquire(sizeof(T) * elements) );

	lea	edx, DWORD PTR [rbx*8]
	mov	r8, QWORD PTR [rax]
	mov	rcx, rax
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc

; 42   : }

	add	rsp, 32					; 00000020H
	pop	rbx
; File c:\users\jakez\desktop\libcatid-master\include\cat\mem\iallocator.hpp

; 124  : 		return reinterpret_cast<T*>( Acquire(sizeof(T) * elements) );

	rex_jmp	QWORD PTR [r8+16]
?PtMultiplyPrecompAlloc@BigTwistedEdwards@cat@@QEAAPEA_KH@Z ENDP ; cat::BigTwistedEdwards::PtMultiplyPrecompAlloc
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc
_TEXT	SEGMENT
P1$1$ = 48
tv993 = 144
this$ = 144
tv983 = 152
in_reg$ = 152
neg_offset$1$ = 160
w$ = 160
pre_2$1$ = 168
out_reg$ = 168
?PtMultiplyPrecomp@BigTwistedEdwards@cat@@QEAAXPEB_KHPEA_K@Z PROC ; cat::BigTwistedEdwards::PtMultiplyPrecomp

; 46   : {

$LN152:
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 72					; 00000048H

; 47   :     int neg_offset = POINT_STRIDE << (w - 2);

	lea	eax, DWORD PTR [r8-2]
	mov	rbx, rcx
	mov	ebp, r8d
	mov	r15d, DWORD PTR [rbx+60]
	mov	ecx, eax
	mov	DWORD PTR tv993[rsp], eax
	shl	r15d, cl
	mov	rsi, rdx
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 76   :     out_reg[0] = in_reg;

	xor	r12d, r12d
	mov	QWORD PTR [r9], r12

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rbx+4]
	lea	rcx, QWORD PTR [r9+8]
	dec	eax
	xor	edx, edx
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc

; 46   : {

	mov	rdi, r9
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	movsxd	r8, eax
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc

; 47   :     int neg_offset = POINT_STRIDE << (w - 2);

	mov	DWORD PTR neg_offset$1$[rsp], r15d
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	shl	r8, 3
	call	memset
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 80   : 	CopyX(1, inout+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 76   :     out_reg[0] = in_reg;

	mov	r14d, 1
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 80   : 	CopyX(1, inout+YOFF);

	lea	rcx, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	xor	edx, edx
	mov	QWORD PTR [rcx], r14
	mov	eax, DWORD PTR [rbx+4]
	add	rcx, 8
	dec	eax
	movsxd	r8, eax
	shl	r8, 3
	call	memset
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 81   : 	CopyX(0, inout+TOFF);

	movsxd	rax, DWORD PTR [rbx+52]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 76   :     out_reg[0] = in_reg;

	mov	QWORD PTR [rdi+rax*8], r12
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 81   : 	CopyX(0, inout+TOFF);

	lea	rcx, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rbx+4]
	xor	edx, edx
	dec	eax
	add	rcx, 8
	movsxd	r8, eax
	shl	r8, 3
	call	memset
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 82   : 	CopyX(1, inout+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 76   :     out_reg[0] = in_reg;

	mov	QWORD PTR [rdi+rax*8], r14
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 82   : 	CopyX(1, inout+ZOFF);

	lea	rcx, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rbx+4]
	xor	edx, edx
	dec	eax
	add	rcx, 8
	movsxd	r8, eax
	shl	r8, 3
	call	memset
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc

; 51   : 	out_reg += POINT_STRIDE;

	movsxd	rax, DWORD PTR [rbx+60]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc

; 51   : 	out_reg += POINT_STRIDE;

	lea	rdi, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	mov	rdx, rsi
	mov	rcx, rdi
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc

; 51   : 	out_reg += POINT_STRIDE;

	mov	QWORD PTR P1$1$[rsp], rdi
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 90   : 	Copy(in+YOFF, out+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 90   : 	Copy(in+YOFF, out+YOFF);

	lea	rdx, QWORD PTR [rsi+rax*8]
	lea	rcx, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 91   : 	Copy(in+TOFF, out+TOFF);

	movsxd	rax, DWORD PTR [rbx+52]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 91   : 	Copy(in+TOFF, out+TOFF);

	lea	rdx, QWORD PTR [rsi+rax*8]
	lea	rcx, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 92   : 	Copy(in+ZOFF, out+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 92   : 	Copy(in+ZOFF, out+ZOFF);

	lea	rdx, QWORD PTR [rsi+rax*8]
	lea	rcx, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc

; 56   :     PtNegate(in_reg, pre_a+neg_offset);

	movsxd	rax, r15d
	mov	rdx, rsi
	lea	r15, QWORD PTR [rax*8]
	mov	QWORD PTR tv983[rsp], r15
	lea	r8, QWORD PTR [r15+rdi]
	mov	rcx, rbx
	call	?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtNegate

; 57   : 
; 58   :     Leg *P1 = pre_a;
; 59   : 
; 60   :     // Precompute 2P
; 61   :     Leg *pre_2 = TempPt;

	mov	r12, QWORD PTR [rbx+152]

; 62   :     PtEDouble(in_reg, pre_2);

	mov	rdx, rsi
	mov	r8, r12
	mov	rcx, rbx
	mov	QWORD PTR pre_2$1$[rsp], r12
	call	?PtEDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtEDouble

; 63   : 
; 64   :     // Precompute 3P and -3P
; 65   :     Leg *pre_b = pre_a+POINT_STRIDE;

	movsxd	rax, DWORD PTR [rbx+60]

; 66   :     PtEAdd(pre_a, pre_2, pre_b);

	mov	r8, r12
	lea	r13, QWORD PTR [rdi+rax*8]
	mov	rdx, rdi
	mov	rcx, rbx
	mov	r9, r13
	call	?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtEAdd

; 67   :     PtNegate(pre_b, pre_b+neg_offset);

	lea	r8, QWORD PTR [r15+r13]
	mov	rdx, r13
	mov	rcx, rbx
	call	?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtNegate

; 68   : 
; 69   :     Leg *P3 = pre_b;
; 70   : 
; 71   :     if (w == 6)

	cmp	ebp, 6
	jne	$LN5@PtMultiply

; 72   :     {
; 73   :         // More efficient than naive approach by 6M 5D 20a at the cost of 4S
; 74   :         // Inspired by Longa-Gebotys 2008, but it is original
; 75   : 
; 76   :         // Precompute 5P and -5P
; 77   :         pre_a = pre_b+POINT_STRIDE;

	movsxd	rax, DWORD PTR [rbx+60]

; 78   :         PtEAdd(pre_b, pre_2, pre_a);

	mov	r8, r12
	mov	rdx, r13
	lea	r15, QWORD PTR [rax*8]
	mov	rcx, rbx
	add	r15, r13
	mov	r9, r15
	call	?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtEAdd

; 79   :         PtNegate(pre_a, pre_a+neg_offset);

	mov	rsi, QWORD PTR tv983[rsp]
	mov	rdx, r15
	lea	r8, QWORD PTR [rsi+r15]
	mov	rcx, rbx
	call	?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtNegate

; 80   : 
; 81   :         Leg *P5 = pre_a;
; 82   : 
; 83   :         // Precompute 7P and -7P
; 84   :         pre_b = pre_a+POINT_STRIDE;

	movsxd	rax, DWORD PTR [rbx+60]

; 85   :         PtEAdd(pre_a, pre_2, pre_b);

	mov	rbp, QWORD PTR pre_2$1$[rsp]
	lea	r12, QWORD PTR [r15+rax*8]
	mov	r8, rbp
	mov	rdx, r15
	mov	r9, r12
	mov	rcx, rbx
	call	?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtEAdd

; 86   :         PtNegate(pre_b, pre_b+neg_offset);

	lea	r8, QWORD PTR [rsi+r12]
	mov	rdx, r12
	mov	rcx, rbx
	call	?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtNegate

; 87   : 
; 88   :         Leg *P7 = pre_b;
; 89   : 
; 90   :         // Precompute 9P and -9P
; 91   :         pre_a = pre_b+POINT_STRIDE;

	movsxd	rax, DWORD PTR [rbx+60]

; 92   :         PtEAdd(pre_b, pre_2, pre_a);

	mov	r8, rbp
	lea	r14, QWORD PTR [r12+rax*8]
	mov	rdx, r12
	mov	rcx, rbx
	mov	r9, r14
	call	?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtEAdd

; 93   :         PtNegate(pre_a, pre_a+neg_offset);

	lea	r8, QWORD PTR [rsi+r14]
	mov	rdx, r14
	mov	rcx, rbx
	call	?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtNegate

; 94   : 
; 95   :         Leg *P9 = pre_a;
; 96   : 
; 97   :         // Precompute 11P and -11P
; 98   :         pre_b = pre_a+POINT_STRIDE;

	movsxd	rax, DWORD PTR [rbx+60]

; 99   :         PtEAdd(pre_a, pre_2, pre_b);

	mov	r8, rbp
	lea	rdi, QWORD PTR [r14+rax*8]
	mov	rdx, r14
	mov	rcx, rbx
	mov	r9, rdi
	call	?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtEAdd

; 100  :         PtNegate(pre_b, pre_b+neg_offset);

	lea	r8, QWORD PTR [rsi+rdi]
	mov	rdx, rdi
	mov	rcx, rbx
	call	?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtNegate

; 101  : 
; 102  :         // Precompute 22P
; 103  :         PtEDouble(pre_b, pre_2);

	mov	r8, rbp
	mov	rdx, rdi
	mov	rcx, rbx
	call	?PtEDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtEDouble

; 104  : 
; 105  :         pre_b += POINT_STRIDE*5;

	movsxd	rdx, DWORD PTR [rbx+60]

; 106  :         pre_a = pre_b + POINT_STRIDE;
; 107  : 
; 108  :         PtPrecompAddSub(pre_2, P1, pre_a, pre_b, neg_offset);

	mov	r8, QWORD PTR P1$1$[rsp]
	lea	eax, DWORD PTR [rdx+rdx*4]
	movsxd	rcx, eax
	mov	eax, DWORD PTR neg_offset$1$[rsp]
	lea	rsi, QWORD PTR [rdi+rcx*8]
	mov	DWORD PTR [rsp+40], eax
	mov	rcx, rbx
	lea	rdi, QWORD PTR [rsi+rdx*8]
	mov	rdx, rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	r9, rdi
	call	?PtPrecompAddSub@BigTwistedEdwards@cat@@IEAAXPEB_K0PEA_K1H@Z ; cat::BigTwistedEdwards::PtPrecompAddSub

; 109  :         pre_b -= POINT_STRIDE;

	movsxd	rax, DWORD PTR [rbx+60]

; 110  :         pre_a += POINT_STRIDE;
; 111  :         PtPrecompAddSub(pre_2, P3, pre_a, pre_b, neg_offset);

	mov	r8, r13
	shl	rax, 3
	mov	rdx, rbp
	mov	rcx, rbx
	sub	rsi, rax
	add	rdi, rax
	mov	eax, DWORD PTR neg_offset$1$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	r9, rdi
	mov	QWORD PTR [rsp+32], rsi
	call	?PtPrecompAddSub@BigTwistedEdwards@cat@@IEAAXPEB_K0PEA_K1H@Z ; cat::BigTwistedEdwards::PtPrecompAddSub

; 112  :         pre_b -= POINT_STRIDE;

	movsxd	rax, DWORD PTR [rbx+60]

; 113  :         pre_a += POINT_STRIDE;
; 114  :         PtPrecompAddSub(pre_2, P5, pre_a, pre_b, neg_offset);

	mov	r13d, DWORD PTR neg_offset$1$[rsp]
	shl	rax, 3
	sub	rsi, rax
	add	rdi, rax
	mov	r9, rdi
	mov	r8, r15
	mov	rdx, rbp
	mov	rcx, rbx
	mov	DWORD PTR [rsp+40], r13d
	mov	QWORD PTR [rsp+32], rsi
	call	?PtPrecompAddSub@BigTwistedEdwards@cat@@IEAAXPEB_K0PEA_K1H@Z ; cat::BigTwistedEdwards::PtPrecompAddSub

; 115  :         pre_b -= POINT_STRIDE;

	movsxd	rax, DWORD PTR [rbx+60]

; 116  :         pre_a += POINT_STRIDE;
; 117  :         PtPrecompAddSub(pre_2, P7, pre_a, pre_b, neg_offset);

	mov	r8, r12
	shl	rax, 3
	mov	rdx, rbp
	mov	rcx, rbx
	add	rdi, rax
	sub	rsi, rax
	mov	DWORD PTR [rsp+40], r13d
	mov	r9, rdi
	mov	QWORD PTR [rsp+32], rsi
	call	?PtPrecompAddSub@BigTwistedEdwards@cat@@IEAAXPEB_K0PEA_K1H@Z ; cat::BigTwistedEdwards::PtPrecompAddSub

; 118  :         pre_b -= POINT_STRIDE;

	movsxd	rax, DWORD PTR [rbx+60]

; 119  :         pre_a += POINT_STRIDE;
; 120  :         PtPrecompAddSub(pre_2, P9, pre_a, pre_b, neg_offset);

	mov	r8, r14
	lea	rax, QWORD PTR [rax*8]
	mov	rdx, rbp
	mov	rcx, rbx
	sub	rsi, rax
	lea	r9, QWORD PTR [rax+rdi]
	mov	DWORD PTR [rsp+40], r13d
	mov	QWORD PTR [rsp+32], rsi
	call	?PtPrecompAddSub@BigTwistedEdwards@cat@@IEAAXPEB_K0PEA_K1H@Z ; cat::BigTwistedEdwards::PtPrecompAddSub

; 121  :     }
; 122  :     else // General case:

	jmp	$LN1@PtMultiply
$LN5@PtMultiply:

; 123  :     {
; 124  :         // Precompute +/- odd multiples of b by iteratively adding 2b
; 125  :         int pos_point_count = 1 << (w-2);

	mov	ecx, DWORD PTR tv993[rsp]
	shl	r14d, cl

; 126  :         for (int table_index = 2; table_index < pos_point_count; table_index += 2)

	cmp	r14d, 2
	jle	$LN1@PtMultiply

; 123  :     {
; 124  :         // Precompute +/- odd multiples of b by iteratively adding 2b
; 125  :         int pos_point_count = 1 << (w-2);

	lea	ebp, DWORD PTR [r14-3]
	shr	ebp, 1
	inc	ebp
	npad	2
$LL3@PtMultiply:

; 127  :         {
; 128  :             pre_a = pre_b+POINT_STRIDE;

	movsxd	rax, DWORD PTR [rbx+60]

; 129  :             PtEAdd(pre_b, pre_2, pre_a);

	mov	r8, r12
	mov	rdx, r13
	lea	rsi, QWORD PTR [rax*8]
	mov	rcx, rbx
	add	rsi, r13
	mov	r9, rsi
	call	?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtEAdd

; 130  :             PtNegate(pre_a, pre_a+neg_offset);

	lea	rdi, QWORD PTR [r15+rsi]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 36   :     MrNegate(in+XOFF, out+XOFF);

	mov	rdx, rsi
	mov	r8, rdi
	mov	rcx, rbx
	call	?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrNegate

; 37   :     Copy(in+YOFF, out+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 37   :     Copy(in+YOFF, out+YOFF);

	lea	rdx, QWORD PTR [rsi+rax*8]
	lea	rcx, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 38   :     MrNegate(in+TOFF, out+TOFF);

	movsxd	rax, DWORD PTR [rbx+52]
	mov	rcx, rbx
	lea	r8, QWORD PTR [rdi+rax*8]
	lea	rdx, QWORD PTR [rsi+rax*8]
	call	?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrNegate

; 39   :     Copy(in+ZOFF, out+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 39   :     Copy(in+ZOFF, out+ZOFF);

	lea	rdx, QWORD PTR [rsi+rax*8]
	lea	rcx, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc

; 132  :             pre_b = pre_a+POINT_STRIDE;

	movsxd	rax, DWORD PTR [rbx+60]

; 133  :             PtEAdd(pre_a, pre_2, pre_b);

	mov	r8, r12
	lea	r13, QWORD PTR [rsi+rax*8]
	mov	rdx, rsi
	mov	rcx, rbx
	mov	r9, r13
	call	?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtEAdd

; 134  :             PtNegate(pre_b, pre_b+neg_offset);

	lea	rdi, QWORD PTR [r15+r13]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 36   :     MrNegate(in+XOFF, out+XOFF);

	mov	rdx, r13
	mov	r8, rdi
	mov	rcx, rbx
	call	?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrNegate

; 37   :     Copy(in+YOFF, out+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 37   :     Copy(in+YOFF, out+YOFF);

	lea	rdx, QWORD PTR [rax*8]
	lea	rcx, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 37   :     Copy(in+YOFF, out+YOFF);

	add	rdx, r13
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 38   :     MrNegate(in+TOFF, out+TOFF);

	movsxd	rax, DWORD PTR [rbx+52]
	mov	rcx, rbx
	lea	rdx, QWORD PTR [rax*8]
	lea	r8, QWORD PTR [rdi+rax*8]
	add	rdx, r13
	call	?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrNegate

; 39   :     Copy(in+ZOFF, out+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 39   :     Copy(in+ZOFF, out+ZOFF);

	lea	rdx, QWORD PTR [rax*8]
	lea	rcx, QWORD PTR [rdi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\addsub\ptnegate.inc

; 39   :     Copy(in+ZOFF, out+ZOFF);

	add	rdx, r13
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiplyprecomp.inc

; 126  :         for (int table_index = 2; table_index < pos_point_count; table_index += 2)

	dec	rbp
	jne	$LL3@PtMultiply
$LN1@PtMultiply:

; 135  :         }
; 136  :     }
; 137  : }

	add	rsp, 72					; 00000048H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?PtMultiplyPrecomp@BigTwistedEdwards@cat@@QEAAXPEB_KHPEA_K@Z ENDP ; cat::BigTwistedEdwards::PtMultiplyPrecomp
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc
_TEXT	SEGMENT
this$ = 48
in_a$ = 56
in_b$ = 64
sum$ = 72
diff$ = 80
neg_offset$ = 88
?PtPrecompAddSub@BigTwistedEdwards@cat@@IEAAXPEB_K0PEA_K1H@Z PROC ; cat::BigTwistedEdwards::PtPrecompAddSub

; 34   : {

$LN124:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	r15
	sub	rsp, 32					; 00000020H

; 35   :     // A = (Y1 - X1) * (Y2 - X2)
; 36   :     MrSubtract(in_a+YOFF, in_a+XOFF, C);

	movsxd	rax, DWORD PTR [rcx+48]
	mov	r14, rdx
	mov	r15, r9
	mov	r9, QWORD PTR [rcx+88]
	mov	rsi, r8
	lea	rdx, QWORD PTR [rdx+rax*8]
	mov	r8, r14
	mov	rbx, rcx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract

; 37   :     MrSubtract(in_b+YOFF, in_b+XOFF, D);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r9, QWORD PTR [rbx+96]
	lea	rdx, QWORD PTR [rsi+rax*8]
	mov	r8, rsi
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract

; 38   :     MrMultiply(C, D, F);

	mov	r9, QWORD PTR [rbx+112]
	mov	r8, QWORD PTR [rbx+96]
	mov	rdx, QWORD PTR [rbx+88]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc

; 41   :     MrAdd(in_a+YOFF, in_a+XOFF, E);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	rdi, QWORD PTR [rbx+104]
	lea	rdx, QWORD PTR [r14+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r8, r14
	mov	r9, rdi
	jne	$LN6@PtPrecompA
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN118@PtPrecompA:

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc

; 42   :     MrAdd(in_b+YOFF, in_b+XOFF, H);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	rdi, QWORD PTR [rbx+128]
	lea	rdx, QWORD PTR [rsi+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	mov	r8, rsi
	jne	$LN19@PtPrecompA
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN119@PtPrecompA:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc

; 43   :     MrMultiply(E, H, G);

	mov	r9, QWORD PTR [rbx+120]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+104]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 44   : 
; 45   :     // I = (Y1 - X1) * (Y2 + X2)
; 46   :     MrMultiply(C, H, A);

	mov	r9, QWORD PTR [rbx+72]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+88]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 47   : 
; 48   :     // J = (Y1 + X1) * (Y2 - X2)
; 49   :     MrMultiply(E, D, B);

	mov	r9, QWORD PTR [rbx+80]
	mov	r8, QWORD PTR [rbx+96]
	mov	rdx, QWORD PTR [rbx+104]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 50   : 
; 51   :     // C = 2 * d * T1 * T2 (can remove multiplication by d if inputs are known to be different)
; 52   :     MrMultiply(in_a+TOFF, in_b+TOFF, C);

	movsxd	rax, DWORD PTR [rbx+52]
	mov	r9, QWORD PTR [rbx+88]
	lea	r8, QWORD PTR [rsi+rax*8]
	lea	rdx, QWORD PTR [r14+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 53   :     MrMultiplyX(C, curve_d * 2, C);

	mov	rdx, QWORD PTR [rbx+88]
	mov	r8, QWORD PTR [rbx+160]
	add	r8, r8
	mov	r9, rdx
	mov	rcx, rbx
	call	?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z ; cat::BigPseudoMersenne::MrMultiplyX

; 54   : 
; 55   :     // D = 2 * Z1 * Z2
; 56   :     MrMultiply(in_a+ZOFF, in_b+ZOFF, D);

	movsxd	rax, DWORD PTR [rbx+56]
	mov	r9, QWORD PTR [rbx+96]
	lea	r8, QWORD PTR [rsi+rax*8]
	lea	rdx, QWORD PTR [r14+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 57   :     MrDouble(D, D);

	mov	r8, QWORD PTR [rbx+96]
	mov	rcx, rbx
	mov	rdx, r8
	call	?MrDouble@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrDouble

; 58   : 
; 59   :     // E = B - A, F = D - C, G = D + C, H = B + A
; 60   :     MrSubtract(G, F, E);

	mov	r9, QWORD PTR [rbx+104]
	mov	r8, QWORD PTR [rbx+112]
	mov	rdx, QWORD PTR [rbx+120]
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc

; 61   :     MrAdd(G, F, H);

	mov	rdi, QWORD PTR [rbx+128]
	mov	r8, QWORD PTR [rbx+112]
	mov	rdx, QWORD PTR [rbx+120]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	jne	$LN32@PtPrecompA
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN120@PtPrecompA:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc

; 62   :     MrSubtract(D, C, F);

	mov	r9, QWORD PTR [rbx+112]
	mov	r8, QWORD PTR [rbx+88]
	mov	rdx, QWORD PTR [rbx+96]
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc

; 63   :     MrAdd(D, C, G);

	mov	rdi, QWORD PTR [rbx+120]
	mov	r8, QWORD PTR [rbx+88]
	mov	rdx, QWORD PTR [rbx+96]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	jne	$LN45@PtPrecompA
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN121@PtPrecompA:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc

; 66   :     MrMultiply(E, F, sum+XOFF);

	mov	r8, QWORD PTR [rbx+112]
	mov	rdx, QWORD PTR [rbx+104]
	mov	r9, r15
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 67   :     MrMultiply(G, H, sum+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+120]
	lea	r9, QWORD PTR [r15+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 68   :     MrMultiply(E, H, sum+TOFF);

	movsxd	rax, DWORD PTR [rbx+52]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+104]
	lea	r9, QWORD PTR [r15+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 69   :     MrMultiply(F, G, sum+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
	mov	r8, QWORD PTR [rbx+120]
	mov	rdx, QWORD PTR [rbx+112]
	lea	r9, QWORD PTR [r15+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 70   :     PtNegate(sum, sum + neg_offset);

	movsxd	rax, DWORD PTR neg_offset$[rsp]
	mov	rdx, r15
	lea	rsi, QWORD PTR [rax*8]
	mov	rcx, rbx
	lea	r8, QWORD PTR [rsi+r15]
	call	?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtNegate

; 71   : 
; 72   :     // E = J - I, F <-> G, H = J + I
; 73   :     MrSubtract(B, A, E);

	mov	r9, QWORD PTR [rbx+104]
	mov	r8, QWORD PTR [rbx+72]
	mov	rdx, QWORD PTR [rbx+80]
	mov	rcx, rbx
	call	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rbx+4], 4
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc

; 74   :     MrAdd(B, A, H);

	mov	rdi, QWORD PTR [rbx+128]
	mov	r8, QWORD PTR [rbx+72]
	mov	rdx, QWORD PTR [rbx+80]
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	r9, rdi
	jne	$LN58@PtPrecompA
	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_add_4
$LN122@PtPrecompA:
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptprecompaddsub.inc

; 77   :     MrMultiply(E, G, diff+XOFF);

	mov	rdi, QWORD PTR diff$[rsp]
	mov	r8, QWORD PTR [rbx+120]
	mov	rdx, QWORD PTR [rbx+104]
	mov	r9, rdi
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 78   :     MrMultiply(F, H, diff+YOFF);

	movsxd	rax, DWORD PTR [rbx+48]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+112]
	lea	r9, QWORD PTR [rdi+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 79   :     MrMultiply(E, H, diff+TOFF);

	movsxd	rax, DWORD PTR [rbx+52]
	mov	r8, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+104]
	lea	r9, QWORD PTR [rdi+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 80   :     MrMultiply(G, F, diff+ZOFF);

	movsxd	rax, DWORD PTR [rbx+56]
	mov	r8, QWORD PTR [rbx+112]
	mov	rdx, QWORD PTR [rbx+120]
	lea	r9, QWORD PTR [rdi+rax*8]
	mov	rcx, rbx
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply

; 81   :     PtNegate(diff, diff + neg_offset);

	lea	r8, QWORD PTR [rsi+rdi]
	mov	rdx, rdi
	mov	rcx, rbx

; 82   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15

; 81   :     PtNegate(diff, diff + neg_offset);

	jmp	?PtNegate@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtNegate
$LN6@PtPrecompA:
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN118@PtPrecompA
$LL4@PtPrecompA:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN118@PtPrecompA

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL4@PtPrecompA
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL12@PtPrecompA:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN118@PtPrecompA

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL12@PtPrecompA
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL4@PtPrecompA
$LN19@PtPrecompA:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN119@PtPrecompA
	npad	10
$LL17@PtPrecompA:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN119@PtPrecompA

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL17@PtPrecompA
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL25@PtPrecompA:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN119@PtPrecompA

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL25@PtPrecompA
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL17@PtPrecompA
$LN32@PtPrecompA:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN120@PtPrecompA
	npad	10
$LL30@PtPrecompA:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN120@PtPrecompA

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL30@PtPrecompA
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL38@PtPrecompA:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN120@PtPrecompA

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL38@PtPrecompA
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL30@PtPrecompA
$LN45@PtPrecompA:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN121@PtPrecompA
	npad	10
$LL43@PtPrecompA:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN121@PtPrecompA

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL43@PtPrecompA
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL51@PtPrecompA:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN121@PtPrecompA

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL51@PtPrecompA
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL43@PtPrecompA
$LN58@PtPrecompA:

; 51   :     if (Add(in_a, in_b, out))

	mov	rcx, rbx
	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	$LN122@PtPrecompA
	npad	10
$LL56@PtPrecompA:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	$LN122@PtPrecompA

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL56@PtPrecompA
	lea	rax, QWORD PTR [rdi+8]
	npad	2
$LL64@PtPrecompA:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN122@PtPrecompA

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL64@PtPrecompA
; File c:\users\jakez\desktop\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL56@PtPrecompA
?PtPrecompAddSub@BigTwistedEdwards@cat@@IEAAXPEB_K0PEA_K1H@Z ENDP ; cat::BigTwistedEdwards::PtPrecompAddSub
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc
_TEXT	SEGMENT
tv788 = 32
$T1 = 40
precomp$1$ = 48
doubles_skip$1$ = 144
this$ = 144
in_precomp$ = 152
w$ = 160
in_k$ = 168
doubles_after$1$ = 176
msb_k$dead$ = 176
out$ = 184
?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_KH0EPEA_K@Z PROC ; cat::BigTwistedEdwards::PtMultiply

; 82   : {

$LN172:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 72					; 00000048H

; 84   :     int leg = library_legs - 1, offset = CAT_LEG_BITS + w;

	movsxd	rax, DWORD PTR [rcx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	mov	rbx, QWORD PTR out$[rsp]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc

; 82   : {

	mov	r12, rdx

; 85   :     Leg bits, last_leg;
; 86   :     int doubles_before = 0, doubles_skip = 0;

	xor	edx, edx
	lea	ebp, DWORD PTR [r8+64]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	mov	r8, rax
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc

; 82   : {

	mov	r14, rcx

; 85   :     Leg bits, last_leg;
; 86   :     int doubles_before = 0, doubles_skip = 0;

	mov	esi, edx
	mov	DWORD PTR doubles_skip$1$[rsp], edx

; 87   : 
; 88   : 	// Extend input scalar by one bit so it will work for the sum of two scalars
; 89   : 	last_leg = msb_k;

	mov	r15d, edx
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	mov	rdx, r12
	mov	rcx, rbx
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc

; 84   :     int leg = library_legs - 1, offset = CAT_LEG_BITS + w;

	lea	edi, DWORD PTR [rax-1]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 90   : 	Copy(in+YOFF, out+YOFF);

	movsxd	rax, DWORD PTR [r14+48]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [r14+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 90   : 	Copy(in+YOFF, out+YOFF);

	lea	rdx, QWORD PTR [r12+rax*8]
	lea	rcx, QWORD PTR [rbx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 91   : 	Copy(in+TOFF, out+TOFF);

	movsxd	rax, DWORD PTR [r14+52]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [r14+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 91   : 	Copy(in+TOFF, out+TOFF);

	lea	rdx, QWORD PTR [r12+rax*8]
	lea	rcx, QWORD PTR [rbx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 92   : 	Copy(in+ZOFF, out+ZOFF);

	movsxd	rax, DWORD PTR [r14+56]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [r14+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 92   : 	Copy(in+ZOFF, out+ZOFF);

	lea	rdx, QWORD PTR [r12+rax*8]
	lea	rcx, QWORD PTR [rbx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc

; 84   :     int leg = library_legs - 1, offset = CAT_LEG_BITS + w;

	mov	r9d, DWORD PTR w$[rsp]
	movsxd	rcx, edi
	mov	eax, r9d
	mov	r12d, 64				; 00000040H
	mov	QWORD PTR $T1[rsp], rcx
	neg	eax
	lea	r13d, DWORD PTR [rbp-64]
	sub	r12d, ebp
	mov	DWORD PTR tv788[rsp], eax
$LN170@PtMultiply:
	lea	r10, OFFSET FLAT:MOF_LUT

; 90   :     if (last_leg)
; 91   :         PtCopy(in_precomp + POINT_STRIDE, out); // copy base point
; 92   :     else
; 93   :         PtCopy(in_precomp, out); // copy additive identity
; 94   : 
; 95   :     for (;;)
; 96   :     {
; 97   :         // If still processing bits from current leg of k,
; 98   :         if (offset <= CAT_LEG_BITS)

	cmp	ebp, 64					; 00000040H
	jg	SHORT $LN13@PtMultiply

; 99   :         {
; 100  :             // Select next bits from current leg of k
; 101  :             bits = last_leg >> (CAT_LEG_BITS - offset);

	mov	r8, r15
	mov	ecx, r12d
	shr	r8, cl
	jmp	SHORT $LN8@PtMultiply
$LN13@PtMultiply:

; 102  :         }
; 103  :         else if (leg >= 0)

	test	rcx, rcx
	js	SHORT $LN11@PtMultiply

; 104  :         {
; 105  :             // Next bits straddle the previous and next legs of k
; 106  :             Leg new_leg = in_k[leg--];

	mov	rax, QWORD PTR in_k$[rsp]
	dec	rcx

; 107  :             offset -= CAT_LEG_BITS;

	add	r12d, 64				; 00000040H
	mov	rax, QWORD PTR [rax+rcx*8+8]
	mov	QWORD PTR $T1[rsp], rcx

; 108  :             bits = (last_leg << offset) | (new_leg >> (CAT_LEG_BITS - offset));

	mov	ecx, r12d
	sub	ebp, 64					; 00000040H
	mov	r8, rax
	sub	r13d, 64				; 00000040H
	shr	r8, cl
	mov	ecx, ebp
	shl	r15, cl
	or	r8, r15

; 109  :             last_leg = new_leg;

	mov	r15, rax
	jmp	SHORT $LN8@PtMultiply
$LN11@PtMultiply:

; 110  :         }
; 111  :         else if (offset <= CAT_LEG_BITS + w)

	lea	eax, DWORD PTR [r9+64]
	cmp	ebp, eax
	jg	$LN9@PtMultiply

; 147  :     }

	lea	eax, DWORD PTR [rbp-65]
	mov	ecx, r13d
	mov	r8, r15
	mov	DWORD PTR doubles_skip$1$[rsp], eax
	shl	r8, cl
$LN8@PtMultiply:

; 112  :         {
; 113  :             // Pad zeroes on the right
; 114  :             bits = last_leg << (offset - CAT_LEG_BITS);
; 115  : 
; 116  :             // Skip padding - 1 doubles after leaving this loop
; 117  :             doubles_skip = offset - CAT_LEG_BITS - 1;
; 118  :         }
; 119  :         else break;
; 120  : 
; 121  :         // Invert low bits if negative, mask out high bit, and get table entry
; 122  :         Leg z = (((bits ^ (0 - ((bits >> w) & 1))) & ((1 << w) - 1)) + 1) >> 1;

	mov	ecx, r9d
	mov	rdx, r8
	mov	eax, 1
	shl	eax, cl
	shr	rdx, cl
	dec	eax
	and	edx, 1
	cdqe
	neg	rdx
	xor	rdx, r8

; 123  : 
; 124  :         // Extract the operation for this table entry
; 125  :         Leg neg_mask = (bits & ((Leg)1 << w)) >> 2;

	shr	r8, 2
	and	rdx, rax
	mov	eax, 1
	shl	rax, cl
	inc	rdx

; 126  : 		if (!z) neg_mask = 0; // "negative zero" -- occurs when bits are all ones

	mov	ecx, 0
	shr	rax, 2
	and	rax, r8
	shr	rdx, 1
	cmove	rax, rcx

; 127  :         const Leg *precomp = in_precomp + (MOF_LUT[z].add_index + neg_mask) * POINT_STRIDE;

	movzx	ecx, BYTE PTR [r10+rdx*2]
	add	rcx, rax
	movsxd	rax, DWORD PTR [r14+60]
	imul	rcx, rax
	mov	rax, QWORD PTR in_precomp$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]

; 128  :         int doubles_after = MOF_LUT[z].doubles_after;

	movzx	ecx, BYTE PTR [r10+rdx*2+1]
	mov	DWORD PTR doubles_after$1$[rsp], ecx
	mov	QWORD PTR precomp$1$[rsp], rax

; 129  : 		if (!z) doubles_after = w - 1; // fixes trailing doubles for final partial window of all zeroes

	test	rdx, rdx
	jne	SHORT $LN6@PtMultiply
	lea	ecx, DWORD PTR [r9-1]
	mov	DWORD PTR doubles_after$1$[rsp], ecx
$LN6@PtMultiply:

; 130  : 
; 131  : 		// Perform doubles before addition
; 132  : 		doubles_before += w - doubles_after;
; 133  : 
; 134  : 		// There will always be at least one doubling to perform here
; 135  : 		while (--doubles_before)

	mov	edi, r9d
	sub	edi, ecx
	dec	edi
	add	edi, esi
	je	SHORT $LN4@PtMultiply
	npad	11
$LL5@PtMultiply:

; 136  : 			PtDouble(out, out);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, r14
	call	?PtDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtDouble
	dec	edi
	jne	SHORT $LL5@PtMultiply
$LN4@PtMultiply:

; 137  : 		PtEDouble(out, out);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, r14
	call	?PtEDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtEDouble

; 138  : 
; 139  : 		// Perform addition or subtraction from the precomputed table
; 140  : 		PtAdd(out, precomp, out);

	mov	r8, QWORD PTR precomp$1$[rsp]
	mov	r9, rbx
	mov	rdx, rbx
	mov	rcx, r14
	call	?PtAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtAdd

; 141  : 
; 142  : 		// Accumulate doubles after addition
; 143  : 		doubles_before = doubles_after;
; 144  : 
; 145  :         // Set up offset for next time around
; 146  :         offset += w;

	mov	r9d, DWORD PTR w$[rsp]
	add	r12d, DWORD PTR tv788[rsp]
	mov	esi, DWORD PTR doubles_after$1$[rsp]

; 147  :     }

	mov	rcx, QWORD PTR $T1[rsp]
	add	ebp, r9d
	add	r13d, r9d
	jmp	$LN170@PtMultiply
$LN9@PtMultiply:

; 148  : 
; 149  :     // Skip some doubles at the end due to window underrun
; 150  :     if (doubles_before > doubles_skip)

	mov	ecx, DWORD PTR doubles_skip$1$[rsp]
	cmp	esi, ecx
	jle	SHORT $LN153@PtMultiply

; 151  :     {
; 152  :         doubles_before -= doubles_skip;
; 153  : 
; 154  :         // Perform trailing doubles
; 155  :         while (doubles_before--)

	sub	esi, ecx
	je	SHORT $LN153@PtMultiply
	npad	10
$LL2@PtMultiply:

; 156  :             PtDouble(out, out);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, r14
	call	?PtDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtDouble
	dec	esi
	jne	SHORT $LL2@PtMultiply
$LN153@PtMultiply:

; 157  :     }
; 158  : }

	add	rsp, 72					; 00000048H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
?PtMultiply@BigTwistedEdwards@cat@@QEAAXPEB_KH0EPEA_K@Z ENDP ; cat::BigTwistedEdwards::PtMultiply
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc
_TEXT	SEGMENT
add1$1$ = 32
add2$1$ = 40
tv1059 = 48
$T1 = 56
last_leg_l$1$ = 128
this$ = 128
precomp_p$ = 136
precomp_q$ = 144
w$dead$ = 152
in_k$ = 160
after2$1$ = 168
msb_k$dead$ = 168
in_l$ = 176
doubles_skip$1$ = 184
msb_l$dead$ = 184
out$ = 192
?PtSiMultiply@BigTwistedEdwards@cat@@QEAAXPEB_K0H0E0EPEA_K@Z PROC ; cat::BigTwistedEdwards::PtSiMultiply

; 166  : {

$LN189:
	mov	QWORD PTR [rsp+32], rbx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H

; 167  :     // Begin multiplication loop
; 168  :     int leg = library_legs - 1, offset = CAT_LEG_BITS + w;

	movsxd	rax, DWORD PTR [rcx+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	mov	rbx, QWORD PTR out$[rsp]
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc

; 166  : {

	mov	rbp, rcx
	mov	r12, r8

; 170  :     int doubles_before = 0, doubles_skip = 0;

	xor	ecx, ecx
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	mov	r8, rax
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc

; 170  :     int doubles_before = 0, doubles_skip = 0;

	mov	DWORD PTR doubles_skip$1$[rsp], ecx
	xor	esi, esi
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	mov	rcx, rbx
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc

; 166  : {

	mov	r15, rdx

; 167  :     // Begin multiplication loop
; 168  :     int leg = library_legs - 1, offset = CAT_LEG_BITS + w;

	lea	edi, DWORD PTR [rax-1]
	lea	r14d, QWORD PTR [rsi+70]

; 171  : 
; 172  : 	// Extend input scalar by one bit so it will work for the sum of two scalars
; 173  : 	last_leg_k = msb_k;

	xor	r13d, r13d
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 90   : 	Copy(in+YOFF, out+YOFF);

	movsxd	rax, DWORD PTR [rbp+48]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbp+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 90   : 	Copy(in+YOFF, out+YOFF);

	lea	rdx, QWORD PTR [r15+rax*8]
	lea	rcx, QWORD PTR [rbx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 91   : 	Copy(in+TOFF, out+TOFF);

	movsxd	rax, DWORD PTR [rbp+52]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbp+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 91   : 	Copy(in+TOFF, out+TOFF);

	lea	rdx, QWORD PTR [r15+rax*8]
	lea	rcx, QWORD PTR [rbx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 92   : 	Copy(in+ZOFF, out+ZOFF);

	movsxd	rax, DWORD PTR [rbp+56]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rbp+4]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigtwistededwards.cpp

; 92   : 	Copy(in+ZOFF, out+ZOFF);

	lea	rdx, QWORD PTR [r15+rax*8]
	lea	rcx, QWORD PTR [rbx+rax*8]
; File c:\users\jakez\desktop\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid-master\src\math\edward\mul\ptmultiply.inc

; 183  :         PtAdd(out, precomp_q, out); // add additive identity

	mov	r9, rbx
	mov	r8, r12
	mov	rdx, rbx
	mov	rcx, rbp
	mov	QWORD PTR last_leg_l$1$[rsp], rsi
	call	?PtAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtAdd
	mov	rax, QWORD PTR in_l$[rsp]

; 280  : 
; 281  : 		// Accumulate doubles after addition
; 282  : 		doubles_before = after2;
; 283  : 
; 284  :         // Set up offset for next time around
; 285  :         offset += w;
; 286  :     }

	mov	rdx, QWORD PTR in_k$[rsp]
	movsxd	r8, edi
	sub	rdx, rax
	lea	r12d, QWORD PTR [rsi+6]
	lea	rcx, QWORD PTR [rax+r8*8]
	mov	QWORD PTR $T1[rsp], r8
	lea	r15d, QWORD PTR [rsi-6]
	mov	QWORD PTR tv1059[rsp], rcx
	mov	QWORD PTR in_k$[rsp], rdx
$LN187@PtSiMultip:
	mov	edi, 5
	lea	r11, OFFSET FLAT:MOF_LUT
	cmp	r14d, 64				; 00000040H
	jg	SHORT $LN21@PtSiMultip

; 184  : 
; 185  :     for (;;)
; 186  :     {
; 187  :         // If still processing bits from current leg of k,
; 188  :         if (offset <= CAT_LEG_BITS)
; 189  :         {
; 190  :             // Select next bits from current leg of k
; 191  :             bits_k = last_leg_k >> (CAT_LEG_BITS - offset);

	mov	r10, QWORD PTR last_leg_l$1$[rsp]
	mov	ecx, r15d
	mov	r9, r13
	shr	r9, cl

; 192  :             bits_l = last_leg_l >> (CAT_LEG_BITS - offset);

	shr	r10, cl
	jmp	$LN16@PtSiMultip
$LN21@PtSiMultip:

; 193  :         }
; 194  :         else if (leg >= 0)

	test	r8, r8
	js	SHORT $LN19@PtSiMultip

; 195  :         {
; 196  :             // Next bits straddle the previous and next legs of k
; 197  :             Leg new_leg_k = in_k[leg];

	mov	rax, QWORD PTR [rdx+rcx]

; 198  :             Leg new_leg_l = in_l[leg--];

	mov	rdx, QWORD PTR [rcx]
	sub	rcx, 8
	mov	QWORD PTR tv1059[rsp], rcx

; 199  :             offset -= CAT_LEG_BITS;

	add	r15d, 64				; 00000040H

; 200  :             bits_k = (last_leg_k << offset) | (new_leg_k >> (CAT_LEG_BITS - offset));

	mov	r9, rax
	sub	r14d, 64				; 00000040H
	mov	ecx, r15d
	dec	r8
	shr	r9, cl
	mov	ecx, r14d

; 201  :             last_leg_k = new_leg_k;
; 202  :             bits_l = (last_leg_l << offset) | (new_leg_l >> (CAT_LEG_BITS - offset));

	mov	r10, rdx
	shl	r13, cl
	mov	ecx, r15d
	sub	r12d, 64				; 00000040H
	or	r9, r13
	mov	r13, rax
	mov	rax, QWORD PTR last_leg_l$1$[rsp]
	shr	r10, cl
	mov	ecx, r14d
	mov	QWORD PTR $T1[rsp], r8
	shl	rax, cl

; 203  :             last_leg_l = new_leg_l;

	mov	QWORD PTR last_leg_l$1$[rsp], rdx
	or	r10, rax
	jmp	SHORT $LN16@PtSiMultip
$LN19@PtSiMultip:

; 204  :         }
; 205  :         else if (offset <= CAT_LEG_BITS + w)

	cmp	r14d, 70				; 00000046H
	jg	$LN17@PtSiMultip

; 206  :         {
; 207  :             // Pad zeroes on the right
; 208  :             bits_k = last_leg_k << (offset - CAT_LEG_BITS);
; 209  :             bits_l = last_leg_l << (offset - CAT_LEG_BITS);

	mov	r10, QWORD PTR last_leg_l$1$[rsp]
	mov	ecx, r12d

; 280  : 
; 281  : 		// Accumulate doubles after addition
; 282  : 		doubles_before = after2;
; 283  : 
; 284  :         // Set up offset for next time around
; 285  :         offset += w;
; 286  :     }

	lea	eax, DWORD PTR [r14-65]
	mov	r9, r13
	mov	DWORD PTR doubles_skip$1$[rsp], eax
	shl	r9, cl
	shl	r10, cl
$LN16@PtSiMultip:

; 210  : 
; 211  :             // Skip padding - 1 doubles after leaving this loop
; 212  :             doubles_skip = offset - CAT_LEG_BITS - 1;
; 213  :         }
; 214  :         else break;
; 215  : 
; 216  :         // Invert low bits if negative, mask out high bit, and get table entry
; 217  :         Leg z_k = (((bits_k ^ (0 - ((bits_k >> w) & 1))) & ((1 << w) - 1)) + 1) >> 1;

	movsxd	rcx, DWORD PTR [rbp+60]
	mov	r8, r9

; 218  :         Leg z_l = (((bits_l ^ (0 - ((bits_l >> w) & 1))) & ((1 << w) - 1)) + 1) >> 1;

	mov	rdx, r10
	shr	r8, 6
	shr	rdx, 6

; 219  : 
; 220  :         // Extract the operation for this table entry
; 221  :         Leg neg_mask_k = (bits_k & ((Leg)1 << w)) >> 2;
; 222  :         Leg neg_mask_l = (bits_l & ((Leg)1 << w)) >> 2;
; 223  : 		if (!z_k) neg_mask_k = 0; // "negative zero" -- occurs when bits are all ones

	mov	eax, 0
	and	r8d, 1
	and	edx, 1
	neg	r8
	neg	rdx
	xor	r8, r9
	xor	rdx, r10
	shr	r9, 2
	and	r9d, 16
	shr	r10, 2
	and	r8d, 63					; 0000003fH
	and	edx, 63					; 0000003fH
	and	r10d, 16
	inc	r8
	inc	rdx
	shr	r8, 1
	cmove	r9d, eax
	shr	rdx, 1

; 224  : 		if (!z_l) neg_mask_l = 0; // "negative zero" -- occurs when bits are all ones

	cmove	r10d, eax

; 225  :         const Leg *precomp_k = precomp_p + (MOF_LUT[z_k].add_index + neg_mask_k) * POINT_STRIDE;

	movzx	eax, BYTE PTR [r11+r8*2]
	add	rax, r9
	mov	r9, QWORD PTR precomp_p$[rsp]
	imul	rax, rcx
	lea	r11, QWORD PTR [r9+rax*8]

; 226  :         const Leg *precomp_l = precomp_q + (MOF_LUT[z_l].add_index + neg_mask_l) * POINT_STRIDE;

	lea	rax, OFFSET FLAT:MOF_LUT
	movzx	eax, BYTE PTR [rax+rdx*2]
	add	rax, r10
	imul	rax, rcx
	mov	rcx, QWORD PTR precomp_q$[rsp]

; 227  :         int doubles_after_k = MOF_LUT[z_k].doubles_after;
; 228  :         int doubles_after_l = MOF_LUT[z_l].doubles_after;
; 229  : 		if (!z_k) doubles_after_k = w - 1; // fixes trailing doubles for final partial window of all zeroes

	test	r8, r8
	lea	r9, QWORD PTR [rcx+rax*8]
	lea	rax, OFFSET FLAT:MOF_LUT
	movzx	ecx, BYTE PTR [rax+r8*2+1]
	movzx	eax, BYTE PTR [rax+rdx*2+1]
	mov	QWORD PTR add2$1$[rsp], r9
	cmove	ecx, edi

; 230  : 		if (!z_l) doubles_after_l = w - 1; // fixes trailing doubles for final partial window of all zeroes

	test	rdx, rdx
	cmove	eax, edi
	mov	DWORD PTR after2$1$[rsp], eax

; 231  : 
; 232  : 		int after1, after2;
; 233  : 		const Leg *add1, *add2;
; 234  : 
; 235  : 		if (doubles_after_k >= doubles_after_l)

	cmp	ecx, eax
	jl	SHORT $LN11@PtSiMultip

; 236  : 		{
; 237  : 			after1 = doubles_after_k;

	mov	edi, ecx

; 238  : 			after2 = doubles_after_l;
; 239  : 			add1 = precomp_k;

	mov	QWORD PTR add1$1$[rsp], r11

; 240  : 			add2 = precomp_l;
; 241  : 		}
; 242  : 		else

	jmp	SHORT $LN10@PtSiMultip
$LN11@PtSiMultip:

; 243  : 		{
; 244  : 			after1 = doubles_after_l;

	mov	edi, eax

; 245  : 			after2 = doubles_after_k;

	mov	DWORD PTR after2$1$[rsp], ecx

; 246  : 			add1 = precomp_l;

	mov	QWORD PTR add1$1$[rsp], r9

; 247  : 			add2 = precomp_k;

	mov	QWORD PTR add2$1$[rsp], r11
$LN10@PtSiMultip:

; 248  : 		}
; 249  : 
; 250  : 		// Perform doubles before addition
; 251  : 		doubles_before += w - after1;
; 252  : 
; 253  : 		// There will always be at least one doubling to perform here
; 254  : 		while (--doubles_before)

	mov	eax, 5
	sub	eax, edi
	add	esi, eax
	je	SHORT $LN8@PtSiMultip
	npad	11
$LL9@PtSiMultip:

; 255  : 			PtDouble(out, out);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rbp
	call	?PtDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtDouble
	dec	esi
	jne	SHORT $LL9@PtSiMultip
$LN8@PtSiMultip:

; 256  : 		PtEDouble(out, out);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rbp
	call	?PtEDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtEDouble

; 257  : 
; 258  : 		doubles_before = after1 - after2;

	mov	esi, DWORD PTR after2$1$[rsp]

; 259  : 		if (doubles_before)
; 260  : 		{
; 261  : 			// Perform addition or subtraction from the precomputed table
; 262  : 			PtAdd(out, add1, out);

	mov	r8, QWORD PTR add1$1$[rsp]
	mov	r9, rbx
	mov	rdx, rbx
	mov	rcx, rbp
	sub	edi, esi
	je	SHORT $LN7@PtSiMultip
	call	?PtAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtAdd

; 263  : 
; 264  : 			// Perform doubles between the two interleaved adds
; 265  : 			while (--doubles_before)

	dec	edi
	je	SHORT $LN5@PtSiMultip
$LL6@PtSiMultip:

; 266  : 				PtDouble(out, out);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rbp
	call	?PtDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtDouble
	dec	edi
	jne	SHORT $LL6@PtSiMultip
$LN5@PtSiMultip:

; 267  : 			PtEDouble(out, out);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rbp
	call	?PtEDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtEDouble

; 268  : 		}
; 269  : 		else

	jmp	SHORT $LN4@PtSiMultip
$LN7@PtSiMultip:

; 270  : 		{
; 271  : 			// Perform addition or subtraction from the precomputed table
; 272  : 			PtEAdd(out, add1, out);

	call	?PtEAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtEAdd
$LN4@PtSiMultip:

; 273  : 
; 274  : 			// Note: Has resistance from timing attack since PtEAdd() and
; 275  : 			// PtEDouble() both have just one multiply more than usual.
; 276  : 		}
; 277  : 
; 278  : 		// Perform addition or subtraction from the precomputed table
; 279  : 		PtAdd(out, add2, out);

	mov	r8, QWORD PTR add2$1$[rsp]
	mov	r9, rbx
	mov	rdx, rbx
	mov	rcx, rbp
	call	?PtAdd@BigTwistedEdwards@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigTwistedEdwards::PtAdd

; 280  : 
; 281  : 		// Accumulate doubles after addition
; 282  : 		doubles_before = after2;
; 283  : 
; 284  :         // Set up offset for next time around
; 285  :         offset += w;
; 286  :     }

	mov	rcx, QWORD PTR tv1059[rsp]
	mov	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR in_k$[rsp]
	add	r14d, 6
	sub	r15d, 6
	add	r12d, 6
	jmp	$LN187@PtSiMultip
$LN17@PtSiMultip:

; 287  : 
; 288  :     // Skip some doubles at the end due to window underrun
; 289  :     if (doubles_before > doubles_skip)

	mov	ecx, DWORD PTR doubles_skip$1$[rsp]
	cmp	esi, ecx
	jle	SHORT $LN165@PtSiMultip

; 290  :     {
; 291  :         doubles_before -= doubles_skip;
; 292  : 
; 293  :         // Perform trailing doubles
; 294  :         while (doubles_before--)

	sub	esi, ecx
	je	SHORT $LN165@PtSiMultip
	npad	2
$LL2@PtSiMultip:

; 295  :             PtDouble(out, out);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rbp
	call	?PtDouble@BigTwistedEdwards@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigTwistedEdwards::PtDouble
	dec	esi
	jne	SHORT $LL2@PtSiMultip
$LN165@PtSiMultip:

; 296  :     }
; 297  : }

	mov	rbx, QWORD PTR [rsp+152]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?PtSiMultiply@BigTwistedEdwards@cat@@QEAAXPEB_K0H0E0EPEA_K@Z ENDP ; cat::BigTwistedEdwards::PtSiMultiply
_TEXT	ENDS
END
