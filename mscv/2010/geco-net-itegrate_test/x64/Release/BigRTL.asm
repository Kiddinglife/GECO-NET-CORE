; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_06ODJDPAFC@BigRTL?$AA@			; `string'
PUBLIC	??_C@_0CH@OJHHLGFI@Unable?5to?5allocate?5leg?5array?5for@ ; `string'
EXTRN	divide64_core:PROC
EXTRN	modulus64_x:PROC
EXTRN	divide64_x:PROC
;	COMDAT ??_C@_0CH@OJHHLGFI@Unable?5to?5allocate?5leg?5array?5for@
CONST	SEGMENT
??_C@_0CH@OJHHLGFI@Unable?5to?5allocate?5leg?5array?5for@ DB 'Unable to a'
	DB	'llocate leg array for maths', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODJDPAFC@BigRTL?$AA@
CONST	SEGMENT
??_C@_06ODJDPAFC@BigRTL?$AA@ DB 'BigRTL', 00H		; `string'
CONST	ENDS
PUBLIC	?BSR64@cat@@YAI_K@Z				; cat::BSR64
PUBLIC	??$Comba3@$07@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ; Comba3<8>
PUBLIC	??$Comba2@$05$07@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ; Comba2<6,8>
PUBLIC	??$Comba2@$04$07@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ; Comba2<5,8>
PUBLIC	??$Comba2@$03$07@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ; Comba2<4,8>
PUBLIC	??$Comba2@$02$07@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ; Comba2<3,8>
PUBLIC	??$Comba2@$01$07@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ; Comba2<2,8>
PUBLIC	??$Comba2@$00$07@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ; Comba2<1,8>
PUBLIC	??$Comba2@$0A@$07@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ; Comba2<0,8>
PUBLIC	??$Comba3@$07$0A@@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$0A@@@@Z ; Comba3<8,0>
PUBLIC	??$Comba2@$05$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z ; Comba2<6,7,0>
PUBLIC	??$Comba2@$04$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z ; Comba2<5,7,0>
PUBLIC	??$Comba2@$03$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z ; Comba2<4,7,0>
PUBLIC	??$Comba2@$02$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z ; Comba2<3,7,0>
PUBLIC	??$Comba2@$01$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z ; Comba2<2,7,0>
PUBLIC	??$Comba2@$00$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z ; Comba2<1,7,0>
PUBLIC	??$Comba2@$0?0$07@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$07@@2@Z ; Comba2<-1,8>
PUBLIC	??$Comba3@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z ; Comba3<8,1>
PUBLIC	??$Comba2@$05$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$05@@2V?$CombaT@$00@@@Z ; Comba2<6,6,1>
PUBLIC	??$Comba2@$04$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$05@@V?$CombaT@$00@@@Z ; Comba2<5,6,1>
PUBLIC	??$Comba2@$03$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$05@@V?$CombaT@$00@@@Z ; Comba2<4,6,1>
PUBLIC	??$Comba2@$02$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$05@@V?$CombaT@$00@@@Z ; Comba2<3,6,1>
PUBLIC	??$Comba2@$01$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$05@@V?$CombaT@$00@@@Z ; Comba2<2,6,1>
PUBLIC	??$Comba2@$0A@$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$06@@2@Z ; Comba2<0,7,0>
PUBLIC	??$Comba3@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z ; Comba3<8,2>
PUBLIC	??$Comba2@$05$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$04@@V?$CombaT@$01@@@Z ; Comba2<6,5,2>
PUBLIC	??$Comba2@$04$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$04@@2V?$CombaT@$01@@@Z ; Comba2<5,5,2>
PUBLIC	??$Comba2@$03$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$04@@V?$CombaT@$01@@@Z ; Comba2<4,5,2>
PUBLIC	??$Comba2@$02$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$04@@V?$CombaT@$01@@@Z ; Comba2<3,5,2>
PUBLIC	??$Comba2@$00$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$05@@2@Z ; Comba2<1,6,1>
PUBLIC	??$Comba2@$0?0$06@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$06@@2@Z ; Comba2<-1,7>
PUBLIC	??$Comba3@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z ; Comba3<8,3>
PUBLIC	??$Comba2@$05$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$03@@V?$CombaT@$02@@@Z ; Comba2<6,4,3>
PUBLIC	??$Comba2@$04$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$03@@V?$CombaT@$02@@@Z ; Comba2<5,4,3>
PUBLIC	??$Comba2@$03$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$02@@@Z ; Comba2<4,4,3>
PUBLIC	??$Comba2@$01$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$04@@2@Z ; Comba2<2,5,2>
PUBLIC	??$Comba2@$0A@$05$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$05@@2@Z ; Comba2<0,6,0>
PUBLIC	??$Comba3@$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$0?0@@@Z ; Comba3<6>
PUBLIC	??$Comba2@$03$05@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z ; Comba2<4,6>
PUBLIC	??$Comba2@$02$05@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z ; Comba2<3,6>
PUBLIC	??$Comba2@$01$05@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z ; Comba2<2,6>
PUBLIC	??$Comba2@$00$05@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z ; Comba2<1,6>
PUBLIC	??$Comba2@$0A@$05@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z ; Comba2<0,6>
PUBLIC	??$Comba3@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z ; Comba3<8,4>
PUBLIC	??$Comba2@$05$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$02@@V?$CombaT@$03@@@Z ; Comba2<6,3,4>
PUBLIC	??$Comba2@$04$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$02@@V?$CombaT@$03@@@Z ; Comba2<5,3,4>
PUBLIC	??$Comba2@$02$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@2@Z ; Comba2<3,4,3>
PUBLIC	??$Comba2@$00$04$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$04@@2@Z ; Comba2<1,5,1>
PUBLIC	??$Comba3@$05$0A@@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$0A@@@@Z ; Comba3<6,0>
PUBLIC	??$Comba2@$03$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z ; Comba2<4,5,0>
PUBLIC	??$Comba2@$02$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z ; Comba2<3,5,0>
PUBLIC	??$Comba2@$01$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z ; Comba2<2,5,0>
PUBLIC	??$Comba2@$00$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z ; Comba2<1,5,0>
PUBLIC	??$Comba2@$0?0$05@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$05@@2@Z ; Comba2<-1,6>
PUBLIC	??$Comba3@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z ; Comba3<8,5>
PUBLIC	??$Comba2@$05$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$01@@V?$CombaT@$04@@@Z ; Comba2<6,2,5>
PUBLIC	??$Comba2@$03$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@2@Z ; Comba2<4,3,4>
PUBLIC	??$Comba2@$01$03$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@2@Z ; Comba2<2,4,2>
PUBLIC	??$Comba3@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z ; Comba3<6,1>
PUBLIC	??$Comba2@$03$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$00@@@Z ; Comba2<4,4,1>
PUBLIC	??$Comba2@$02$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@V?$CombaT@$00@@@Z ; Comba2<3,4,1>
PUBLIC	??$Comba2@$01$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@V?$CombaT@$00@@@Z ; Comba2<2,4,1>
PUBLIC	??$Comba2@$0A@$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$04@@2@Z ; Comba2<0,5,0>
PUBLIC	??$Comba3@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z ; Comba3<8,6>
PUBLIC	??$Comba2@$04$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$01@@2@Z ; Comba2<5,2,5>
PUBLIC	??$Comba2@$02$02$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@22@Z ; Comba2<3,3,3>
PUBLIC	??$Comba3@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z ; Comba3<6,2>
PUBLIC	??$Comba2@$03$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@V?$CombaT@$01@@@Z ; Comba2<4,3,2>
PUBLIC	??$Comba2@$02$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@2V?$CombaT@$01@@@Z ; Comba2<3,3,2>
PUBLIC	??$Comba2@$00$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$03@@2@Z ; Comba2<1,4,1>
PUBLIC	??$Comba2@$0?0$04@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$04@@2@Z ; Comba2<-1,5>
PUBLIC	??$Comba1@$07@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@3@Z ; Comba1<8>
PUBLIC	??$Comba2@$05$00$05@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$00@@2@Z ; Comba2<6,1,6>
PUBLIC	??$Comba2@$03$01$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@2@Z ; Comba2<4,2,4>
PUBLIC	??$Comba3@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z ; Comba3<6,3>
PUBLIC	??$Comba2@$03$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@V?$CombaT@$02@@@Z ; Comba2<4,2,3>
PUBLIC	??$Comba2@$01$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$02@@2@Z ; Comba2<2,3,2>
PUBLIC	??$Comba2@$0A@$03$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$03@@2@Z ; Comba2<0,4,0>
PUBLIC	??$Comba1@$07$06@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$06@@@Z ; Comba1<8,7>
PUBLIC	??$Comba2@$04$00$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$00@@2@Z ; Comba2<5,1,5>
PUBLIC	??$Comba3@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z ; Comba3<6,4>
PUBLIC	??$Comba2@$02$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$01@@2@Z ; Comba2<3,2,3>
PUBLIC	??$Comba2@$00$02$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$02@@2@Z ; Comba2<1,3,1>
PUBLIC	??$Comba2@$0?0$03@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$03@@2@Z ; Comba2<-1,4>
PUBLIC	??$Comba1@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z ; Comba1<8,6>
PUBLIC	??$Comba1@$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@3@Z ; Comba1<6>
PUBLIC	??$Comba2@$03$00$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$00@@2@Z ; Comba2<4,1,4>
PUBLIC	??$Comba2@$01$01$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@22@Z ; Comba2<2,2,2>
PUBLIC	??$Comba2@$0A@$02$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$02@@2@Z ; Comba2<0,3,0>
PUBLIC	??$Comba1@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z ; Comba1<8,5>
PUBLIC	??$Comba1@$05$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$04@@@Z ; Comba1<6,5>
PUBLIC	??$Comba2@$02$00$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$00@@2@Z ; Comba2<3,1,3>
PUBLIC	??$Comba2@$00$01$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$01@@2@Z ; Comba2<1,2,1>
PUBLIC	??$Comba2@$0?0$02@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$02@@2@Z ; Comba2<-1,3>
PUBLIC	??$Comba1@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z ; Comba1<8,4>
PUBLIC	??$Comba1@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z ; Comba1<6,4>
PUBLIC	??$Comba2@$01$00$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$00@@2@Z ; Comba2<2,1,2>
PUBLIC	??$Comba2@$0A@$01$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$01@@2@Z ; Comba2<0,2,0>
PUBLIC	??$Comba1@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z ; Comba1<8,3>
PUBLIC	??$Comba1@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z ; Comba1<6,3>
PUBLIC	??$Comba2@$00$00$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@22@Z ; Comba2<1,1,1>
PUBLIC	??$Comba2@$0?0$01@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$01@@2@Z ; Comba2<-1,2>
PUBLIC	??$Comba1@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z ; Comba1<8,2>
PUBLIC	??$Comba1@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z ; Comba1<6,2>
PUBLIC	??$Comba2@$0A@$00$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$00@@2@Z ; Comba2<0,1,0>
PUBLIC	??$Comba1@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z ; Comba1<8,1>
PUBLIC	??$Comba1@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z ; Comba1<6,1>
PUBLIC	??$CombaMul@$07@@YAXPEB_K0PEA_K@Z		; CombaMul<8>
PUBLIC	??$CombaMul@$05@@YAXPEB_K0PEA_K@Z		; CombaMul<6>
PUBLIC	??$?6$$BY0CH@$$CBD@Recorder@cat@@QEAAAEAV01@AEAY0CH@$$CBD@Z ; cat::Recorder::operator<<<char const [39]>
PUBLIC	?DivideCore@BigRTL@cat@@KAXH_KPEA_KH11@Z	; cat::BigRTL::DivideCore
PUBLIC	?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z	; cat::BigRTL::DivideProduct
PUBLIC	?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z		; cat::BigRTL::Square
PUBLIC	?Multiply@BigRTL@cat@@QEAAXPEB_K0PEA_K@Z	; cat::BigRTL::Multiply
PUBLIC	?SchoolbookMultiply4@@YAXPEB_K0PEA_K@Z		; SchoolbookMultiply4
PUBLIC	?MultiplyXAdd@BigRTL@cat@@KA_KHPEB_K_K0PEA_K@Z	; cat::BigRTL::MultiplyXAdd
PUBLIC	?MultiplyXAdd@BigRTL@cat@@QEAA_KPEB_K_K0PEA_K@Z	; cat::BigRTL::MultiplyXAdd
PUBLIC	?MultiplyX@BigRTL@cat@@KA_KHPEB_K_KPEA_K@Z	; cat::BigRTL::MultiplyX
PUBLIC	?MultiplyX@BigRTL@cat@@QEAA_KPEB_K_KPEA_K@Z	; cat::BigRTL::MultiplyX
PUBLIC	?SubtractX@BigRTL@cat@@QEAAEPEA_K_K@Z		; cat::BigRTL::SubtractX
PUBLIC	?Subtract@BigRTL@cat@@KAEHPEB_K0PEA_K@Z		; cat::BigRTL::Subtract
PUBLIC	?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z	; cat::BigRTL::ShiftRight
PUBLIC	?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z	; cat::BigRTL::ShiftLeft
PUBLIC	?DoubleAdd@BigRTL@cat@@KA_KHPEB_K0PEA_K@Z	; cat::BigRTL::DoubleAdd
PUBLIC	?EqualX@BigRTL@cat@@QEAA_NPEB_K_K@Z		; cat::BigRTL::EqualX
PUBLIC	?AddX@BigRTL@cat@@QEAAEPEA_K_K@Z		; cat::BigRTL::AddX
PUBLIC	?Add@BigRTL@cat@@KAEHPEB_K0PEA_K@Z		; cat::BigRTL::Add
PUBLIC	?LegsUsed@BigRTL@cat@@QEAAHPEB_K@Z		; cat::BigRTL::LegsUsed
PUBLIC	?Copy@BigRTL@cat@@QEAAXPEB_KPEA_K@Z		; cat::BigRTL::Copy
PUBLIC	??0BigRTL@cat@@QEAA@HH@Z			; cat::BigRTL::BigRTL
PUBLIC	?GreaterX@BigRTL@cat@@QEAA_NPEB_K_K@Z		; cat::BigRTL::GreaterX
PUBLIC	?Double@BigRTL@cat@@QEAAEPEB_KPEA_K@Z		; cat::BigRTL::Double
PUBLIC	?Load@BigRTL@cat@@QEAAXPEBXHPEA_K@Z		; cat::BigRTL::Load
PUBLIC	?LessX@BigRTL@cat@@QEAA_NPEB_K_K@Z		; cat::BigRTL::LessX
PUBLIC	?MulMod@BigRTL@cat@@QEAAXPEB_K00PEA_K@Z		; cat::BigRTL::MulMod
PUBLIC	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z		; cat::BigRTL::Add
PUBLIC	?Subtract@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Subtract
PUBLIC	?Less@BigRTL@cat@@QEAA_NPEB_K0@Z		; cat::BigRTL::Less
PUBLIC	?IsZero@BigRTL@cat@@QEAA_NPEB_K@Z		; cat::BigRTL::IsZero
PUBLIC	?CopyX@BigRTL@cat@@QEAAX_KPEA_K@Z		; cat::BigRTL::CopyX
PUBLIC	??1BigRTL@cat@@QEAA@XZ				; cat::BigRTL::~BigRTL
PUBLIC	?Get@BigRTL@cat@@QEAAPEA_KH@Z			; cat::BigRTL::Get
PUBLIC	?Save@BigRTL@cat@@QEAAXPEB_KPEAXH@Z		; cat::BigRTL::Save
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba3@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z DD imagerel $LN14
	DD	imagerel $LN14+185
	DD	imagerel $unwind$??$Comba3@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$05$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$05@@2V?$CombaT@$00@@@Z DD imagerel $LN8
	DD	imagerel $LN8+105
	DD	imagerel $unwind$??$Comba2@$05$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$05@@2V?$CombaT@$00@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$04$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$05@@V?$CombaT@$00@@@Z DD imagerel $LN8
	DD	imagerel $LN8+105
	DD	imagerel $unwind$??$Comba2@$04$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$05@@V?$CombaT@$00@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$03$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$05@@V?$CombaT@$00@@@Z DD imagerel $LN8
	DD	imagerel $LN8+105
	DD	imagerel $unwind$??$Comba2@$03$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$05@@V?$CombaT@$00@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$02$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$05@@V?$CombaT@$00@@@Z DD imagerel $LN8
	DD	imagerel $LN8+105
	DD	imagerel $unwind$??$Comba2@$02$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$05@@V?$CombaT@$00@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$01$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$05@@V?$CombaT@$00@@@Z DD imagerel $LN8
	DD	imagerel $LN8+105
	DD	imagerel $unwind$??$Comba2@$01$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$05@@V?$CombaT@$00@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba3@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z DD imagerel $LN22
	DD	imagerel $LN22+289
	DD	imagerel $unwind$??$Comba3@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$05$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$04@@V?$CombaT@$01@@@Z DD imagerel $LN10
	DD	imagerel $LN10+157
	DD	imagerel $unwind$??$Comba2@$05$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$04@@V?$CombaT@$01@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$04$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$04@@2V?$CombaT@$01@@@Z DD imagerel $LN10
	DD	imagerel $LN10+160
	DD	imagerel $unwind$??$Comba2@$04$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$04@@2V?$CombaT@$01@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$03$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$04@@V?$CombaT@$01@@@Z DD imagerel $LN10
	DD	imagerel $LN10+160
	DD	imagerel $unwind$??$Comba2@$03$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$04@@V?$CombaT@$01@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$02$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$04@@V?$CombaT@$01@@@Z DD imagerel $LN10
	DD	imagerel $LN10+157
	DD	imagerel $unwind$??$Comba2@$02$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$04@@V?$CombaT@$01@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$00$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$05@@2@Z DD imagerel $LN8
	DD	imagerel $LN8+104
	DD	imagerel $unwind$??$Comba2@$00$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$05@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba3@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z DD imagerel $LN32
	DD	imagerel $LN32+413
	DD	imagerel $unwind$??$Comba3@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$05$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$03@@V?$CombaT@$02@@@Z DD imagerel $LN12
	DD	imagerel $LN12+194
	DD	imagerel $unwind$??$Comba2@$05$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$03@@V?$CombaT@$02@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$04$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$03@@V?$CombaT@$02@@@Z DD imagerel $LN12
	DD	imagerel $LN12+194
	DD	imagerel $unwind$??$Comba2@$04$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$03@@V?$CombaT@$02@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$03$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$02@@@Z DD imagerel $LN12
	DD	imagerel $LN12+188
	DD	imagerel $unwind$??$Comba2@$03$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$02@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$01$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$04@@2@Z DD imagerel $LN10
	DD	imagerel $LN10+159
	DD	imagerel $unwind$??$Comba2@$01$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$04@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba3@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z DD imagerel $LN44
	DD	imagerel $LN44+573
	DD	imagerel $unwind$??$Comba3@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$05$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$02@@V?$CombaT@$03@@@Z DD imagerel $LN14
	DD	imagerel $LN14+227
	DD	imagerel $unwind$??$Comba2@$05$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$02@@V?$CombaT@$03@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$04$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$02@@V?$CombaT@$03@@@Z DD imagerel $LN14
	DD	imagerel $LN14+218
	DD	imagerel $unwind$??$Comba2@$04$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$02@@V?$CombaT@$03@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$02$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@2@Z DD imagerel $LN12
	DD	imagerel $LN12+193
	DD	imagerel $unwind$??$Comba2@$02$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$00$04$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$04@@2@Z DD imagerel $LN8
	DD	imagerel $LN8+104
	DD	imagerel $unwind$??$Comba2@$00$04$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$04@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba3@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z DD imagerel $LN58
	DD	imagerel $LN58+770
	DD	imagerel $unwind$??$Comba3@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$05$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$01@@V?$CombaT@$04@@@Z DD imagerel $LN16
	DD	imagerel $LN16+247
	DD	imagerel $unwind$??$Comba2@$05$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$01@@V?$CombaT@$04@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$03$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@2@Z DD imagerel $LN14
	DD	imagerel $LN14+226
	DD	imagerel $unwind$??$Comba2@$03$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$01$03$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@2@Z DD imagerel $LN10
	DD	imagerel $LN10+159
	DD	imagerel $unwind$??$Comba2@$01$03$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba3@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z DD imagerel $LN14
	DD	imagerel $LN14+185
	DD	imagerel $unwind$??$Comba3@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$03$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$00@@@Z DD imagerel $LN8
	DD	imagerel $LN8+105
	DD	imagerel $unwind$??$Comba2@$03$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$00@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$02$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@V?$CombaT@$00@@@Z DD imagerel $LN8
	DD	imagerel $LN8+105
	DD	imagerel $unwind$??$Comba2@$02$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@V?$CombaT@$00@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$01$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@V?$CombaT@$00@@@Z DD imagerel $LN8
	DD	imagerel $LN8+105
	DD	imagerel $unwind$??$Comba2@$01$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@V?$CombaT@$00@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba3@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z DD imagerel $LN74
	DD	imagerel $LN74+975
	DD	imagerel $unwind$??$Comba3@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$04$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$01@@2@Z DD imagerel $LN16
	DD	imagerel $LN16+258
	DD	imagerel $unwind$??$Comba2@$04$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$01@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$02$02$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@22@Z DD imagerel $LN12
	DD	imagerel $LN12+193
	DD	imagerel $unwind$??$Comba2@$02$02$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@22@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba3@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z DD imagerel $LN22
	DD	imagerel $LN22+280
	DD	imagerel $unwind$??$Comba3@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$03$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@V?$CombaT@$01@@@Z DD imagerel $LN10
	DD	imagerel $LN10+160
	DD	imagerel $unwind$??$Comba2@$03$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@V?$CombaT@$01@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$02$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@2V?$CombaT@$01@@@Z DD imagerel $LN10
	DD	imagerel $LN10+160
	DD	imagerel $unwind$??$Comba2@$02$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@2V?$CombaT@$01@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$00$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$03@@2@Z DD imagerel $LN8
	DD	imagerel $LN8+104
	DD	imagerel $unwind$??$Comba2@$00$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$03@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$07@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@3@Z DD imagerel $LN76
	DD	imagerel $LN76+975
	DD	imagerel $unwind$??$Comba1@$07@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@3@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$05$00$05@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$00@@2@Z DD imagerel $LN18
	DD	imagerel $LN18+292
	DD	imagerel $unwind$??$Comba2@$05$00$05@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$00@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$03$01$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@2@Z DD imagerel $LN14
	DD	imagerel $LN14+226
	DD	imagerel $unwind$??$Comba2@$03$01$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba3@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z DD imagerel $LN32
	DD	imagerel $LN32+410
	DD	imagerel $unwind$??$Comba3@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$03$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@V?$CombaT@$02@@@Z DD imagerel $LN12
	DD	imagerel $LN12+194
	DD	imagerel $unwind$??$Comba2@$03$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@V?$CombaT@$02@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$01$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$02@@2@Z DD imagerel $LN10
	DD	imagerel $LN10+156
	DD	imagerel $unwind$??$Comba2@$01$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$02@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$07$06@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$06@@@Z DD imagerel $LN94
	DD	imagerel $LN94+1226
	DD	imagerel $unwind$??$Comba1@$07$06@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$06@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$04$00$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$00@@2@Z DD imagerel $LN16
	DD	imagerel $LN16+258
	DD	imagerel $unwind$??$Comba2@$04$00$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$00@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba3@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z DD imagerel $LN44
	DD	imagerel $LN44+581
	DD	imagerel $unwind$??$Comba3@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$02$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$01@@2@Z DD imagerel $LN12
	DD	imagerel $LN12+187
	DD	imagerel $unwind$??$Comba2@$02$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$01@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$00$02$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$02@@2@Z DD imagerel $LN8
	DD	imagerel $LN8+104
	DD	imagerel $unwind$??$Comba2@$00$02$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$02@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z DD imagerel $LN110
	DD	imagerel $LN110+1450
	DD	imagerel $unwind$??$Comba1@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@3@Z DD imagerel $LN46
	DD	imagerel $LN46+581
	DD	imagerel $unwind$??$Comba1@$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@3@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$03$00$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$00@@2@Z DD imagerel $LN14
	DD	imagerel $LN14+217
	DD	imagerel $unwind$??$Comba2@$03$00$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$00@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$01$01$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@22@Z DD imagerel $LN10
	DD	imagerel $LN10+159
	DD	imagerel $unwind$??$Comba2@$01$01$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@22@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z DD imagerel $LN124
	DD	imagerel $LN124+1628
	DD	imagerel $unwind$??$Comba1@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$05$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$04@@@Z DD imagerel $LN60
	DD	imagerel $LN60+755
	DD	imagerel $unwind$??$Comba1@$05$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$04@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$02$00$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$00@@2@Z DD imagerel $LN12
	DD	imagerel $LN12+193
	DD	imagerel $unwind$??$Comba2@$02$00$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$00@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$00$01$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$01@@2@Z DD imagerel $LN8
	DD	imagerel $LN8+104
	DD	imagerel $unwind$??$Comba2@$00$01$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$01@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z DD imagerel $LN136
	DD	imagerel $LN136+1785
	DD	imagerel $unwind$??$Comba1@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z DD imagerel $LN72
	DD	imagerel $LN72+913
	DD	imagerel $unwind$??$Comba1@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$01$00$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$00@@2@Z DD imagerel $LN10
	DD	imagerel $LN10+159
	DD	imagerel $unwind$??$Comba2@$01$00$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$00@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z DD imagerel $LN146
	DD	imagerel $LN146+1913
	DD	imagerel $unwind$??$Comba1@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z DD imagerel $LN82
	DD	imagerel $LN82+1042
	DD	imagerel $unwind$??$Comba1@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba2@$00$00$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@22@Z DD imagerel $LN8
	DD	imagerel $LN8+104
	DD	imagerel $unwind$??$Comba2@$00$00$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@22@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z DD imagerel $LN154
	DD	imagerel $LN154+2010
	DD	imagerel $unwind$??$Comba1@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z DD imagerel $LN90
	DD	imagerel $LN90+1137
	DD	imagerel $unwind$??$Comba1@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z DD imagerel $LN160
	DD	imagerel $LN160+2076
	DD	imagerel $unwind$??$Comba1@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$Comba1@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z DD imagerel $LN96
	DD	imagerel $LN96+1204
	DD	imagerel $unwind$??$Comba1@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CombaMul@$07@@YAXPEB_K0PEA_K@Z DD imagerel $LN162
	DD	imagerel $LN162+1778
	DD	imagerel $unwind$??$CombaMul@$07@@YAXPEB_K0PEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CombaMul@$05@@YAXPEB_K0PEA_K@Z DD imagerel $LN98
	DD	imagerel $LN98+1024
	DD	imagerel $unwind$??$CombaMul@$05@@YAXPEB_K0PEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6$$BY0CH@$$CBD@Recorder@cat@@QEAAAEAV01@AEAY0CH@$$CBD@Z DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$??$?6$$BY0CH@$$CBD@Recorder@cat@@QEAAAEAV01@AEAY0CH@$$CBD@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z DD imagerel $LN67
	DD	imagerel $LN67+99
	DD	imagerel $unwind$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z
$pdata$2$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z DD imagerel $LN67+99
	DD	imagerel $LN67+488
	DD	imagerel $chain$2$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z
$pdata$4$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z DD imagerel $LN67+488
	DD	imagerel $LN67+566
	DD	imagerel $chain$4$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z
$pdata$6$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z DD imagerel $LN67+566
	DD	imagerel $LN67+575
	DD	imagerel $chain$6$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z
$pdata$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN47
	DD	imagerel $LN47+30
	DD	imagerel $unwind$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z
$pdata$0$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN47+30
	DD	imagerel $LN47+235
	DD	imagerel $chain$0$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z
$pdata$1$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN47+235
	DD	imagerel $LN47+429
	DD	imagerel $chain$1$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z
$pdata$2$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN47+429
	DD	imagerel $LN47+489
	DD	imagerel $chain$2$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z
$pdata$3$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN47+489
	DD	imagerel $LN47+591
	DD	imagerel $chain$3$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z
$pdata$?Multiply@BigRTL@cat@@QEAAXPEB_K0PEA_K@Z DD imagerel $LN20
	DD	imagerel $LN20+659
	DD	imagerel $unwind$?Multiply@BigRTL@cat@@QEAAXPEB_K0PEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SchoolbookMultiply4@@YAXPEB_K0PEA_K@Z DD imagerel $LN4
	DD	imagerel $LN4+505
	DD	imagerel $unwind$?SchoolbookMultiply4@@YAXPEB_K0PEA_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?MultiplyXAdd@BigRTL@cat@@KA_KHPEB_K_K0PEA_K@Z DD imagerel $LN12
	DD	imagerel $LN12+156
	DD	imagerel $unwind$?MultiplyXAdd@BigRTL@cat@@KA_KHPEB_K_K0PEA_K@Z
$pdata$?MultiplyX@BigRTL@cat@@KA_KHPEB_K_KPEA_K@Z DD imagerel $LN12
	DD	imagerel $LN12+92
	DD	imagerel $unwind$?MultiplyX@BigRTL@cat@@KA_KHPEB_K_KPEA_K@Z
$pdata$?MultiplyX@BigRTL@cat@@QEAA_KPEB_K_KPEA_K@Z DD imagerel $LN14
	DD	imagerel $LN14+97
	DD	imagerel $unwind$?MultiplyX@BigRTL@cat@@QEAA_KPEB_K_KPEA_K@Z
$pdata$?Subtract@BigRTL@cat@@KAEHPEB_K0PEA_K@Z DD imagerel $LN16
	DD	imagerel $LN16+136
	DD	imagerel $unwind$?Subtract@BigRTL@cat@@KAEHPEB_K0PEA_K@Z
$pdata$?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z DD imagerel $LN12
	DD	imagerel $LN12+101
	DD	imagerel $unwind$?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z
$pdata$1$?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z DD imagerel $LN12+101
	DD	imagerel $LN12+170
	DD	imagerel $chain$1$?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z
$pdata$2$?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z DD imagerel $LN12+170
	DD	imagerel $LN12+199
	DD	imagerel $chain$2$?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z
$pdata$?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z DD imagerel $LN14
	DD	imagerel $LN14+78
	DD	imagerel $unwind$?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z
$pdata$1$?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z DD imagerel $LN14+78
	DD	imagerel $LN14+154
	DD	imagerel $chain$1$?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z
$pdata$2$?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z DD imagerel $LN14+154
	DD	imagerel $LN14+174
	DD	imagerel $chain$2$?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z
$pdata$?DoubleAdd@BigRTL@cat@@KA_KHPEB_K0PEA_K@Z DD imagerel $LN12
	DD	imagerel $LN12+153
	DD	imagerel $unwind$?DoubleAdd@BigRTL@cat@@KA_KHPEB_K0PEA_K@Z
$pdata$?Add@BigRTL@cat@@KAEHPEB_K0PEA_K@Z DD imagerel $LN14
	DD	imagerel $LN14+108
	DD	imagerel $unwind$?Add@BigRTL@cat@@KAEHPEB_K0PEA_K@Z
$pdata$??0BigRTL@cat@@QEAA@HH@Z DD imagerel $LN17
	DD	imagerel $LN17+181
	DD	imagerel $unwind$??0BigRTL@cat@@QEAA@HH@Z
$pdata$?Double@BigRTL@cat@@QEAAEPEB_KPEA_K@Z DD imagerel $LN11
	DD	imagerel $LN11+93
	DD	imagerel $unwind$?Double@BigRTL@cat@@QEAAEPEB_KPEA_K@Z
$pdata$?Load@BigRTL@cat@@QEAAXPEBXHPEA_K@Z DD imagerel $LN32
	DD	imagerel $LN32+187
	DD	imagerel $unwind$?Load@BigRTL@cat@@QEAAXPEBXHPEA_K@Z
$pdata$?MulMod@BigRTL@cat@@QEAAXPEB_K00PEA_K@Z DD imagerel $LN6
	DD	imagerel $LN6+81
	DD	imagerel $unwind$?MulMod@BigRTL@cat@@QEAAXPEB_K00PEA_K@Z
$pdata$?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z DD imagerel $LN16
	DD	imagerel $LN16+122
	DD	imagerel $unwind$?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z
$pdata$??1BigRTL@cat@@QEAA@XZ DD imagerel $LN11
	DD	imagerel $LN11+21
	DD	imagerel $unwind$??1BigRTL@cat@@QEAA@XZ
$pdata$0$??1BigRTL@cat@@QEAA@XZ DD imagerel $LN11+21
	DD	imagerel $LN11+71
	DD	imagerel $chain$0$??1BigRTL@cat@@QEAA@XZ
$pdata$1$??1BigRTL@cat@@QEAA@XZ DD imagerel $LN11+71
	DD	imagerel $LN11+77
	DD	imagerel $chain$1$??1BigRTL@cat@@QEAA@XZ
$pdata$?Save@BigRTL@cat@@QEAAXPEB_KPEAXH@Z DD imagerel $LN31
	DD	imagerel $LN31+183
	DD	imagerel $unwind$?Save@BigRTL@cat@@QEAAXPEB_KPEAXH@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SchoolbookMultiply4@@YAXPEB_K0PEA_K@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
xdata	SEGMENT
$unwind$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z DD 061001H
	DD	0d00c7210H
	DD	07008c00aH
	DD	030066007H
$chain$2$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z DD 069b21H
	DD	07e49bH
	DD	0f5490H
	DD	06f405H
	DD	imagerel $LN67
	DD	imagerel $LN67+99
	DD	imagerel $unwind$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z
$chain$4$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z DD 020021H
	DD	06f400H
	DD	imagerel $LN67
	DD	imagerel $LN67+99
	DD	imagerel $unwind$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z
$chain$6$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z DD 020021H
	DD	06f400H
	DD	imagerel $LN67
	DD	imagerel $LN67+99
	DD	imagerel $unwind$?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z
$unwind$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z DD 071201H
	DD	0f00e0212H
	DD	0c00ae00cH
	DD	060077008H
	DD	03006H
$chain$0$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z DD 020521H
	DD	0b5405H
	DD	imagerel $LN47
	DD	imagerel $LN47+30
	DD	imagerel $unwind$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z
$chain$1$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z DD 020421H
	DD	0d404H
	DD	imagerel $LN47+30
	DD	imagerel $LN47+235
	DD	imagerel $chain$0$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z
$chain$2$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z DD 021H
	DD	imagerel $LN47+30
	DD	imagerel $LN47+235
	DD	imagerel $chain$0$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z
$chain$3$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z DD 021H
	DD	imagerel $LN47
	DD	imagerel $LN47+30
	DD	imagerel $unwind$?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z
$unwind$?Multiply@BigRTL@cat@@QEAAXPEB_K0PEA_K@Z DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0f0145218H
	DD	07010e012H
$unwind$?MultiplyXAdd@BigRTL@cat@@KA_KHPEB_K_K0PEA_K@Z DD 081401H
	DD	047414H
	DD	03640fH
	DD	02540aH
	DD	013405H
$unwind$?MultiplyX@BigRTL@cat@@KA_KHPEB_K_KPEA_K@Z DD 020501H
	DD	013405H
$unwind$?MultiplyX@BigRTL@cat@@QEAA_KPEB_K_KPEA_K@Z DD 040a01H
	DD	02740aH
	DD	013405H
$unwind$?Subtract@BigRTL@cat@@KAEHPEB_K0PEA_K@Z DD 040a01H
	DD	02740aH
	DD	013405H
$unwind$?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z DD 064701H
	DD	077447H
	DD	08340aH
	DD	06006320aH
$chain$1$?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z DD 020521H
	DD	065405H
	DD	imagerel $LN12
	DD	imagerel $LN12+101
	DD	imagerel $unwind$?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z
$chain$2$?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z DD 021H
	DD	imagerel $LN12
	DD	imagerel $LN12+101
	DD	imagerel $unwind$?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z
$unwind$?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z DD 043a01H
	DD	06343aH
	DD	070023206H
$chain$1$?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z DD 020521H
	DD	076405H
	DD	imagerel $LN14
	DD	imagerel $LN14+78
	DD	imagerel $unwind$?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z
$chain$2$?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z DD 021H
	DD	imagerel $LN14
	DD	imagerel $LN14+78
	DD	imagerel $unwind$?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z
$unwind$?DoubleAdd@BigRTL@cat@@KA_KHPEB_K0PEA_K@Z DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
$unwind$?Add@BigRTL@cat@@KAEHPEB_K0PEA_K@Z DD 020501H
	DD	013405H
$unwind$??0BigRTL@cat@@QEAA@HH@Z DD 051a11H
	DD	026341aH
	DD	0240109H
	DD	07002H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0BigRTL@cat@@QEAA@HH@Z
$stateUnwindMap$??0BigRTL@cat@@QEAA@HH@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0BigRTL@cat@@QEAA@HH@Z@4HA
$ip2state$??0BigRTL@cat@@QEAA@HH@Z DD imagerel ??0BigRTL@cat@@QEAA@HH@Z
	DD	0ffffffffH
	DD	imagerel ??0BigRTL@cat@@QEAA@HH@Z+127
	DD	00H
	DD	imagerel ??0BigRTL@cat@@QEAA@HH@Z+145
	DD	0ffffffffH
$unwind$?Double@BigRTL@cat@@QEAAEPEB_KPEA_K@Z DD 020501H
	DD	013405H
$unwind$?Load@BigRTL@cat@@QEAAXPEBXHPEA_K@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$?MulMod@BigRTL@cat@@QEAAXPEB_K00PEA_K@Z DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
$unwind$?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z DD 040a01H
	DD	02740aH
	DD	013405H
$unwind$??1BigRTL@cat@@QEAA@XZ DD 020601H
	DD	070023206H
$chain$0$??1BigRTL@cat@@QEAA@XZ DD 020521H
	DD	063405H
	DD	imagerel $LN11
	DD	imagerel $LN11+21
	DD	imagerel $unwind$??1BigRTL@cat@@QEAA@XZ
$chain$1$??1BigRTL@cat@@QEAA@XZ DD 021H
	DD	imagerel $LN11
	DD	imagerel $LN11+21
	DD	imagerel $unwind$??1BigRTL@cat@@QEAA@XZ
$unwind$?Save@BigRTL@cat@@QEAAXPEB_KPEAXH@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6$$BY0CH@$$CBD@Recorder@cat@@QEAAAEAV01@AEAY0CH@$$CBD@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CombaMul@$05@@YAXPEB_K0PEA_K@Z DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CombaMul@$07@@YAXPEB_K0PEA_K@Z DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$00$00$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@22@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$01$00$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$00@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$00$01$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$01@@2@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$02$00$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$00@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$05$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$04@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$01$01$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@22@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$03$00$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$00@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@3@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$00$02$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$02@@2@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$02$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$01@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba3@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$04$00$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$00@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$07$06@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$06@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$01$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$02@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$03$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@V?$CombaT@$02@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba3@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$03$01$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$05$00$05@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$00@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba1@$07@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@3@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$00$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$03@@2@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$02$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@2V?$CombaT@$01@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$03$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@V?$CombaT@$01@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba3@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z DD 091601H
	DD	057416H
	DD	046416H
	DD	035416H
	DD	023416H
	DD	0e016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$02$02$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@22@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$04$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$01@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba3@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$01$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@V?$CombaT@$00@@@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$02$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@V?$CombaT@$00@@@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$03$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$00@@@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba3@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z DD 091601H
	DD	057416H
	DD	046416H
	DD	035416H
	DD	023416H
	DD	0e016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$01$03$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$03$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$05$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$01@@V?$CombaT@$04@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba3@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$00$04$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$04@@2@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$02$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$04$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$02@@V?$CombaT@$03@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$05$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$02@@V?$CombaT@$03@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba3@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$01$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$04@@2@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$03$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$02@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$04$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$03@@V?$CombaT@$02@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$05$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$03@@V?$CombaT@$02@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba3@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z DD 0a1801H
	DD	067418H
	DD	056418H
	DD	045418H
	DD	033418H
	DD	0e016f018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$00$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$05@@2@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$02$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$04@@V?$CombaT@$01@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$03$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$04@@V?$CombaT@$01@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$04$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$04@@2V?$CombaT@$01@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$05$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$04@@V?$CombaT@$01@@@Z DD 081401H
	DD	04e414H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba3@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z DD 091601H
	DD	057416H
	DD	046416H
	DD	035416H
	DD	023416H
	DD	0e016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$01$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$05@@V?$CombaT@$00@@@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$02$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$05@@V?$CombaT@$00@@@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$03$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$05@@V?$CombaT@$00@@@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$04$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$05@@V?$CombaT@$00@@@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba2@$05$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$05@@2V?$CombaT@$00@@@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$Comba3@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z DD 091601H
	DD	057416H
	DD	046416H
	DD	035416H
	DD	023416H
	DD	0e016H
	ORG $+1614
$cppxdata$??0BigRTL@cat@@QEAA@HH@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0BigRTL@cat@@QEAA@HH@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0BigRTL@cat@@QEAA@HH@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\io\save.inc
_TEXT	SEGMENT
this$dead$ = 48
in_leg$ = 56
out$ = 64
bytes$ = 72
?Save@BigRTL@cat@@QEAAXPEB_KPEAXH@Z PROC		; cat::BigRTL::Save

; 34   : {

$LN31:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 35   :     // Prepare to copy
; 36   :     Leg *out_leg = (Leg*)out;
; 37   :     int ii, legs = bytes / sizeof(Leg);

	movsxd	rdi, r9d
	mov	rbx, rdx
	mov	rax, rdi
	shr	rax, 3

; 38   : 
; 39   :     // Copy 4 legs at a time
; 40   :     for (ii = 4; ii <= legs; ii += 4)

	movsxd	r10, eax
	cmp	r10, 4
	jl	SHORT $LN6@Save
	mov	r11, rdx
	mov	rdx, r10
	mov	r9, r8
	sub	r11, r8
	shr	rdx, 2
$LL8@Save:

; 41   :     {
; 42   :         out_leg[ii - 4] = getLE(in_leg[ii - 4]);

	mov	rcx, QWORD PTR [r11+r9]
	lea	r9, QWORD PTR [r9+32]
	mov	QWORD PTR [r9-32], rcx

; 43   :         out_leg[ii - 3] = getLE(in_leg[ii - 3]);

	mov	rcx, QWORD PTR [r11+r9-24]
	mov	QWORD PTR [r9-24], rcx

; 44   :         out_leg[ii - 2] = getLE(in_leg[ii - 2]);

	mov	rcx, QWORD PTR [r11+r9-16]
	mov	QWORD PTR [r9-16], rcx

; 45   :         out_leg[ii - 1] = getLE(in_leg[ii - 1]);

	mov	rcx, QWORD PTR [r11+r9-8]
	mov	QWORD PTR [r9-8], rcx
	dec	rdx
	jne	SHORT $LL8@Save
$LN6@Save:

; 46   :     }
; 47   : 
; 48   :     // Copy remaining legs
; 49   :     switch (legs % 4)

	and	eax, -2147483645			; ffffffff80000003H
	jge	SHORT $LN29@Save
	dec	eax
	or	eax, -4
	inc	eax
$LN29@Save:
	dec	eax
	je	SHORT $LN1@Save
	dec	eax
	je	SHORT $LN2@Save
	dec	eax
	jne	SHORT $LN4@Save

; 50   :     {
; 51   :     case 3: out_leg[legs - 3] = getLE(in_leg[legs - 3]);

	mov	rax, QWORD PTR [rbx+r10*8-24]
	mov	QWORD PTR [r8+r10*8-24], rax
$LN2@Save:

; 52   :     case 2: out_leg[legs - 2] = getLE(in_leg[legs - 2]);

	mov	rax, QWORD PTR [rbx+r10*8-16]
	mov	QWORD PTR [r8+r10*8-16], rax
$LN1@Save:

; 53   :     case 1: out_leg[legs - 1] = getLE(in_leg[legs - 1]);

	mov	rax, QWORD PTR [rbx+r10*8-8]
	mov	QWORD PTR [r8+r10*8-8], rax
$LN4@Save:

; 54   :     }
; 55   : 
; 56   :     // Zero remaining buffer bytes
; 57   :     memset(&out_leg[legs], 0, bytes - legs * sizeof(Leg));

	lea	rax, QWORD PTR [r10*8]
	xor	edx, edx
	sub	rdi, rax
	lea	rcx, QWORD PTR [rax+r8]
	mov	r8, rdi

; 58   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 54   :     }
; 55   : 
; 56   :     // Zero remaining buffer bytes
; 57   :     memset(&out_leg[legs], 0, bytes - legs * sizeof(Leg));

	jmp	memset
?Save@BigRTL@cat@@QEAAXPEB_KPEAXH@Z ENDP		; cat::BigRTL::Save
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
_TEXT	SEGMENT
this$ = 8
reg_index$ = 16
?Get@BigRTL@cat@@QEAAPEA_KH@Z PROC			; cat::BigRTL::Get

; 65   :     return &library_memory[library_legs * reg_index];

	mov	eax, DWORD PTR [rcx+4]
	imul	eax, edx
	movsxd	rdx, eax
	mov	rax, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rax+rdx*8]

; 66   : }

	ret	0
?Get@BigRTL@cat@@QEAAPEA_KH@Z ENDP			; cat::BigRTL::Get
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\include\cat\mem\iallocator.hpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
_TEXT	SEGMENT
this$ = 48
??1BigRTL@cat@@QEAA@XZ PROC				; cat::BigRTL::~BigRTL

; 54   : {

$LN11:
	push	rdi
	sub	rsp, 32					; 00000020H

; 55   :     if (library_memory)

	mov	rdi, QWORD PTR [rcx+8]
	mov	rdx, rcx
	test	rdi, rdi
	je	SHORT $LN6@BigRTL

; 58   :         CAT_SECURE_CLR(library_memory, library_legs * library_regs * sizeof(Leg));

	mov	eax, DWORD PTR [rcx+4]
	mov	QWORD PTR [rsp+48], rbx
	imul	eax, DWORD PTR [rcx]
	movsxd	rcx, eax
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h

; 17792:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

	xor	eax, eax
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 58   :         CAT_SECURE_CLR(library_memory, library_legs * library_regs * sizeof(Leg));

	shl	rcx, 3
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h

; 17792:     __stosb((PBYTE )((DWORD64)vptr), 0, cnt);

	rep stosb
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 59   :         AlignedAllocator::ref()->Delete(library_memory);

	mov	rbx, QWORD PTR [rdx+8]
	call	?ref@?$Singleton@VAlignedAllocator@cat@@@cat@@SAPEAVAlignedAllocator@2@XZ ; cat::Singleton<cat::AlignedAllocator>::ref
; File c:\users\jakez\desktop\libcatid\libcatid-master\include\cat\mem\iallocator.hpp

; 165  : 		if (ptr)

	test	rbx, rbx
	je	SHORT $LN9@BigRTL

; 166  : 		{
; 167  : 			ptr->~T();
; 168  : 			Release(ptr);

	mov	rdi, QWORD PTR [rax]
	mov	rdx, rbx
	mov	rcx, rax
	call	QWORD PTR [rdi+32]
$LN9@BigRTL:
	mov	rbx, QWORD PTR [rsp+48]
$LN6@BigRTL:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 61   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1BigRTL@cat@@QEAA@XZ ENDP				; cat::BigRTL::~BigRTL
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
_TEXT	SEGMENT
this$ = 8
in_reg$ = 16
out_reg$ = 24
?CopyX@BigRTL@cat@@QEAAX_KPEA_K@Z PROC			; cat::BigRTL::CopyX

; 75   :     // Set low leg to input, zero the rest
; 76   :     out_reg[0] = in_reg;

	mov	QWORD PTR [r8], rdx

; 77   :     CAT_CLR(&out_reg[1], (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rcx+4]
	mov	r9, r8
	dec	eax
	lea	rcx, QWORD PTR [r9+8]
	xor	edx, edx
	movsxd	r8, eax
	shl	r8, 3
	jmp	memset
?CopyX@BigRTL@cat@@QEAAX_KPEA_K@Z ENDP			; cat::BigRTL::CopyX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\compare.inc
_TEXT	SEGMENT
this$ = 8
in$ = 16
?IsZero@BigRTL@cat@@QEAA_NPEB_K@Z PROC			; cat::BigRTL::IsZero

; 95   :     for (int ii = 0; ii < library_legs; ++ii)

	movsxd	r8, DWORD PTR [rcx+4]
	xor	eax, eax
	test	r8, r8
	jle	SHORT $LN2@IsZero
	npad	5
$LL4@IsZero:

; 96   :         if (in[ii]) return false;

	cmp	QWORD PTR [rdx+rax*8], 0
	jne	SHORT $LN8@IsZero

; 95   :     for (int ii = 0; ii < library_legs; ++ii)

	inc	rax
	cmp	rax, r8
	jl	SHORT $LL4@IsZero
$LN2@IsZero:

; 97   : 
; 98   :     return true;

	mov	al, 1

; 99   : }

	ret	0
$LN8@IsZero:

; 96   :         if (in[ii]) return false;

	xor	al, al

; 99   : }

	ret	0
?IsZero@BigRTL@cat@@QEAA_NPEB_K@Z ENDP			; cat::BigRTL::IsZero
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\compare.inc
_TEXT	SEGMENT
this$ = 8
in_a$ = 16
in_b$ = 24
?Less@BigRTL@cat@@QEAA_NPEB_K0@Z PROC			; cat::BigRTL::Less

; 57   :     int legs = library_legs;

	movsxd	r9, DWORD PTR [rcx+4]
	mov	r10, rdx

; 58   : 
; 59   :     while (legs-- > 0)

	test	r9, r9
	jle	SHORT $LN10@Less
	lea	rax, QWORD PTR [r8+r9*8]
	sub	r10, r8
	npad	13
$LL4@Less:

; 60   :     {
; 61   :         Leg a = in_a[legs];

	mov	rcx, QWORD PTR [r10+rax-8]

; 62   :         Leg b = in_b[legs];

	mov	rdx, QWORD PTR [rax-8]
	sub	rax, 8
	dec	r9

; 63   :         if (a > b) return false;

	cmp	rcx, rdx
	ja	SHORT $LN10@Less

; 64   :         if (a < b) return true;

	jb	SHORT $LN9@Less

; 58   : 
; 59   :     while (legs-- > 0)

	test	r9, r9
	jg	SHORT $LL4@Less
$LN10@Less:

; 65   :     }
; 66   : 
; 67   :     return false;

	xor	al, al

; 68   : }

	ret	0
$LN9@Less:

; 64   :         if (a < b) return true;

	mov	al, 1

; 68   : }

	ret	0
?Less@BigRTL@cat@@QEAA_NPEB_K0@Z ENDP			; cat::BigRTL::Less
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtract.inc
_TEXT	SEGMENT
this$ = 8
in_a$ = 16
in_b$ = 24
out$ = 32
?Subtract@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z PROC		; cat::BigRTL::Subtract

; 34   :     return Subtract(library_legs, in_a, in_b, out);

	mov	ecx, DWORD PTR [rcx+4]
	jmp	?Subtract@BigRTL@cat@@KAEHPEB_K0PEA_K@Z	; cat::BigRTL::Subtract
?Subtract@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z ENDP		; cat::BigRTL::Subtract
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\add.inc
_TEXT	SEGMENT
this$ = 8
in_a$ = 16
in_b$ = 24
out$ = 32
?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z PROC		; cat::BigRTL::Add

; 33   : {

$LN16:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 34   :     return Add(library_legs, in_a, in_b, out);

	movsxd	r11, DWORD PTR [rcx+4]

; 36   : 
; 37   : u8 CAT_FASTCALL BigRTL::Add(int legs, const Leg *in_a, const Leg *in_b, Leg *out)
; 38   : {
; 39   : #if !defined(CAT_NO_LEGPAIR)
; 40   : 
; 41   :     // Add first two legs without a carry-in
; 42   :     LegPair sum = (LegPair)in_a[0] + in_b[0];
; 43   :     out[0] = (Leg)sum;
; 44   : 
; 45   :     // Add remaining legs
; 46   :     for (int ii = 1; ii < legs; ++ii)
; 47   :     {
; 48   :         sum = ((sum >> CAT_LEG_BITS) + in_a[ii]) + in_b[ii];
; 49   :         out[ii] = (Leg)sum;
; 50   :     }
; 51   : 
; 52   :     return (u8)(sum >> CAT_LEG_BITS);
; 53   : 
; 54   : #else
; 55   : 
; 56   :     // Add first two legs without a carry-in
; 57   :     Leg t = in_a[0];
; 58   :     Leg s = t + in_b[0];

	mov	r10, QWORD PTR [r8]

; 33   : {

	mov	rdi, rdx

; 36   : 
; 37   : u8 CAT_FASTCALL BigRTL::Add(int legs, const Leg *in_a, const Leg *in_b, Leg *out)
; 38   : {
; 39   : #if !defined(CAT_NO_LEGPAIR)
; 40   : 
; 41   :     // Add first two legs without a carry-in
; 42   :     LegPair sum = (LegPair)in_a[0] + in_b[0];
; 43   :     out[0] = (Leg)sum;
; 44   : 
; 45   :     // Add remaining legs
; 46   :     for (int ii = 1; ii < legs; ++ii)
; 47   :     {
; 48   :         sum = ((sum >> CAT_LEG_BITS) + in_a[ii]) + in_b[ii];
; 49   :         out[ii] = (Leg)sum;
; 50   :     }
; 51   : 
; 52   :     return (u8)(sum >> CAT_LEG_BITS);
; 53   : 
; 54   : #else
; 55   : 
; 56   :     // Add first two legs without a carry-in
; 57   :     Leg t = in_a[0];
; 58   :     Leg s = t + in_b[0];

	add	r10, QWORD PTR [rdx]

; 59   :     u8 c = s < t;
; 60   : 
; 61   :     out[0] = s;
; 62   : 
; 63   :     // Add remaining legs
; 64   :     for (int ii = 1; ii < legs; ++ii)

	mov	rax, r11
	cmp	r10, QWORD PTR [rdx]
	mov	QWORD PTR [r9], r10
	setb	bl
	cmp	r11, 1
	jle	SHORT $LN14@Add
	sub	rdi, r8

; 34   :     return Add(library_legs, in_a, in_b, out);

	lea	rcx, QWORD PTR [r8+8]

; 59   :     u8 c = s < t;
; 60   : 
; 61   :     out[0] = s;
; 62   : 
; 63   :     // Add remaining legs
; 64   :     for (int ii = 1; ii < legs; ++ii)

	sub	r9, r8

; 34   :     return Add(library_legs, in_a, in_b, out);

	lea	r8, QWORD PTR [r11-1]
	npad	9
$LL5@Add:

; 65   :     {
; 66   :         // Calculate sum
; 67   :         Leg a = in_a[ii];

	mov	rdx, QWORD PTR [rdi+rcx]

; 68   :         Leg b = in_b[ii];
; 69   :         Leg sum = a + b + c;

	movzx	eax, bl
	add	rax, rdx
	add	rax, QWORD PTR [rcx]

; 70   : 
; 71   :         // Calculate carry
; 72   :         c = c ? sum <= a : sum < a;

	test	bl, bl
	je	SHORT $LN8@Add
	cmp	rax, rdx
	setbe	bl
	jmp	SHORT $LN9@Add
$LN8@Add:
	cmp	rax, rdx
	setb	bl
$LN9@Add:

; 73   : 
; 74   :         out[ii] = sum;

	mov	QWORD PTR [r9+rcx], rax
	add	rcx, 8
	dec	r8
	jne	SHORT $LL5@Add
$LN14@Add:

; 35   : }

	mov	rdi, QWORD PTR [rsp+16]
	movzx	eax, bl
	mov	rbx, QWORD PTR [rsp+8]
	ret	0
?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z ENDP		; cat::BigRTL::Add
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\mulmod.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\mulmod.inc
_TEXT	SEGMENT
this$ = 64
in_a$ = 72
in_b$ = 80
in_m$ = 88
r$ = 96
?MulMod@BigRTL@cat@@QEAAXPEB_K00PEA_K@Z PROC		; cat::BigRTL::MulMod

; 34   : {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 35   :     Leg *p = Get(library_regs - 5);

	mov	eax, DWORD PTR [rcx]
	mov	rsi, r9
	mov	rdi, rcx
	sub	eax, 5
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, DWORD PTR [rcx+4]
	movsxd	r10, eax
	mov	rax, QWORD PTR [rcx+8]
	lea	rbx, QWORD PTR [rax+r10*8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\mulmod.inc

; 37   : 	Multiply(in_a, in_b, p);

	mov	r9, rbx
	call	?Multiply@BigRTL@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigRTL::Multiply

; 38   : 	DivideProduct(p, in_m, p, r);

	mov	r9, rbx
	mov	r8, rsi
	mov	rdx, rbx
	mov	rcx, rdi

; 39   : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi

; 38   : 	DivideProduct(p, in_m, p, r);

	jmp	?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z ; cat::BigRTL::DivideProduct
?MulMod@BigRTL@cat@@QEAAXPEB_K00PEA_K@Z ENDP		; cat::BigRTL::MulMod
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\compare.inc
_TEXT	SEGMENT
this$ = 8
in$ = 16
x$dead$ = 24
?LessX@BigRTL@cat@@QEAA_NPEB_K_K@Z PROC			; cat::BigRTL::LessX

; 72   :     for (int ii = library_legs - 1; ii > 0; --ii)

	mov	eax, DWORD PTR [rcx+4]
	dec	eax
	cdqe
	test	rax, rax
	jle	SHORT $LN2@LessX
	npad	4
$LL4@LessX:

; 73   :         if (in[ii]) return false;

	cmp	QWORD PTR [rdx+rax*8], 0
	jne	SHORT $LN8@LessX

; 72   :     for (int ii = library_legs - 1; ii > 0; --ii)

	dec	rax
	test	rax, rax
	jg	SHORT $LL4@LessX
$LN2@LessX:

; 74   : 
; 75   :     return in[0] < x;

	xor	eax, eax
	cmp	QWORD PTR [rdx], 1000			; 000003e8H
	setb	al

; 76   : }

	ret	0
$LN8@LessX:

; 73   :         if (in[ii]) return false;

	xor	al, al

; 76   : }

	ret	0
?LessX@BigRTL@cat@@QEAA_NPEB_K_K@Z ENDP			; cat::BigRTL::LessX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\io\load.inc
_TEXT	SEGMENT
this$ = 48
in$ = 56
bytes$ = 64
out_leg$ = 72
?Load@BigRTL@cat@@QEAAXPEBXHPEA_K@Z PROC		; cat::BigRTL::Load

; 34   : {

$LN32:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 35   :     // Prepare to copy
; 36   :     Leg *in_leg = (Leg*)in;
; 37   :     int ii, legs = bytes / sizeof(Leg);

	movsxd	rbx, r8d
	mov	r11, rdx
	mov	rdi, rcx
	shr	rbx, 3

; 38   :     if (legs > library_legs) legs = library_legs;

	cmp	ebx, DWORD PTR [rcx+4]
	cmovg	ebx, DWORD PTR [rcx+4]

; 39   : 
; 40   :     // Copy 4 legs at a time
; 41   :     for (ii = 4; ii <= legs; ii += 4)

	movsxd	r10, ebx
	cmp	r10, 4
	jl	SHORT $LN6@Load
	mov	r8, r10
	sub	rdx, r9
	mov	rcx, r9
	shr	r8, 2
$LL8@Load:

; 42   :     {
; 43   :         out_leg[ii - 4] = getLE(in_leg[ii - 4]);

	mov	rax, QWORD PTR [rdx+rcx]
	lea	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rcx-32], rax

; 44   :         out_leg[ii - 3] = getLE(in_leg[ii - 3]);

	mov	rax, QWORD PTR [rdx+rcx-24]
	mov	QWORD PTR [rcx-24], rax

; 45   :         out_leg[ii - 2] = getLE(in_leg[ii - 2]);

	mov	rax, QWORD PTR [rdx+rcx-16]
	mov	QWORD PTR [rcx-16], rax

; 46   :         out_leg[ii - 1] = getLE(in_leg[ii - 1]);

	mov	rax, QWORD PTR [rdx+rcx-8]
	mov	QWORD PTR [rcx-8], rax
	dec	r8
	jne	SHORT $LL8@Load
$LN6@Load:

; 47   :     }
; 48   : 
; 49   :     // Copy remaining legs
; 50   :     switch (legs % 4)

	mov	eax, ebx
	and	eax, -2147483645			; ffffffff80000003H
	jge	SHORT $LN30@Load
	dec	eax
	or	eax, -4
	inc	eax
$LN30@Load:
	dec	eax
	je	SHORT $LN1@Load
	dec	eax
	je	SHORT $LN2@Load
	dec	eax
	jne	SHORT $LN4@Load

; 51   :     {
; 52   :     case 3: out_leg[legs - 3] = getLE(in_leg[legs - 3]);

	mov	rax, QWORD PTR [r11+r10*8-24]
	mov	QWORD PTR [r9+r10*8-24], rax
$LN2@Load:

; 53   :     case 2: out_leg[legs - 2] = getLE(in_leg[legs - 2]);

	mov	rax, QWORD PTR [r11+r10*8-16]
	mov	QWORD PTR [r9+r10*8-16], rax
$LN1@Load:

; 54   :     case 1: out_leg[legs - 1] = getLE(in_leg[legs - 1]);

	mov	rax, QWORD PTR [r11+r10*8-8]
	mov	QWORD PTR [r9+r10*8-8], rax
$LN4@Load:

; 55   :     }
; 56   : 
; 57   :     // Zero remaining buffer bytes
; 58   :     memset(&out_leg[legs], 0, (library_legs - legs) * sizeof(Leg));

	mov	eax, DWORD PTR [rdi+4]
	lea	rcx, QWORD PTR [r9+r10*8]
	xor	edx, edx
	sub	eax, ebx
	movsxd	r8, eax
	shl	r8, 3

; 59   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 55   :     }
; 56   : 
; 57   :     // Zero remaining buffer bytes
; 58   :     memset(&out_leg[legs], 0, (library_legs - legs) * sizeof(Leg));

	jmp	memset
?Load@BigRTL@cat@@QEAAXPEBXHPEA_K@Z ENDP		; cat::BigRTL::Load
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\double.inc
_TEXT	SEGMENT
this$ = 8
in$ = 16
out$ = 24
?Double@BigRTL@cat@@QEAAEPEB_KPEA_K@Z PROC		; cat::BigRTL::Double

; 33   : {

$LN11:
	mov	QWORD PTR [rsp+8], rbx

; 34   :     // Double low leg first
; 35   :     Leg last = in[0];

	mov	rax, QWORD PTR [rdx]

; 36   :     out[0] = last << 1;
; 37   : 
; 38   :     // Shift up the rest by 1 bit; actually pretty fast this way!
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	r10d, 1
	mov	r11, rdx
	lea	r9, QWORD PTR [rax+rax]
	mov	rbx, rcx
	mov	QWORD PTR [r8], r9
	cmp	DWORD PTR [rcx+4], r10d
	jle	SHORT $LN1@Double
	lea	r9, QWORD PTR [r8+8]
	sub	r11, r8
	npad	8
$LL3@Double:

; 40   :     {
; 41   :         Leg next = in[ii];

	mov	rdx, QWORD PTR [r11+r9]

; 42   :         out[ii] = (next << 1) | (last >> (CAT_LEG_BITS-1));

	shr	rax, 63					; 0000003fH
	inc	r10d
	lea	rcx, QWORD PTR [rdx+rdx]
	lea	r9, QWORD PTR [r9+8]
	or	rax, rcx
	mov	QWORD PTR [r9-8], rax

; 43   :         last = next;

	mov	rax, rdx
	cmp	r10d, DWORD PTR [rbx+4]
	jl	SHORT $LL3@Double
$LN1@Double:

; 44   :     }
; 45   : 
; 46   :     return (u8)(last >> (CAT_LEG_BITS-1));
; 47   : }

	mov	rbx, QWORD PTR [rsp+8]
	shr	rax, 63					; 0000003fH
	ret	0
?Double@BigRTL@cat@@QEAAEPEB_KPEA_K@Z ENDP		; cat::BigRTL::Double
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\compare.inc
_TEXT	SEGMENT
this$ = 8
in$ = 16
x$dead$ = 24
?GreaterX@BigRTL@cat@@QEAA_NPEB_K_K@Z PROC		; cat::BigRTL::GreaterX

; 49   :     for (int ii = library_legs - 1; ii > 0; --ii)

	mov	eax, DWORD PTR [rcx+4]
	dec	eax
	cdqe
	test	rax, rax
	jle	SHORT $LN2@GreaterX
	npad	4
$LL4@GreaterX:

; 50   :         if (in[ii]) return true;

	cmp	QWORD PTR [rdx+rax*8], 0
	jne	SHORT $LN8@GreaterX

; 49   :     for (int ii = library_legs - 1; ii > 0; --ii)

	dec	rax
	test	rax, rax
	jg	SHORT $LL4@GreaterX
$LN2@GreaterX:

; 51   : 
; 52   :     return in[0] > x;

	xor	eax, eax
	cmp	QWORD PTR [rdx], 1
	seta	al

; 53   : }

	ret	0
$LN8@GreaterX:

; 50   :         if (in[ii]) return true;

	mov	al, 1

; 53   : }

	ret	0
?GreaterX@BigRTL@cat@@QEAA_NPEB_K_K@Z ENDP		; cat::BigRTL::GreaterX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\include\cat\mem\iallocator.hpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\io\log.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\include\cat\io\log.hpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 304
regs$dead$ = 312
bits$ = 320
??0BigRTL@cat@@QEAA@HH@Z PROC				; cat::BigRTL::BigRTL

; 36   : {

$LN17:
	push	rdi
	sub	rsp, 288				; 00000120H
	mov	QWORD PTR $T1[rsp], -2
	mov	QWORD PTR [rsp+304], rbx
	mov	rdi, rcx

; 37   : 	_valid = false;

	mov	BYTE PTR [rcx+16], 0

; 38   : 
; 39   : 	library_legs = bits / (8 * sizeof(Leg));

	movsxd	rax, r8d
	shr	rax, 6
	mov	DWORD PTR [rcx+4], eax

; 40   :     library_regs = regs + BIG_OVERHEAD;

	mov	DWORD PTR [rcx], 183			; 000000b7H

; 43   : 	library_memory = AlignedAllocator::ref()->AcquireArray<Leg>(library_legs * library_regs);

	imul	ebx, eax, 183				; 000000b7H
	call	?ref@?$Singleton@VAlignedAllocator@cat@@@cat@@SAPEAVAlignedAllocator@2@XZ ; cat::Singleton<cat::AlignedAllocator>::ref
; File c:\users\jakez\desktop\libcatid\libcatid-master\include\cat\mem\iallocator.hpp

; 124  : 		return reinterpret_cast<T*>( Acquire(sizeof(T) * elements) );

	mov	r8, QWORD PTR [rax]
	lea	edx, DWORD PTR [rbx*8]
	mov	rcx, rax
	call	QWORD PTR [r8+16]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 43   : 	library_memory = AlignedAllocator::ref()->AcquireArray<Leg>(library_legs * library_regs);

	mov	QWORD PTR [rdi+8], rax

; 44   : 	if (!library_memory)

	test	rax, rax
	jne	SHORT $LN2@BigRTL

; 46   : 		CAT_FATAL("BigRTL") << "Unable to allocate leg array for maths";

	call	?ref@?$Singleton@VLog@cat@@@cat@@SAPEAVLog@2@XZ ; cat::Singleton<cat::Log>::ref
	cmp	DWORD PTR [rax+88], 4
	jg	SHORT $LN16@BigRTL
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\io\log.cpp

; 252  : {

	lea	rcx, QWORD PTR $T2[rsp+16]
	call	??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >

; 253  : 	_source = source;

	lea	rax, OFFSET FLAT:??_C@_06ODJDPAFC@BigRTL?$AA@
	mov	QWORD PTR $T2[rsp+8], rax

; 254  : 	_severity = severity;

	mov	DWORD PTR $T2[rsp], 4
; File c:\users\jakez\desktop\libcatid\libcatid-master\include\cat\io\log.hpp

; 140  : 		_msg << t;

	lea	rdx, OFFSET FLAT:??_C@_0CH@OJHHLGFI@Unable?5to?5allocate?5leg?5array?5for@
	lea	rcx, QWORD PTR $T2[rsp+16]
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	npad	1
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 46   : 		CAT_FATAL("BigRTL") << "Unable to allocate leg array for maths";

	lea	rcx, QWORD PTR $T2[rsp]
	call	??1Recorder@cat@@QEAA@XZ		; cat::Recorder::~Recorder

; 47   : 		return;

	jmp	SHORT $LN16@BigRTL
$LN2@BigRTL:

; 48   : 	}
; 49   : 
; 50   : 	_valid = true;

	mov	BYTE PTR [rdi+16], 1
$LN16@BigRTL:

; 51   : }

	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+304]
	add	rsp, 288				; 00000120H
	pop	rdi
	ret	0
??0BigRTL@cat@@QEAA@HH@Z ENDP				; cat::BigRTL::BigRTL
_TEXT	ENDS
; Function compile flags: /Ogtpy
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 304
regs$dead$ = 312
bits$ = 320
?dtor$0@?0???0BigRTL@cat@@QEAA@HH@Z@4HA PROC		; `cat::BigRTL::BigRTL'::`1'::dtor$0
	lea	rcx, QWORD PTR $T2[rdx]
	jmp	??1Recorder@cat@@QEAA@XZ		; cat::Recorder::~Recorder
?dtor$0@?0???0BigRTL@cat@@QEAA@HH@Z@4HA ENDP		; `cat::BigRTL::BigRTL'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
_TEXT	SEGMENT
this$ = 8
in_reg$ = 16
out_reg$ = 24
?Copy@BigRTL@cat@@QEAAXPEB_KPEA_K@Z PROC		; cat::BigRTL::Copy

; 69   : {

	mov	rax, r8

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rcx+4]
	shl	r8, 3
	mov	rcx, rax
	jmp	memcpy
?Copy@BigRTL@cat@@QEAAXPEB_KPEA_K@Z ENDP		; cat::BigRTL::Copy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
_TEXT	SEGMENT
this$ = 8
in_reg$ = 16
?LegsUsed@BigRTL@cat@@QEAAHPEB_K@Z PROC			; cat::BigRTL::LegsUsed

; 82   :     for (int legs = library_legs - 1; legs >= 0; --legs)

	mov	r8d, DWORD PTR [rcx+4]
	dec	r8d
	movsxd	rax, r8d
	js	SHORT $LN2@LegsUsed
	npad	4
$LL4@LegsUsed:

; 83   :         if (in_reg[legs]) return legs + 1;

	cmp	QWORD PTR [rdx+rax*8], 0
	jne	SHORT $LN8@LegsUsed

; 82   :     for (int legs = library_legs - 1; legs >= 0; --legs)

	dec	r8d
	dec	rax
	jns	SHORT $LL4@LegsUsed
$LN2@LegsUsed:

; 84   : 
; 85   :     return 0;

	xor	eax, eax

; 86   : }

	ret	0
$LN8@LegsUsed:

; 83   :         if (in_reg[legs]) return legs + 1;

	lea	eax, DWORD PTR [r8+1]

; 86   : }

	ret	0
?LegsUsed@BigRTL@cat@@QEAAHPEB_K@Z ENDP			; cat::BigRTL::LegsUsed
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\add.inc
_TEXT	SEGMENT
legs$ = 8
in_a$ = 16
in_b$ = 24
out$ = 32
?Add@BigRTL@cat@@KAEHPEB_K0PEA_K@Z PROC			; cat::BigRTL::Add

; 38   : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx

; 39   : #if !defined(CAT_NO_LEGPAIR)
; 40   : 
; 41   :     // Add first two legs without a carry-in
; 42   :     LegPair sum = (LegPair)in_a[0] + in_b[0];
; 43   :     out[0] = (Leg)sum;
; 44   : 
; 45   :     // Add remaining legs
; 46   :     for (int ii = 1; ii < legs; ++ii)
; 47   :     {
; 48   :         sum = ((sum >> CAT_LEG_BITS) + in_a[ii]) + in_b[ii];
; 49   :         out[ii] = (Leg)sum;
; 50   :     }
; 51   : 
; 52   :     return (u8)(sum >> CAT_LEG_BITS);
; 53   : 
; 54   : #else
; 55   : 
; 56   :     // Add first two legs without a carry-in
; 57   :     Leg t = in_a[0];

	mov	r10, QWORD PTR [rdx]

; 58   :     Leg s = t + in_b[0];

	mov	r11, QWORD PTR [r8]

; 59   :     u8 c = s < t;
; 60   : 
; 61   :     out[0] = s;
; 62   : 
; 63   :     // Add remaining legs
; 64   :     for (int ii = 1; ii < legs; ++ii)

	movsxd	rax, ecx
	add	r11, r10
	mov	rbx, rdx
	cmp	r11, r10
	mov	QWORD PTR [r9], r11
	setb	r10b
	cmp	rax, 1
	jle	SHORT $LN12@Add
	sub	rbx, r8
	lea	rcx, QWORD PTR [r8+8]
	sub	r9, r8
	lea	r8, QWORD PTR [rax-1]
$LL3@Add:

; 65   :     {
; 66   :         // Calculate sum
; 67   :         Leg a = in_a[ii];

	mov	rdx, QWORD PTR [rbx+rcx]

; 68   :         Leg b = in_b[ii];
; 69   :         Leg sum = a + b + c;

	movzx	eax, r10b
	add	rax, QWORD PTR [rcx]
	add	rax, rdx

; 70   : 
; 71   :         // Calculate carry
; 72   :         c = c ? sum <= a : sum < a;

	test	r10b, r10b
	je	SHORT $LN6@Add
	cmp	rax, rdx
	setbe	r10b
	jmp	SHORT $LN7@Add
$LN6@Add:
	cmp	rax, rdx
	setb	r10b
$LN7@Add:

; 73   : 
; 74   :         out[ii] = sum;

	mov	QWORD PTR [r9+rcx], rax
	add	rcx, 8
	dec	r8
	jne	SHORT $LL3@Add
$LN12@Add:

; 75   :     }
; 76   : 
; 77   :     return c;
; 78   : 
; 79   : #endif
; 80   : }

	mov	rbx, QWORD PTR [rsp+8]
	movzx	eax, r10b
	ret	0
?Add@BigRTL@cat@@KAEHPEB_K0PEA_K@Z ENDP			; cat::BigRTL::Add
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc
_TEXT	SEGMENT
this$ = 8
inout$ = 16
x$ = 24
?AddX@BigRTL@cat@@QEAAEPEA_K_K@Z PROC			; cat::BigRTL::AddX

; 34   :     // If the initial sum did not carry out, return 0
; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdx], r8
	mov	r9, rcx
	cmp	QWORD PTR [rdx], r8
	jb	SHORT $LN5@AddX
$LN9@AddX:

; 36   :         return 0;

	xor	al, al

; 43   : }

	ret	0
$LN5@AddX:

; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [r9+4], ecx
	jle	SHORT $LN2@AddX
	lea	rax, QWORD PTR [rdx+8]
	npad	3
$LL4@AddX:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN9@AddX

; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [r9+4]
	jl	SHORT $LL4@AddX
$LN2@AddX:

; 41   : 
; 42   :     return 1;

	mov	al, 1

; 43   : }

	ret	0
?AddX@BigRTL@cat@@QEAAEPEA_K_K@Z ENDP			; cat::BigRTL::AddX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\compare.inc
_TEXT	SEGMENT
this$ = 8
in$ = 16
x$ = 24
?EqualX@BigRTL@cat@@QEAA_NPEB_K_K@Z PROC		; cat::BigRTL::EqualX

; 85   :     if (in[0] != x) return false;

	cmp	QWORD PTR [rdx], r8
	je	SHORT $LN5@EqualX
$LN9@EqualX:
	xor	al, al

; 91   : }

	ret	0
$LN5@EqualX:

; 86   : 
; 87   :     for (int ii = 1; ii < library_legs; ++ii)

	movsxd	rcx, DWORD PTR [rcx+4]
	mov	eax, 1
	cmp	rax, rcx
	jge	SHORT $LN2@EqualX
$LL4@EqualX:

; 88   :         if (in[ii]) return false;

	cmp	QWORD PTR [rdx+rax*8], 0
	jne	SHORT $LN9@EqualX

; 86   : 
; 87   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	rax
	cmp	rax, rcx
	jl	SHORT $LL4@EqualX
$LN2@EqualX:

; 89   : 
; 90   :     return true;

	mov	al, 1

; 91   : }

	ret	0
?EqualX@BigRTL@cat@@QEAA_NPEB_K_K@Z ENDP		; cat::BigRTL::EqualX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\doubleadd.inc
_TEXT	SEGMENT
legs$ = 8
in_a$ = 16
in_b$ = 24
out$ = 32
?DoubleAdd@BigRTL@cat@@KA_KHPEB_K0PEA_K@Z PROC		; cat::BigRTL::DoubleAdd

; 39   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	rsi, r8

; 40   : #if !defined(CAT_NO_LEGPAIR)
; 41   : 
; 42   :     LegPair x = ((LegPair)in_a[0] << 1) + in_b[0];
; 43   :     out[0] = (Leg)x;
; 44   : 
; 45   :     for (int ii = 1; ii < legs; ++ii)
; 46   :     {
; 47   :         x = (x >> CAT_LEG_BITS) + ((LegPair)in_a[ii] << 1) + in_b[ii];
; 48   :         out[ii] = (Leg)x;
; 49   :     }
; 50   : 
; 51   :     return (Leg)(x >> CAT_LEG_BITS);
; 52   : 
; 53   : #else
; 54   : 
; 55   :     Leg p_hi;
; 56   : 
; 57   :     CAT_LEG_MULADD(in_a[0], 2, in_b[0], p_hi, out[0]);

	mov	eax, 2
	mov	r8, rdx
	mov	rbx, QWORD PTR [rsi]
	mov	rdi, r9
	mul	QWORD PTR [rdx]
	lea	r11, QWORD PTR [rax+rbx]
	mov	r10, rdx
	cmp	r11, rbx
	mov	QWORD PTR [r9], r11
	adc	r10, 0

; 58   : 
; 59   :     for (int ii = 1; ii < legs; ++ii)

	cmp	ecx, 1
	jle	SHORT $LN10@DoubleAdd
	sub	rsi, r8
	lea	r11, QWORD PTR [r8+8]
	lea	ebx, DWORD PTR [rcx-1]
	sub	rdi, r8
	npad	10
$LL3@DoubleAdd:

; 60   :         CAT_LEG_MULADD2(in_a[ii], 2, in_b[ii], p_hi, p_hi, out[ii]);

	mov	r9, QWORD PTR [rsi+r11]
	mov	eax, 2
	lea	r11, QWORD PTR [r11+8]
	mul	QWORD PTR [r11-8]
	lea	rcx, QWORD PTR [rax+r9]
	mov	rax, r10
	lea	r8, QWORD PTR [rcx+r10]
	xor	r10d, r10d
	cmp	rcx, r9
	setb	r10b
	cmp	r8, rax
	mov	QWORD PTR [rdi+r11-8], r8
	adc	r10, rdx
	dec	rbx
	jne	SHORT $LL3@DoubleAdd
$LN10@DoubleAdd:

; 61   : 
; 62   :     return p_hi;
; 63   : 
; 64   : #endif
; 65   : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rsi, QWORD PTR [rsp+16]
	mov	rdi, QWORD PTR [rsp+24]
	mov	rax, r10
	ret	0
?DoubleAdd@BigRTL@cat@@KA_KHPEB_K0PEA_K@Z ENDP		; cat::BigRTL::DoubleAdd
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\shift.inc
_TEXT	SEGMENT
legs$ = 48
in$ = 56
shift$ = 64
out$ = 72
?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z PROC		; cat::BigRTL::ShiftLeft

; 38   : {

$LN14:
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	r10d, r8d
	mov	rdi, r9
	mov	r11, rdx
	movsxd	r8, ecx

; 39   :     if (!shift)

	test	r10d, r10d
	jne	SHORT $LN4@ShiftLeft

; 40   :     {
; 41   :         memcpy(out, in, legs * sizeof(Leg));

	lea	r8, QWORD PTR [r8*8]
	mov	rcx, r9
	call	memcpy

; 42   :         return 0;

	xor	eax, eax

; 57   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN4@ShiftLeft:

; 43   :     }
; 44   : 
; 45   :     Leg carry = in[0];

	mov	rax, QWORD PTR [rdx]

; 46   : 
; 47   :     out[0] = carry << shift;

	mov	ecx, r10d
	mov	QWORD PTR [rsp+48], rbx
	mov	rdx, rax

; 48   : 
; 49   :     for (int ii = 1; ii < legs; ++ii)

	mov	ebx, 64					; 00000040H
	shl	rdx, cl
	mov	QWORD PTR [r9], rdx
	cmp	r8, 1
	jle	SHORT $LN1@ShiftLeft

; 50   :     {
; 51   :         Leg x = in[ii];
; 52   :         out[ii] = (x << shift) | (carry >> (CAT_LEG_BITS - shift));

	mov	QWORD PTR [rsp+56], rsi
	mov	esi, ebx
	add	r9, 8
	sub	esi, r10d
	sub	r11, rdi
	lea	rdi, QWORD PTR [r8-1]
	npad	13
$LL9@ShiftLeft:
	mov	r8, QWORD PTR [r11+r9]
	mov	ecx, esi
	lea	r9, QWORD PTR [r9+8]
	shr	rax, cl
	mov	ecx, r10d
	mov	rdx, r8
	shl	rdx, cl
	or	rax, rdx
	mov	QWORD PTR [r9-8], rax

; 53   :         carry = x;

	mov	rax, r8
	dec	rdi
	jne	SHORT $LL9@ShiftLeft
	mov	rsi, QWORD PTR [rsp+56]
$LN1@ShiftLeft:

; 54   :     }
; 55   : 
; 56   :     return carry >> (CAT_LEG_BITS - shift);

	sub	ebx, r10d
	movzx	ecx, bl
	mov	rbx, QWORD PTR [rsp+48]
	shr	rax, cl

; 57   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z ENDP		; cat::BigRTL::ShiftLeft
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\shift.inc
_TEXT	SEGMENT
legs$ = 48
in$ = 56
shift$ = 64
out$ = 72
?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z PROC		; cat::BigRTL::ShiftRight

; 60   : {

$LN12:
	mov	QWORD PTR [rsp+24], rbx
	push	rsi
	sub	rsp, 32					; 00000020H
	mov	rsi, r9
	mov	r11d, r8d
	mov	rbx, rdx
	movsxd	r9, ecx

; 61   :     if (!shift)

	test	r8d, r8d
	jne	SHORT $LN4@ShiftRight

; 62   :     {
; 63   :         memcpy(out, in, legs * sizeof(Leg));

	mov	r8, r9
	mov	rcx, rsi
	shl	r8, 3
	call	memcpy

; 64   :         return 0;

	xor	eax, eax

; 76   :     }
; 77   : 
; 78   :     return carry << (CAT_LEG_BITS - shift);
; 79   : }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN4@ShiftRight:

; 65   :     }
; 66   : 
; 67   :     Leg carry = in[legs-1];

	lea	rdx, QWORD PTR [r9*8-8]

; 68   : 
; 69   :     out[legs-1] = carry >> shift;

	mov	ecx, r11d
	mov	QWORD PTR [rsp+56], rdi
	mov	r8, QWORD PTR [rdx+rbx]

; 70   : 
; 71   :     for (int ii = legs-2; ii >= 0; --ii)

	mov	edi, 64					; 00000040H
	mov	rax, r8
	shr	rax, cl
	mov	QWORD PTR [rdx+rsi], rax
	lea	eax, DWORD PTR [r9-2]
	movsxd	r10, eax
	test	eax, eax
	js	SHORT $LN1@ShiftRight

; 72   :     {
; 73   :         Leg x = in[ii];
; 74   :         out[ii] = (x >> shift) | (carry << (CAT_LEG_BITS - shift));

	mov	QWORD PTR [rsp+48], rbp
	mov	ebp, edi
	lea	r9, QWORD PTR [rsi+r10*8]
	sub	ebp, r11d
	sub	rbx, rsi
	npad	10
$LL3@ShiftRight:
	mov	rdx, QWORD PTR [rbx+r9]
	mov	ecx, ebp
	lea	r9, QWORD PTR [r9-8]
	shl	r8, cl
	mov	ecx, r11d
	mov	rax, rdx
	shr	rax, cl
	or	r8, rax
	dec	r10
	mov	QWORD PTR [r9+8], r8

; 75   :         carry = x;

	mov	r8, rdx
	jns	SHORT $LL3@ShiftRight
	mov	rbp, QWORD PTR [rsp+48]
$LN1@ShiftRight:

; 76   :     }
; 77   : 
; 78   :     return carry << (CAT_LEG_BITS - shift);
; 79   : }

	mov	rbx, QWORD PTR [rsp+64]
	sub	edi, r11d
	movzx	ecx, dil
	mov	rdi, QWORD PTR [rsp+56]
	shl	r8, cl
	mov	rax, r8
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z ENDP		; cat::BigRTL::ShiftRight
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtract.inc
_TEXT	SEGMENT
legs$ = 8
in_a$ = 16
in_b$ = 24
out$ = 32
?Subtract@BigRTL@cat@@KAEHPEB_K0PEA_K@Z PROC		; cat::BigRTL::Subtract

; 38   : {

$LN16:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 39   : #if !defined(CAT_NO_LEGPAIR)
; 40   : 
; 41   :     // Subtract first two legs without a borrow-in
; 42   :     LegPairSigned diff = (LegPairSigned)in_a[0] - in_b[0];
; 43   :     out[0] = (Leg)diff;
; 44   : 
; 45   :     // Subtract remaining legs
; 46   :     for (int ii = 1; ii < legs; ++ii)
; 47   :     {
; 48   :         diff = ((diff >> CAT_LEG_BITS) + in_a[ii]) - in_b[ii];
; 49   :         out[ii] = (Leg)diff;
; 50   :     }
; 51   : 
; 52   :     return (u8)(diff >> CAT_LEG_BITS) & 1;
; 53   : 
; 54   : #else
; 55   : 
; 56   :     // Subtract first two legs without a borrow-in
; 57   :     Leg t = in_a[0];

	mov	r11, QWORD PTR [rdx]
	mov	rbx, r9
	mov	rdi, rdx

; 58   :     Leg s = in_b[0];
; 59   :     Leg w = t - s;
; 60   :     u8 c = t < s;

	cmp	r11, QWORD PTR [r8]
	mov	r9, r8
	setb	al
	sub	r11, QWORD PTR [r8]

; 61   : 
; 62   :     out[0] = w;

	mov	QWORD PTR [rbx], r11

; 63   : 
; 64   :     // Subtract remaining legs
; 65   :     for (int ii = 1; ii < legs; ++ii)

	movsxd	r11, ecx
	cmp	r11, 1
	jle	SHORT $LN14@Subtract
	add	r8, 8
	sub	rdi, r9
	sub	rbx, r9
	dec	r11
	npad	8
$LL3@Subtract:

; 66   :     {
; 67   :         // Calculate difference
; 68   :         Leg a = in_a[ii];

	mov	r10, QWORD PTR [rdi+r8]

; 69   :         Leg b = in_b[ii];

	mov	r9, QWORD PTR [r8]

; 70   :         Leg d = a - b - c;

	movzx	ecx, al
	mov	rdx, r10
	sub	rdx, rcx
	sub	rdx, r9

; 71   : 
; 72   :         // Calculate borrow-out
; 73   :         c = c ? (a < d || b == ~(Leg)0) : (a < b);

	test	al, al
	je	SHORT $LN8@Subtract
	cmp	r10, rdx
	jb	SHORT $LN6@Subtract
	cmp	r9, -1
	je	SHORT $LN6@Subtract
	xor	al, al
	jmp	SHORT $LN9@Subtract
$LN6@Subtract:
	mov	al, 1
	jmp	SHORT $LN9@Subtract
$LN8@Subtract:
	cmp	r10, r9
	setb	al
$LN9@Subtract:

; 74   : 
; 75   :         out[ii] = d;

	mov	QWORD PTR [rbx+r8], rdx
	add	r8, 8
	dec	r11
	jne	SHORT $LL3@Subtract
$LN14@Subtract:

; 76   :     }
; 77   : 
; 78   :     return c;
; 79   : 
; 80   : #endif
; 81   : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
?Subtract@BigRTL@cat@@KAEHPEB_K0PEA_K@Z ENDP		; cat::BigRTL::Subtract
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtractx.inc
_TEXT	SEGMENT
this$ = 8
inout$ = 16
x$ = 24
?SubtractX@BigRTL@cat@@QEAAEPEA_K_K@Z PROC		; cat::BigRTL::SubtractX

; 34   :     Leg t = inout[0];

	mov	r9, QWORD PTR [rdx]
	mov	r10, rcx

; 35   :     inout[0] = t - x;

	mov	rax, r9
	sub	rax, r8
	mov	QWORD PTR [rdx], rax

; 36   : 
; 37   :     // If the initial difference did not borrow in, return 0
; 38   :     if (t >= x) return 0;

	cmp	r9, r8
	jb	SHORT $LN5@SubtractX
$LN9@SubtractX:
	xor	al, al

; 45   : }

	ret	0
$LN5@SubtractX:

; 39   : 
; 40   :     // Ripple the borrow in as far as needed
; 41   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	r8d, 1
	cmp	DWORD PTR [rcx+4], r8d
	jle	SHORT $LN2@SubtractX
	lea	rax, QWORD PTR [rdx+8]
	npad	9
$LL4@SubtractX:
	mov	rdx, QWORD PTR [rax]

; 42   :         if (inout[ii]--) return 0;

	lea	rcx, QWORD PTR [rdx-1]
	mov	QWORD PTR [rax], rcx
	test	rdx, rdx
	jne	SHORT $LN9@SubtractX

; 39   : 
; 40   :     // Ripple the borrow in as far as needed
; 41   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	r8d
	add	rax, 8
	cmp	r8d, DWORD PTR [r10+4]
	jl	SHORT $LL4@SubtractX
$LN2@SubtractX:

; 43   : 
; 44   :     return 1;

	mov	al, 1

; 45   : }

	ret	0
?SubtractX@BigRTL@cat@@QEAAEPEA_K_K@Z ENDP		; cat::BigRTL::SubtractX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyx.inc
_TEXT	SEGMENT
this$ = 8
in_a$ = 16
in_b$ = 24
out$ = 32
?MultiplyX@BigRTL@cat@@QEAA_KPEB_K_KPEA_K@Z PROC	; cat::BigRTL::MultiplyX

; 33   : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 34   :     return MultiplyX(library_legs, in_a, in_b, out);

	movsxd	r10, DWORD PTR [rcx+4]

; 36   : 
; 37   : Leg CAT_FASTCALL BigRTL::MultiplyX(int legs, const Leg *in_a, Leg in_b, Leg *output)
; 38   : {
; 39   :     Leg p_hi;
; 40   : 
; 41   :     CAT_LEG_MUL(in_a[0], in_b, p_hi, output[0]);

	mov	rax, r8

; 33   : {

	mov	r11, rdx
	mov	rbx, r9
	mov	rdi, r8

; 36   : 
; 37   : Leg CAT_FASTCALL BigRTL::MultiplyX(int legs, const Leg *in_a, Leg in_b, Leg *output)
; 38   : {
; 39   :     Leg p_hi;
; 40   : 
; 41   :     CAT_LEG_MUL(in_a[0], in_b, p_hi, output[0]);

	mul	QWORD PTR [rdx]
	mov	QWORD PTR [r9], rax

; 42   : 
; 43   :     for (int ii = 1; ii < legs; ++ii)

	cmp	r10, 1
	jle	SHORT $LN12@MultiplyX

; 34   :     return MultiplyX(library_legs, in_a, in_b, out);

	add	r9, 8

; 42   : 
; 43   :     for (int ii = 1; ii < legs; ++ii)

	sub	r11, rbx

; 34   :     return MultiplyX(library_legs, in_a, in_b, out);

	dec	r10
$LL5@MultiplyX:

; 44   :         CAT_LEG_MULADD(in_a[ii], in_b, p_hi, p_hi, output[ii]);

	mov	r8, rdx
	mov	rax, rdi
	lea	r9, QWORD PTR [r9+8]
	mul	QWORD PTR [r11+r9-8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, r8
	mov	QWORD PTR [r9-8], rcx
	adc	rdx, 0
	dec	r10
	jne	SHORT $LL5@MultiplyX
$LN12@MultiplyX:

; 35   : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	mov	rax, rdx
	ret	0
?MultiplyX@BigRTL@cat@@QEAA_KPEB_K_KPEA_K@Z ENDP	; cat::BigRTL::MultiplyX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyx.inc
_TEXT	SEGMENT
legs$ = 8
in_a$ = 16
in_b$ = 24
output$ = 32
?MultiplyX@BigRTL@cat@@KA_KHPEB_K_KPEA_K@Z PROC		; cat::BigRTL::MultiplyX

; 38   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx

; 39   :     Leg p_hi;
; 40   : 
; 41   :     CAT_LEG_MUL(in_a[0], in_b, p_hi, output[0]);

	mov	rax, r8
	mov	r11, rdx
	mov	rbx, r8
	mul	QWORD PTR [rdx]
	mov	QWORD PTR [r9], rax

; 42   : 
; 43   :     for (int ii = 1; ii < legs; ++ii)

	cmp	ecx, 1
	jle	SHORT $LN10@MultiplyX
	lea	r10, QWORD PTR [r9+8]
	sub	r11, r9
	lea	r9d, DWORD PTR [rcx-1]
	npad	12
$LL3@MultiplyX:

; 44   :         CAT_LEG_MULADD(in_a[ii], in_b, p_hi, p_hi, output[ii]);

	mov	r8, rdx
	mov	rax, rbx
	lea	r10, QWORD PTR [r10+8]
	mul	QWORD PTR [r11+r10-8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, r8
	mov	QWORD PTR [r10-8], rcx
	adc	rdx, 0
	dec	r9
	jne	SHORT $LL3@MultiplyX
$LN10@MultiplyX:

; 45   : 
; 46   :     return p_hi;
; 47   : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rax, rdx
	ret	0
?MultiplyX@BigRTL@cat@@KA_KHPEB_K_KPEA_K@Z ENDP		; cat::BigRTL::MultiplyX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
_TEXT	SEGMENT
this$ = 8
in_a$ = 16
in_b$ = 24
in_c$ = 32
out$ = 40
?MultiplyXAdd@BigRTL@cat@@QEAA_KPEB_K_K0PEA_K@Z PROC	; cat::BigRTL::MultiplyXAdd

; 34   :     return MultiplyXAdd(library_legs, in_a, in_b, in_c, out);

	mov	ecx, DWORD PTR [rcx+4]
	jmp	?MultiplyXAdd@BigRTL@cat@@KA_KHPEB_K_K0PEA_K@Z ; cat::BigRTL::MultiplyXAdd
?MultiplyXAdd@BigRTL@cat@@QEAA_KPEB_K_K0PEA_K@Z ENDP	; cat::BigRTL::MultiplyXAdd
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
_TEXT	SEGMENT
legs$ = 8
in_a$ = 16
in_b$ = 24
in_c$ = 32
output$ = 40
?MultiplyXAdd@BigRTL@cat@@KA_KHPEB_K_K0PEA_K@Z PROC	; cat::BigRTL::MultiplyXAdd

; 39   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi

; 40   :     // ICC does a better job than my hand-written version by using SIMD instructions,
; 41   :     // so I use its optimizer instead.
; 42   : #if !defined(CAT_COMPILER_ICC) && defined(CAT_ASM_INTEL) && \
; 43   : 	 defined(CAT_ISA_X86) && defined(CAT_WORD_32)
; 44   : 
; 45   :     CAT_ASM_BEGIN
; 46   :         mov esi, [in_a]       ; esi = in_a
; 47   :         mov edi, [in_c]       ; edi = in_c
; 48   :         mov ecx, [output]     ; ecx = output
; 49   : 
; 50   :         ; edx:eax = A[0] * B + C
; 51   :         mov eax, [esi]
; 52   :         mul [in_b]
; 53   :         add eax, [edi]
; 54   :         adc edx, 0
; 55   : 
; 56   :         mov [ecx], eax        ; output[0] = eax
; 57   :         sub [legs], 1
; 58   :         jbe loop_done
; 59   : 
; 60   : loop_head:
; 61   :             lea esi, [esi + 4]
; 62   :             mov ebx, edx
; 63   :             mov eax, [esi]
; 64   :             lea edi, [edi + 4]
; 65   :             mul [in_b]
; 66   :             add eax, [edi]
; 67   :             adc edx, 0
; 68   :             lea ecx, [ecx + 4]
; 69   :             add eax, ebx
; 70   :             adc edx, 0
; 71   :             mov [ecx], eax
; 72   : 
; 73   :         sub [legs], 1
; 74   :         ja loop_head
; 75   : 
; 76   : loop_done:
; 77   :         mov eax, edx
; 78   :     CAT_ASM_END
; 79   : 
; 80   : #else
; 81   : 
; 82   :     Leg p_hi;
; 83   : 
; 84   :     CAT_LEG_MULADD(in_a[0], in_b, in_c[0], p_hi, output[0]);

	mov	rsi, QWORD PTR output$[rsp]
	mov	rdi, r9
	mov	rax, r8
	mov	rbx, QWORD PTR [rdi]
	mov	r9, rdx
	mov	rbp, r8
	mul	QWORD PTR [rdx]
	mov	r10, rdx
	lea	r11, QWORD PTR [rax+rbx]
	cmp	r11, rbx
	mov	QWORD PTR [rsi], r11
	adc	r10, 0

; 85   : 
; 86   :     for (int ii = 1; ii < legs; ++ii)

	cmp	ecx, 1
	jle	SHORT $LN10@MultiplyXA
	sub	rdi, r9
	lea	r11, QWORD PTR [r9+8]
	lea	ebx, DWORD PTR [rcx-1]
	sub	rsi, r9
	npad	2
$LL3@MultiplyXA:

; 87   :         CAT_LEG_MULADD2(in_a[ii], in_b, in_c[ii], p_hi, p_hi, output[ii]);

	mov	r9, QWORD PTR [rdi+r11]
	mov	rax, rbp
	lea	r11, QWORD PTR [r11+8]
	mul	QWORD PTR [r11-8]
	lea	rcx, QWORD PTR [rax+r9]
	mov	rax, r10
	lea	r8, QWORD PTR [rcx+r10]
	xor	r10d, r10d
	cmp	rcx, r9
	setb	r10b
	cmp	r8, rax
	mov	QWORD PTR [rsi+r11-8], r8
	adc	r10, rdx
	dec	rbx
	jne	SHORT $LL3@MultiplyXA
$LN10@MultiplyXA:

; 88   : 
; 89   :     return p_hi;
; 90   : 
; 91   : #endif
; 92   : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rbp, QWORD PTR [rsp+16]
	mov	rsi, QWORD PTR [rsp+24]
	mov	rdi, QWORD PTR [rsp+32]
	mov	rax, r10
	ret	0
?MultiplyXAdd@BigRTL@cat@@KA_KHPEB_K_K0PEA_K@Z ENDP	; cat::BigRTL::MultiplyXAdd
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiply.inc
;	COMDAT ?SchoolbookMultiply4@@YAXPEB_K0PEA_K@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
output$ = 40
?SchoolbookMultiply4@@YAXPEB_K0PEA_K@Z PROC		; SchoolbookMultiply4, COMDAT

; 38   : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 39   : 	Leg p0, p1, p2, p3, p4;
; 40   : 
; 41   : 	CAT_LEG_MUL(a[0], b[0], p0, output[0]);

	mov	rax, QWORD PTR [rdx]
	mov	r14, rdx
	mov	rbp, rcx
	mov	r15, r8
	mul	QWORD PTR [rcx]
	mov	QWORD PTR [r8], rax

; 42   : 
; 43   : 	CAT_LEG_MULADD(a[1], b[0], p0, p1, p0);

	mov	rax, QWORD PTR [r14]
	mov	r9, rdx
	mul	QWORD PTR [rcx+8]
	mov	r10, rdx
	lea	r8, QWORD PTR [r9+rax]

; 44   : 	CAT_LEG_MULADD(a[0], b[1], p0, p2, p0);

	mov	rax, QWORD PTR [r14+8]
	cmp	r8, r9
	adc	r10, 0
	mul	QWORD PTR [rcx]
	add	rax, r8
	mov	rcx, rdx
	cmp	rax, r8

; 45   : 	output[1] = p0;

	mov	QWORD PTR [r15+8], rax

; 46   : 
; 47   : 	CAT_LEG_MULADD2(a[2], b[0], p1, p2, p1, p0);

	mov	rax, QWORD PTR [r14]
	adc	rcx, 0
	mul	QWORD PTR [rbp+16]
	mov	r11, rdx
	lea	r8, QWORD PTR [r10+rax]

; 48   : 	CAT_LEG_MULADD(a[1], b[1], p0, p2, p0);

	mov	rax, QWORD PTR [r14+8]
	cmp	r8, r10
	adc	r11, 0
	add	r8, rcx
	cmp	r8, rcx
	adc	r11, 0
	mul	QWORD PTR [rbp+8]
	mov	r9, rdx
	lea	rcx, QWORD PTR [r8+rax]

; 49   : 	CAT_LEG_MULADD(a[0], b[2], p0, p3, p0);

	mov	rax, QWORD PTR [r14+16]
	cmp	rcx, r8
	adc	r9, 0
	mul	QWORD PTR [rbp]
	add	rax, rcx
	mov	r10, rdx
	cmp	rax, rcx

; 50   : 	output[2] = p0;

	mov	QWORD PTR [r15+16], rax

; 51   : 
; 52   : 	CAT_LEG_MULADD2(a[3], b[0], p1, p2, p1, p0);

	mov	rax, QWORD PTR [r14]
	adc	r10, 0
	mul	QWORD PTR [rbp+24]
	mov	rsi, rdx
	lea	rcx, QWORD PTR [r11+rax]

; 53   : 	CAT_LEG_MULADD2(a[2], b[1], p0, p3, p2, p0);

	mov	rax, QWORD PTR [r14+8]
	cmp	rcx, r11
	adc	rsi, 0
	add	rcx, r9
	cmp	rcx, r9
	adc	rsi, 0
	mul	QWORD PTR [rbp+16]
	mov	r9, rdx
	lea	r8, QWORD PTR [rcx+rax]

; 54   : 	CAT_LEG_MULADD(a[1], b[2], p0, p3, p0);

	mov	rax, QWORD PTR [r14+16]
	cmp	r8, rcx
	adc	r9, 0
	add	r8, r10
	cmp	r8, r10
	adc	r9, 0
	mul	QWORD PTR [rbp+8]
	mov	r11, rdx
	lea	rcx, QWORD PTR [r8+rax]

; 55   : 	CAT_LEG_MULADD(a[0], b[3], p0, p4, p0);

	mov	rax, QWORD PTR [r14+24]
	cmp	rcx, r8
	adc	r11, 0
	mul	QWORD PTR [rbp]
	add	rax, rcx
	mov	rbx, rdx
	cmp	rax, rcx

; 56   : 	output[3] = p0;

	mov	QWORD PTR [r15+24], rax

; 57   : 
; 58   : 	CAT_LEG_MULADD2(a[3], b[1], p1, p2, p1, p0);

	mov	rax, QWORD PTR [r14+8]
	adc	rbx, 0
	mul	QWORD PTR [rbp+24]
	mov	rdi, rdx
	lea	rcx, QWORD PTR [rsi+rax]
	cmp	rcx, rsi
	adc	rdi, 0
	add	rcx, r9
	cmp	rcx, r9

; 59   : 	CAT_LEG_MULADD2(a[2], b[2], p0, p3, p2, p0);

	mov	rax, QWORD PTR [r14+16]
	adc	rdi, 0

; 60   : 	CAT_LEG_MULADD2(a[1], b[3], p0, p4, p3, p0);
; 61   : 	output[4] = p0;
; 62   : 
; 63   : 	CAT_LEG_MULADD2(a[3], b[2], p1, p2, p1, p0);
; 64   : 	CAT_LEG_MULADD2(a[2], b[3], p0, p3, p2, p0);
; 65   : 	output[5] = p0;
; 66   : 
; 67   : 	CAT_LEG_MULADD2(a[3], b[3], p1, p2, p1, p0);
; 68   : 	output[6] = p0;
; 69   : 	output[7] = p1;
; 70   : }

	mov	rsi, QWORD PTR [rsp+40]
	mul	QWORD PTR [rbp+16]
	mov	r10, rdx
	lea	r8, QWORD PTR [rcx+rax]
	mov	rax, QWORD PTR [r14+24]
	cmp	r8, rcx
	adc	r10, 0
	add	r8, r11
	cmp	r8, r11
	adc	r10, 0
	mul	QWORD PTR [rbp+8]
	add	rax, r8
	mov	r11, rdx
	cmp	rax, r8
	adc	r11, 0
	add	rax, rbx
	cmp	rax, rbx
	mov	rbx, QWORD PTR [rsp+24]
	mov	QWORD PTR [r15+32], rax
	mov	rax, QWORD PTR [r14+16]
	adc	r11, 0
	mul	QWORD PTR [rbp+24]
	mov	r9, rdx
	lea	rcx, QWORD PTR [rdi+rax]
	mov	rax, QWORD PTR [r14+24]
	cmp	rcx, rdi
	mov	rdi, QWORD PTR [rsp+48]
	adc	r9, 0
	add	rcx, r10
	cmp	rcx, r10
	adc	r9, 0
	mul	QWORD PTR [rbp+16]
	add	rax, rcx
	mov	r8, rdx
	cmp	rax, rcx
	adc	r8, 0
	add	rax, r11
	cmp	rax, r11
	mov	QWORD PTR [r15+40], rax
	mov	rax, QWORD PTR [r14+24]
	adc	r8, 0
	mul	QWORD PTR [rbp+24]
	mov	rbp, QWORD PTR [rsp+32]
	add	rax, r9
	cmp	rax, r9
	adc	rdx, 0
	add	rax, r8
	cmp	rax, r8
	mov	QWORD PTR [r15+48], rax
	adc	rdx, 0
	mov	QWORD PTR [r15+56], rdx
	pop	r15
	pop	r14
	ret	0
?SchoolbookMultiply4@@YAXPEB_K0PEA_K@Z ENDP		; SchoolbookMultiply4
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiply.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiply.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiply.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiply.inc
_TEXT	SEGMENT
this$ = 80
in_a$ = 88
in_b$ = 96
out$ = 104
?Multiply@BigRTL@cat@@QEAAXPEB_K0PEA_K@Z PROC		; cat::BigRTL::Multiply

; 73   : {

$LN20:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H

; 74   : 	// ICC improves performance of multiplication by about 15% over MSVC, and it compiles the template metaprogramming very fast
; 75   : 	switch (library_legs)

	mov	eax, DWORD PTR [rcx+4]
	mov	r14, r9
	mov	r15, r8
	mov	rbp, rdx
	mov	rsi, rcx
	cmp	eax, 4
	je	$LN6@Multiply
	cmp	eax, 6
	je	SHORT $LN5@Multiply
	cmp	eax, 8
	je	SHORT $LN4@Multiply

; 83   : #if defined(CAT_WORD_32) && defined(CAT_UNROLL_OVER_256_BITS)
; 84   : 	case 12: CombaMul<12>(in_a, in_b, out); return;
; 85   : 	case 16: CombaMul<16>(in_a, in_b, out); return;
; 86   : #endif
; 87   : 	}
; 88   : 
; 89   :     out[library_legs] = MultiplyX(in_a, in_b[0], out);

	mov	r8, QWORD PTR [r8]
	call	?MultiplyX@BigRTL@cat@@QEAA_KPEB_K_KPEA_K@Z ; cat::BigRTL::MultiplyX
	movsxd	rcx, DWORD PTR [rsi+4]

; 90   : 
; 91   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ebx, 1
	mov	QWORD PTR [r14+rcx*8], rax
	mov	ecx, DWORD PTR [rsi+4]
	cmp	ecx, ebx
	jle	$LN1@Multiply
	mov	edi, ebx
	npad	4
$LL3@Multiply:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc

; 34   :     return MultiplyXAdd(library_legs, in_a, in_b, in_c, out);

	mov	r8, QWORD PTR [r15+rdi*8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiply.inc

; 92   :         out[library_legs + ii] = MultiplyXAdd(in_a, in_b[ii], out + ii, out + ii);

	movsxd	rax, ebx
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc

; 34   :     return MultiplyXAdd(library_legs, in_a, in_b, in_c, out);

	mov	rdx, rbp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiply.inc

; 92   :         out[library_legs + ii] = MultiplyXAdd(in_a, in_b[ii], out + ii, out + ii);

	lea	r9, QWORD PTR [r14+rax*8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc

; 34   :     return MultiplyXAdd(library_legs, in_a, in_b, in_c, out);

	mov	QWORD PTR [rsp+32], r9
	call	?MultiplyXAdd@BigRTL@cat@@KA_KHPEB_K_K0PEA_K@Z ; cat::BigRTL::MultiplyXAdd
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiply.inc

; 92   :         out[library_legs + ii] = MultiplyXAdd(in_a, in_b[ii], out + ii, out + ii);

	movsxd	rcx, DWORD PTR [rsi+4]
	add	rcx, rdi
	inc	ebx
	inc	rdi
	mov	QWORD PTR [r14+rcx*8], rax
	mov	ecx, DWORD PTR [rsi+4]
	cmp	ebx, ecx
	jl	SHORT $LL3@Multiply

; 90   : 
; 91   :     for (int ii = 1; ii < library_legs; ++ii)

	jmp	$LN1@Multiply
$LN4@Multiply:

; 81   : #endif
; 82   : 	case 8: CombaMul<8>(in_a, in_b, out); return;

	mov	r8, r9
	mov	rdx, r15
	mov	rcx, rbp
	call	??$CombaMul@$07@@YAXPEB_K0PEA_K@Z	; CombaMul<8>
	jmp	$LN1@Multiply
$LN5@Multiply:

; 76   : 	{
; 77   : 	// MSVC really grinds to build this, so I have limited the number of cases that use template metaprogramming
; 78   : #if defined(CAT_WORD_64)
; 79   : 	case 4: SchoolbookMultiply4(in_a, in_b, out); return;
; 80   : 	case 6: CombaMul<6>(in_a, in_b, out); return;

	mov	r8, r9
	mov	rdx, r15
	mov	rcx, rbp
	call	??$CombaMul@$05@@YAXPEB_K0PEA_K@Z	; CombaMul<6>
	jmp	$LN1@Multiply
$LN6@Multiply:

; 41   : 	CAT_LEG_MUL(a[0], b[0], p0, output[0]);

	mov	rax, QWORD PTR [r8]
	mul	QWORD PTR [rdx]
	mov	QWORD PTR [r9], rax

; 42   : 
; 43   : 	CAT_LEG_MULADD(a[1], b[0], p0, p1, p0);

	mov	rax, QWORD PTR [r8]
	mov	rcx, rdx
	mul	QWORD PTR [rbp+8]
	mov	r9, rdx
	lea	r8, QWORD PTR [rcx+rax]

; 44   : 	CAT_LEG_MULADD(a[0], b[1], p0, p2, p0);

	mov	rax, QWORD PTR [r15+8]
	cmp	r8, rcx
	adc	r9, 0
	mul	QWORD PTR [rbp]
	add	rax, r8
	mov	rcx, rdx
	cmp	rax, r8

; 45   : 	output[1] = p0;

	mov	QWORD PTR [r14+8], rax

; 46   : 
; 47   : 	CAT_LEG_MULADD2(a[2], b[0], p1, p2, p1, p0);

	mov	rax, QWORD PTR [r15]
	adc	rcx, 0
	mul	QWORD PTR [rbp+16]
	mov	r11, rdx
	lea	r8, QWORD PTR [r9+rax]

; 48   : 	CAT_LEG_MULADD(a[1], b[1], p0, p2, p0);

	mov	rax, QWORD PTR [r15+8]
	cmp	r8, r9
	adc	r11, 0
	add	r8, rcx
	cmp	r8, rcx
	adc	r11, 0
	mul	QWORD PTR [rbp+8]
	mov	r9, rdx
	lea	rcx, QWORD PTR [r8+rax]

; 49   : 	CAT_LEG_MULADD(a[0], b[2], p0, p3, p0);

	mov	rax, QWORD PTR [r15+16]
	cmp	rcx, r8
	adc	r9, 0
	mul	QWORD PTR [rbp]
	add	rax, rcx
	mov	r10, rdx
	cmp	rax, rcx

; 50   : 	output[2] = p0;

	mov	QWORD PTR [r14+16], rax

; 51   : 
; 52   : 	CAT_LEG_MULADD2(a[3], b[0], p1, p2, p1, p0);

	mov	rax, QWORD PTR [r15]
	adc	r10, 0
	mul	QWORD PTR [rbp+24]
	mov	rsi, rdx
	lea	rcx, QWORD PTR [r11+rax]

; 53   : 	CAT_LEG_MULADD2(a[2], b[1], p0, p3, p2, p0);

	mov	rax, QWORD PTR [r15+8]
	cmp	rcx, r11
	adc	rsi, 0
	add	rcx, r9
	cmp	rcx, r9
	adc	rsi, 0
	mul	QWORD PTR [rbp+16]
	mov	r9, rdx
	lea	r8, QWORD PTR [rcx+rax]

; 54   : 	CAT_LEG_MULADD(a[1], b[2], p0, p3, p0);

	mov	rax, QWORD PTR [r15+16]
	cmp	r8, rcx
	adc	r9, 0
	add	r8, r10
	cmp	r8, r10
	adc	r9, 0
	mul	QWORD PTR [rbp+8]
	mov	r11, rdx
	lea	rcx, QWORD PTR [r8+rax]

; 55   : 	CAT_LEG_MULADD(a[0], b[3], p0, p4, p0);

	mov	rax, QWORD PTR [r15+24]
	cmp	rcx, r8
	adc	r11, 0
	mul	QWORD PTR [rbp]
	add	rax, rcx
	mov	rbx, rdx
	cmp	rax, rcx

; 56   : 	output[3] = p0;

	mov	QWORD PTR [r14+24], rax

; 57   : 
; 58   : 	CAT_LEG_MULADD2(a[3], b[1], p1, p2, p1, p0);

	mov	rax, QWORD PTR [r15+8]
	adc	rbx, 0
	mul	QWORD PTR [rbp+24]
	mov	rdi, rdx
	lea	rcx, QWORD PTR [rsi+rax]

; 59   : 	CAT_LEG_MULADD2(a[2], b[2], p0, p3, p2, p0);

	mov	rax, QWORD PTR [r15+16]
	cmp	rcx, rsi
	adc	rdi, 0
	add	rcx, r9
	cmp	rcx, r9
	adc	rdi, 0
	mul	QWORD PTR [rbp+16]
	lea	r8, QWORD PTR [rcx+rax]

; 60   : 	CAT_LEG_MULADD2(a[1], b[3], p0, p4, p3, p0);

	mov	rax, QWORD PTR [r15+24]
	mov	r10, rdx
	cmp	r8, rcx
	adc	r10, 0
	add	r8, r11
	cmp	r8, r11
	adc	r10, 0
	mul	QWORD PTR [rbp+8]
	add	rax, r8
	mov	r11, rdx
	cmp	rax, r8
	adc	r11, 0
	add	rax, rbx
	cmp	rax, rbx

; 61   : 	output[4] = p0;

	mov	QWORD PTR [r14+32], rax

; 62   : 
; 63   : 	CAT_LEG_MULADD2(a[3], b[2], p1, p2, p1, p0);

	mov	rax, QWORD PTR [r15+16]
	adc	r11, 0
	mul	QWORD PTR [rbp+24]
	mov	r9, rdx
	lea	rcx, QWORD PTR [rdi+rax]

; 64   : 	CAT_LEG_MULADD2(a[2], b[3], p0, p3, p2, p0);

	mov	rax, QWORD PTR [r15+24]
	cmp	rcx, rdi
	adc	r9, 0
	add	rcx, r10
	cmp	rcx, r10
	adc	r9, 0
	mul	QWORD PTR [rbp+16]
	add	rax, rcx
	mov	r8, rdx
	cmp	rax, rcx
	adc	r8, 0
	add	rax, r11
	cmp	rax, r11

; 65   : 	output[5] = p0;

	mov	QWORD PTR [r14+40], rax

; 66   : 
; 67   : 	CAT_LEG_MULADD2(a[3], b[3], p1, p2, p1, p0);

	mov	rax, QWORD PTR [r15+24]
	adc	r8, 0
	mul	QWORD PTR [rbp+24]
	add	rax, r9
	cmp	rax, r9
	adc	rdx, 0
	add	rax, r8
	cmp	rax, r8

; 68   : 	output[6] = p0;

	mov	QWORD PTR [r14+48], rax
	adc	rdx, 0

; 69   : 	output[7] = p1;

	mov	QWORD PTR [r14+56], rdx
$LN1@Multiply:

; 93   : }

	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
?Multiply@BigRTL@cat@@QEAAXPEB_K0PEA_K@Z ENDP		; cat::BigRTL::Multiply
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\doubleadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\doubleadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\doubleadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\doubleadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc
_TEXT	SEGMENT
cross$1$ = 64
this$ = 64
in_a$1$ = 72
input$ = 72
output$ = 80
?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z PROC		; cat::BigRTL::Square

; 125  : {

$LN47:
	mov	QWORD PTR [rsp+24], r8
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 8

; 126  : #if !defined(CAT_NO_LEGPAIR)
; 127  : 	if (library_legs == 8)
; 128  : 	{
; 129  : 		// Speeds up a 256-bit PtMultiply() by 8%
; 130  : 		Square8(input, output);
; 131  : 		return;
; 132  : 	}
; 133  : #endif // CAT_NO_LEGPAIR
; 134  : 
; 135  : 	Leg *cross = Get(library_regs - 2);

	mov	eax, DWORD PTR [rcx]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	mov	r10d, DWORD PTR [rcx+4]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 138  :     for (int ii = 0; ii < library_legs; ++ii)

	xor	r11d, r11d
	sub	eax, 2
	mov	QWORD PTR [rsp+88], rbp
	mov	r12, r8
	mov	rsi, rdx
	mov	rdi, rcx
	lea	ebp, QWORD PTR [r11+1]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r10d
	movsxd	r9, eax
	mov	rax, QWORD PTR [rcx+8]
	lea	r14, QWORD PTR [rax+r9*8]
	mov	QWORD PTR cross$1$[rsp], r14
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 138  :     for (int ii = 0; ii < library_legs; ++ii)

	test	r10d, r10d
	jle	SHORT $LN4@Square
	mov	r9, rdx
	mov	r10d, ebp
	npad	1
$LL6@Square:

; 139  :         CAT_LEG_MUL(input[ii], input[ii], output[ii*2+1], output[ii*2]);

	movsxd	rax, r10d
	inc	r11d
	add	r10d, 2
	lea	rcx, QWORD PTR [r12+rax*8]
	mov	rax, QWORD PTR [r9]
	lea	r9, QWORD PTR [r9+8]
	lea	r8, QWORD PTR [r8+16]
	mul	rax
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [r8-16], rax
	cmp	r11d, DWORD PTR [rdi+4]
	jl	SHORT $LL6@Square
$LN4@Square:

; 142  :     cross[library_legs] = MultiplyX(library_legs-1, input+1, input[0], cross+1);

	mov	rbx, QWORD PTR [rsi]
	mov	ecx, DWORD PTR [rdi+4]
	lea	r15, QWORD PTR [r14+8]
	dec	ecx
	lea	r10, QWORD PTR [rsi+8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyx.inc

; 41   :     CAT_LEG_MUL(in_a[0], in_b, p_hi, output[0]);

	mov	rax, rbx

; 42   : 
; 43   :     for (int ii = 1; ii < legs; ++ii)

	movsxd	r11, ecx
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 142  :     cross[library_legs] = MultiplyX(library_legs-1, input+1, input[0], cross+1);

	mov	QWORD PTR in_a$1$[rsp], r15
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyx.inc

; 41   :     CAT_LEG_MUL(in_a[0], in_b, p_hi, output[0]);

	mul	QWORD PTR [r10]
	mov	QWORD PTR [r15], rax

; 42   : 
; 43   :     for (int ii = 1; ii < legs; ++ii)

	cmp	r11, rbp
	jle	SHORT $LN11@Square
	sub	r10, r15
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 142  :     cross[library_legs] = MultiplyX(library_legs-1, input+1, input[0], cross+1);

	lea	r9, QWORD PTR [r15+8]
	dec	r11
	npad	7
$LL13@Square:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyx.inc

; 44   :         CAT_LEG_MULADD(in_a[ii], in_b, p_hi, p_hi, output[ii]);

	mov	r8, rdx
	mov	rax, rbx
	lea	r9, QWORD PTR [r9+8]
	mul	QWORD PTR [r10+r9-8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, r8
	mov	QWORD PTR [r9-8], rcx
	adc	rdx, 0
	dec	r11
	jne	SHORT $LL13@Square
$LN11@Square:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 142  :     cross[library_legs] = MultiplyX(library_legs-1, input+1, input[0], cross+1);

	movsxd	rax, DWORD PTR [rdi+4]
	mov	QWORD PTR [r14+rax*8], rdx

; 143  :     for (int ii = 1; ii < library_legs-1; ++ii)

	mov	r9d, DWORD PTR [rdi+4]
	lea	eax, DWORD PTR [r9-1]
	cmp	eax, ebp
	jle	$LN1@Square
	mov	QWORD PTR [rsp], r13
	mov	r12, rbp
	lea	r11, QWORD PTR [rsi+16]
	add	r14, 24
	npad	6
$LL3@Square:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc

; 84   :     CAT_LEG_MULADD(in_a[0], in_b, in_c[0], p_hi, output[0]);

	mov	r8, QWORD PTR [r14]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 144  :         cross[library_legs + ii] = MultiplyXAdd(library_legs-1-ii, input+1+ii, input[ii], cross+1+ii*2, cross+1+ii*2);

	mov	r13, QWORD PTR [r11-8]
	sub	r9d, ebp
	dec	r9d
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc

; 84   :     CAT_LEG_MULADD(in_a[0], in_b, in_c[0], p_hi, output[0]);

	mov	rax, r13

; 86   :     for (int ii = 1; ii < legs; ++ii)

	movsxd	r15, r9d
	mul	QWORD PTR [r11]
	mov	rcx, rdx
	lea	rdx, QWORD PTR [rax+r8]
	cmp	rdx, r8
	mov	QWORD PTR [r14], rdx
	adc	rcx, 0
	cmp	r15, 1
	jle	SHORT $LN16@Square
	mov	rsi, r14
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 144  :         cross[library_legs + ii] = MultiplyXAdd(library_legs-1-ii, input+1+ii, input[ii], cross+1+ii*2, cross+1+ii*2);

	lea	rbx, QWORD PTR [r11+8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc

; 86   :     for (int ii = 1; ii < legs; ++ii)

	sub	rsi, r11
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 144  :         cross[library_legs + ii] = MultiplyXAdd(library_legs-1-ii, input+1+ii, input[ii], cross+1+ii*2, cross+1+ii*2);

	dec	r15
	npad	6
$LL18@Square:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc

; 87   :         CAT_LEG_MULADD2(in_a[ii], in_b, in_c[ii], p_hi, p_hi, output[ii]);

	mov	r10, QWORD PTR [rbx+rsi]
	mov	rax, r13
	lea	rbx, QWORD PTR [rbx+8]
	mul	QWORD PTR [rbx-8]
	lea	r8, QWORD PTR [rax+r10]
	mov	rax, rcx
	lea	r9, QWORD PTR [r8+rcx]
	xor	ecx, ecx
	cmp	r8, r10
	setb	cl
	cmp	r9, rax
	mov	QWORD PTR [rbx+rsi-8], r9
	adc	rcx, rdx
	dec	r15
	jne	SHORT $LL18@Square
$LN16@Square:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 144  :         cross[library_legs + ii] = MultiplyXAdd(library_legs-1-ii, input+1+ii, input[ii], cross+1+ii*2, cross+1+ii*2);

	movsxd	rax, DWORD PTR [rdi+4]
	mov	rdx, QWORD PTR cross$1$[rsp]
	inc	ebp
	add	rax, r12
	add	r14, 16
	add	r11, 8
	mov	QWORD PTR [rdx+rax*8], rcx
	mov	r9d, DWORD PTR [rdi+4]
	inc	r12
	lea	eax, DWORD PTR [r9-1]
	cmp	ebp, eax
	jl	$LL3@Square
	mov	r15, QWORD PTR in_a$1$[rsp]
	mov	r12, QWORD PTR output$[rsp]
	mov	r13, QWORD PTR [rsp]
$LN1@Square:

; 147  :     output[library_legs*2-1] += DoubleAdd(library_legs*2-2, cross+1, output+1, output+1);

	mov	eax, DWORD PTR [rdi+4]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\doubleadd.inc

; 57   :     CAT_LEG_MULADD(in_a[0], 2, in_b[0], p_hi, out[0]);

	mov	r8, QWORD PTR [r12+8]
	mov	rbp, QWORD PTR [rsp+88]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 147  :     output[library_legs*2-1] += DoubleAdd(library_legs*2-2, cross+1, output+1, output+1);

	lea	r9d, DWORD PTR [rax*2-2]
	lea	rbx, QWORD PTR [r12+8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\doubleadd.inc

; 57   :     CAT_LEG_MULADD(in_a[0], 2, in_b[0], p_hi, out[0]);

	mov	eax, 2

; 59   :     for (int ii = 1; ii < legs; ++ii)

	movsxd	rsi, r9d
	mul	QWORD PTR [r15]
	lea	rcx, QWORD PTR [rax+r8]
	mov	r10, rdx
	cmp	rcx, r8
	mov	QWORD PTR [rbx], rcx
	adc	r10, 0
	cmp	rsi, 1
	jle	SHORT $LN21@Square
	mov	r14, rbx
	sub	rbx, r15
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 147  :     output[library_legs*2-1] += DoubleAdd(library_legs*2-2, cross+1, output+1, output+1);

	lea	r11, QWORD PTR [r15+8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\doubleadd.inc

; 59   :     for (int ii = 1; ii < legs; ++ii)

	sub	r14, r15
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 147  :     output[library_legs*2-1] += DoubleAdd(library_legs*2-2, cross+1, output+1, output+1);

	dec	rsi
	npad	7
$LL23@Square:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\doubleadd.inc

; 60   :         CAT_LEG_MULADD2(in_a[ii], 2, in_b[ii], p_hi, p_hi, out[ii]);

	mov	r9, QWORD PTR [r14+r11]
	mov	r8, r10
	mov	eax, 2
	mul	QWORD PTR [r11]
	lea	r11, QWORD PTR [r11+8]
	lea	rcx, QWORD PTR [rax+r9]
	lea	rax, QWORD PTR [rcx+r10]
	xor	r10d, r10d
	cmp	rax, r8
	mov	QWORD PTR [rbx+r11-8], rax
	setb	r10b
	cmp	rcx, r9
	adc	r10, rdx
	dec	rsi
	jne	SHORT $LL23@Square
$LN21@Square:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\square.inc

; 147  :     output[library_legs*2-1] += DoubleAdd(library_legs*2-2, cross+1, output+1, output+1);

	movsxd	rax, DWORD PTR [rdi+4]
	add	rax, rax
	add	QWORD PTR [r12+rax*8-8], r10

; 148  : }

	add	rsp, 8
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z ENDP		; cat::BigRTL::Square
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\compare.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\include\cat\math\bitmath.hpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\include\cat\math\bitmath.hpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divideasm64.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc
_TEXT	SEGMENT
B_used$1$ = 112
this$ = 112
in_a$ = 120
in_b$ = 128
out_q$ = 136
out_r$ = 144
?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z PROC	; cat::BigRTL::DivideProduct

; 84   : {

$LN67:
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 64					; 00000040H
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 82   :     for (int legs = library_legs - 1; legs >= 0; --legs)

	movsxd	rdi, DWORD PTR [rcx+4]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc

; 84   : {

	mov	rsi, r9
	mov	r12, r8
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 82   :     for (int legs = library_legs - 1; legs >= 0; --legs)

	lea	r10d, DWORD PTR [rdi-1]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc

; 84   : {

	mov	rbx, rdx
	mov	r13, rcx
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 82   :     for (int legs = library_legs - 1; legs >= 0; --legs)

	movsxd	r11, r10d
	mov	rax, r11
	test	r10d, r10d
	js	SHORT $LN62@DivideProd
	npad	1
$LL10@DivideProd:

; 83   :         if (in_reg[legs]) return legs + 1;

	cmp	QWORD PTR [r8+rax*8], 0
	jne	SHORT $LN45@DivideProd

; 82   :     for (int legs = library_legs - 1; legs >= 0; --legs)

	dec	r11d
	dec	rax
	jns	SHORT $LL10@DivideProd
$LN62@DivideProd:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc

; 86   :     if (!B_used) return false;

	xor	al, al

; 127  : }

	add	rsp, 64					; 00000040H
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN45@DivideProd:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 83   :         if (in_reg[legs]) return legs + 1;

	lea	r9d, DWORD PTR [r11+1]
	mov	DWORD PTR B_used$1$[rsp], r9d
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc

; 86   :     if (!B_used) return false;

	test	r9d, r9d
	je	SHORT $LN62@DivideProd

; 87   : 
; 88   : 	const Leg *in_a_hi = in_a + library_legs;

	lea	r11, QWORD PTR [rdi*8]
	mov	QWORD PTR [rsp+48], r15
	mov	rcx, rdi
	lea	r8, QWORD PTR [r11+rdx]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 82   :     for (int legs = library_legs - 1; legs >= 0; --legs)

	movsxd	rdx, r10d
	mov	rax, rdx
	test	r10d, r10d
	js	SHORT $LN3@DivideProd
	npad	6
$LL16@DivideProd:

; 83   :         if (in_reg[legs]) return legs + 1;

	cmp	QWORD PTR [r8+rax*8], 0
	jne	$LN46@DivideProd

; 82   :     for (int legs = library_legs - 1; legs >= 0; --legs)

	dec	edx
	dec	rax
	jns	SHORT $LL16@DivideProd
$LN3@DivideProd:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\compare.inc

; 59   :     while (legs-- > 0)

	test	edi, edi
	jle	SHORT $LN1@DivideProd
	mov	r9, rbx
	lea	rax, QWORD PTR [r12+rdi*8]
	sub	r9, r12
$LL22@DivideProd:

; 60   :     {
; 61   :         Leg a = in_a[legs];

	mov	rdx, QWORD PTR [r9+rax-8]

; 62   :         Leg b = in_b[legs];

	mov	r8, QWORD PTR [rax-8]
	lea	rax, QWORD PTR [rax-8]
	dec	rcx

; 63   :         if (a > b) return false;

	cmp	rdx, r8
	ja	SHORT $LN64@DivideProd

; 64   :         if (a < b) return true;

	jb	$LN63@DivideProd

; 59   :     while (legs-- > 0)

	test	rcx, rcx
	jg	SHORT $LL22@DivideProd
$LN64@DivideProd:
	mov	r9d, DWORD PTR B_used$1$[rsp]
$LN1@DivideProd:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 82   :     for (int legs = library_legs - 1; legs >= 0; --legs)

	movsxd	rax, r10d
	test	r10d, r10d
	js	SHORT $LN28@DivideProd
	npad	3
$LL30@DivideProd:

; 83   :         if (in_reg[legs]) return legs + 1;

	cmp	QWORD PTR [rbx+rax*8], 0
	jne	$LN49@DivideProd

; 82   :     for (int legs = library_legs - 1; legs >= 0; --legs)

	dec	r10d
	dec	rax
	jns	SHORT $LL30@DivideProd
$LN28@DivideProd:

; 84   : 
; 85   :     return 0;

	xor	r15d, r15d
$LN31@DivideProd:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc

; 106  :     Leg *A = Get(library_regs - 2); // shifted numerator

	mov	ecx, DWORD PTR [r13]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	mov	rdx, QWORD PTR [r13+8]
	mov	QWORD PTR [rsp+120], rbp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc

; 106  :     Leg *A = Get(library_regs - 2); // shifted numerator

	lea	eax, DWORD PTR [rcx-2]
; File c:\users\jakez\desktop\libcatid\libcatid-master\include\cat\math\bitmath.hpp

; 284  :     _BitScanReverse64((unsigned long*)&index, x);

	movsxd	rsi, r9d
	mov	QWORD PTR [rsp+56], r14
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc

; 110  :     int shift = CAT_LEG_BITS - CAT_USED_BITS(in_b[B_used-1]) - 1;

	mov	ebp, 63					; 0000003fH
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, edi
	cdqe
	lea	r14, QWORD PTR [rdx+rax*8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc

; 107  :     Leg *B = Get(library_regs - 3); // shifted denominator

	lea	eax, DWORD PTR [rcx-3]

; 113  :     Leg A_overflow = ShiftLeft(A_used, in_a, shift, A);

	mov	ecx, r15d
	mov	r9, r14
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, edi
	cdqe
	lea	rdi, QWORD PTR [rdx+rax*8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\include\cat\math\bitmath.hpp

; 284  :     _BitScanReverse64((unsigned long*)&index, x);

	bsr	rax, QWORD PTR [r12+rsi*8-8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc

; 113  :     Leg A_overflow = ShiftLeft(A_used, in_a, shift, A);

	mov	rdx, rbx
	sub	ebp, eax
	mov	r8d, ebp
	call	?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z ; cat::BigRTL::ShiftLeft

; 114  :     ShiftLeft(B_used, in_b, shift, B);

	mov	rdx, r12
	mov	r12d, DWORD PTR B_used$1$[rsp]
	mov	r9, rdi
	mov	r8d, ebp
	mov	ecx, r12d
	mov	rbx, rax
	call	?ShiftLeft@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z ; cat::BigRTL::ShiftLeft
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divideasm64.inc

; 48   :     divide64_core(A_used, A_overflow, A, B_used, B, Q);

	mov	rax, QWORD PTR out_q$[rsp]
	mov	QWORD PTR [rsp+40], rax
	movsxd	rcx, r15d
	mov	r9, rsi
	mov	r8, r14
	mov	rdx, rbx
	mov	QWORD PTR [rsp+32], rdi
	call	divide64_core
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc

; 120  :     memset(out_q + offset, 0, (library_legs*2 - offset) * sizeof(Leg));

	mov	eax, DWORD PTR [r13+4]
	mov	rcx, QWORD PTR out_q$[rsp]
	add	eax, eax
	sub	r15d, r12d
	xor	edx, edx
	inc	r15d
	sub	eax, r15d
	movsxd	r8, eax
	movsxd	rax, r15d
	lea	rcx, QWORD PTR [rcx+rax*8]
	shl	r8, 3
	call	memset

; 121  : 
; 122  :     // Fix remainder shift and zero its unused legs
; 123  :     memset(out_r + B_used, 0, (library_legs - B_used) * sizeof(Leg));

	mov	eax, DWORD PTR [r13+4]
	mov	rbx, QWORD PTR out_r$[rsp]
	sub	eax, r12d
	lea	rcx, QWORD PTR [rbx+rsi*8]
	xor	edx, edx
	movsxd	r8, eax
	shl	r8, 3
	call	memset

; 124  :     ShiftRight(B_used, A, shift, out_r);

	mov	r9, rbx
	mov	r8d, ebp
	mov	rdx, r14
	mov	ecx, r12d
	call	?ShiftRight@BigRTL@cat@@KA_KHPEB_KHPEA_K@Z ; cat::BigRTL::ShiftRight
	mov	r14, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+120]
	mov	r15, QWORD PTR [rsp+48]

; 125  : 
; 126  :     return true;

	mov	al, 1

; 127  : }

	add	rsp, 64					; 00000040H
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN46@DivideProd:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 83   :         if (in_reg[legs]) return legs + 1;

	lea	r15d, DWORD PTR [rdx+1]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc

; 91   : 	if (A_used) A_used += library_legs;

	test	r15d, r15d
	je	$LN3@DivideProd
	add	r15d, edi

; 92   : 	else

	jmp	$LN31@DivideProd
$LN63@DivideProd:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	mov	rcx, QWORD PTR out_r$[rsp]
	mov	r8, r11
	mov	rdx, rbx
	call	memcpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divide.inc

; 98   : 			memset(out_q, 0, library_legs * 2);

	mov	eax, DWORD PTR [r13+4]
	xor	edx, edx
	add	eax, eax
	mov	rcx, rsi
	movsxd	r8, eax
	call	memset
	mov	r15, QWORD PTR [rsp+48]

; 99   : 			return true;

	mov	al, 1

; 127  : }

	add	rsp, 64					; 00000040H
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN49@DivideProd:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 83   :         if (in_reg[legs]) return legs + 1;

	lea	r15d, DWORD PTR [r10+1]
	jmp	$LN31@DivideProd
?DivideProduct@BigRTL@cat@@QEAA_NPEB_K0PEA_K1@Z ENDP	; cat::BigRTL::DivideProduct
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\div\divideasm64.inc
_TEXT	SEGMENT
A_used$ = 8
A_overflow$ = 16
A$ = 24
B_used$ = 32
B$ = 40
Q$ = 48
?DivideCore@BigRTL@cat@@KAXH_KPEA_KH11@Z PROC		; cat::BigRTL::DivideCore

; 48   :     divide64_core(A_used, A_overflow, A, B_used, B, Q);

	movsxd	r9, r9d
	movsxd	rcx, ecx
	jmp	divide64_core
?DivideCore@BigRTL@cat@@KAXH_KPEA_KH11@Z ENDP		; cat::BigRTL::DivideCore
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\include\cat\io\log.hpp
;	COMDAT ??$?6$$BY0CH@$$CBD@Recorder@cat@@QEAAAEAV01@AEAY0CH@$$CBD@Z
_TEXT	SEGMENT
this$ = 48
t$dead$ = 56
??$?6$$BY0CH@$$CBD@Recorder@cat@@QEAAAEAV01@AEAY0CH@$$CBD@Z PROC ; cat::Recorder::operator<<<char const [39]>, COMDAT

; 139  : 	{

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 140  : 		_msg << t;

	lea	rdx, OFFSET FLAT:??_C@_0CH@OJHHLGFI@Unable?5to?5allocate?5leg?5array?5for@
	add	rcx, 16
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 141  : 		return *this;

	mov	rax, rbx

; 142  : 	}

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$?6$$BY0CH@$$CBD@Recorder@cat@@QEAAAEAV01@AEAY0CH@$$CBD@Z ENDP ; cat::Recorder::operator<<<char const [39]>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$CombaMul@$05@@YAXPEB_K0PEA_K@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
out$ = 24
??$CombaMul@$05@@YAXPEB_K0PEA_K@Z PROC			; CombaMul<6>, COMDAT

; 85   : {

$LN98:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi

; 86   : 	Leg c0, c1 = 0, c2;
; 87   : 	CAT_LEG_MUL(a[0], b[0], c0, out[0]);

	mov	rax, QWORD PTR [rdx]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mul	QWORD PTR [rcx]
	mov	QWORD PTR [r8], rax

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdi]

; 86   : 	Leg c0, c1 = 0, c2;
; 87   : 	CAT_LEG_MUL(a[0], b[0], c0, out[0]);

	mov	r10, rdx

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rcx+8]
	add	r10, rax
	mov	rcx, rdx
	cmp	r10, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	adc	rcx, 0

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx]
	add	r10, rax
	cmp	r10, rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rsi+8], r10

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdi]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	xor	r11d, r11d
	add	rcx, rdx
	mov	r8d, r11d

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	r9d, r11d

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	cmp	rcx, rdx

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	r10d, r11d

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	setb	r8b

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rbx+16]
	add	rcx, rax
	cmp	rcx, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	setb	r9b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+8]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+16]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx]
	add	rcx, rax
	cmp	rcx, rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rsi+16], rcx

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdi]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	r9, r11

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rbx+24]
	add	r8, rax
	cmp	r8, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	setb	r10b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+16]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+16]
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	r10, r11
	mul	QWORD PTR [rbx+8]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	r10, r11
	mul	QWORD PTR [rbx]
	add	r8, rax
	cmp	r8, rax
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rsi+24], r8

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdi]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	r10, r11

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	r8d, r11d
	mov	ecx, r11d
	mul	QWORD PTR [rbx+32]
	add	r9, rax
	cmp	r9, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	adc	rdx, r11
	add	r10, rdx
	cmp	r10, rdx
	setb	r8b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+24]
	add	r9, rax
	cmp	r9, rax
	mov	rax, QWORD PTR [rdi+16]
	adc	rdx, r11
	add	r10, rdx
	cmp	r10, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx+16]
	add	r9, rax
	cmp	r9, rax
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, r11
	add	r10, rdx
	cmp	r10, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx+8]
	add	r9, rax
	cmp	r9, rax
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, r11
	add	r10, rdx
	cmp	r10, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx]
	add	r9, rax
	cmp	r9, rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rsi+32], r9

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdi]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11
	add	r10, rdx
	cmp	r10, rdx
	adc	r8, r11

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rbx+40]
	add	r10, rax
	cmp	r10, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	setb	cl

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+32]
	add	r10, rax
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+16]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+24]
	add	r10, rax
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+16]
	add	r10, rax
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+8]
	add	r10, rax
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	r9d, r11d

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx]
	add	r10, rax
	cmp	r10, rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rsi+40], r10

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+40]
	add	r8, rax
	cmp	r8, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+16]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	setb	r9b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+32]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx+24]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx+16]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+40]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx+8]
	add	r8, rax
	cmp	r8, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rsi+48], r8

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	r8d, r11d

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+40]
	add	rcx, rax
	cmp	rcx, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	setb	r8b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+32]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx+24]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	r8, r11
	mov	rax, QWORD PTR [rdi+40]
	mul	QWORD PTR [rbx+16]
	add	rcx, rax
	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rsi+56], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	ecx, r11d

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	r9, rdx
	cmp	r9, rdx
	adc	r8, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+40]
	add	r9, rax
	cmp	r9, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+32]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	setb	cl

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+32]
	add	r9, rax
	cmp	r9, rax
	mov	rax, QWORD PTR [rdi+40]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+24]
	add	r9, rax
	cmp	r9, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rsi+64], r9

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+40]
	add	r8, rax
	cmp	r8, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	setb	r11b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+32]
	add	r8, rax
	cmp	r8, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rsi+72], r8

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+40]

; 88   : 	Comba1(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<1>());
; 89   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r11, 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+40]

; 88   : 	Comba1(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<1>());
; 89   : }

	mov	rbx, QWORD PTR [rsp+8]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rsi+80], rcx
	adc	rdx, 0
	lea	rax, QWORD PTR [rdx+r11]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rsi+88], rax

; 88   : 	Comba1(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<1>());
; 89   : }

	mov	rsi, QWORD PTR [rsp+16]
	ret	0
??$CombaMul@$05@@YAXPEB_K0PEA_K@Z ENDP			; CombaMul<6>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$CombaMul@$07@@YAXPEB_K0PEA_K@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
out$ = 24
??$CombaMul@$07@@YAXPEB_K0PEA_K@Z PROC			; CombaMul<8>, COMDAT

; 85   : {

$LN162:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi

; 86   : 	Leg c0, c1 = 0, c2;
; 87   : 	CAT_LEG_MUL(a[0], b[0], c0, out[0]);

	mov	rax, QWORD PTR [rdx]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mul	QWORD PTR [rcx]
	mov	QWORD PTR [r8], rax

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdi]

; 86   : 	Leg c0, c1 = 0, c2;
; 87   : 	CAT_LEG_MUL(a[0], b[0], c0, out[0]);

	mov	r10, rdx

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rcx+8]
	add	r10, rax
	mov	rcx, rdx
	cmp	r10, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	adc	rcx, 0

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx]
	add	r10, rax
	cmp	r10, rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rsi+8], r10

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdi]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	xor	r11d, r11d
	add	rcx, rdx
	mov	r8d, r11d

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	r9d, r11d

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	cmp	rcx, rdx
	setb	r8b

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rbx+16]
	add	rcx, rax
	cmp	rcx, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	setb	r9b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+8]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+16]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx]
	add	rcx, rax
	cmp	rcx, rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rsi+16], rcx

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdi]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	ecx, r11d

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	r8, rdx
	cmp	r8, rdx
	adc	r9, r11

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rbx+24]
	add	r8, rax
	cmp	r8, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	setb	cl

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+16]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+16]
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+8]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx]
	add	r8, rax
	cmp	r8, rax
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rsi+24], r8

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdi]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rcx, r11

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	r8d, r11d
	mov	r10d, r11d
	mul	QWORD PTR [rbx+32]
	add	r9, rax
	cmp	r9, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	setb	r8b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+24]
	add	r9, rax
	cmp	r9, rax
	mov	rax, QWORD PTR [rdi+16]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx+16]
	add	r9, rax
	cmp	r9, rax
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx+8]
	add	r9, rax
	cmp	r9, rax
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx]
	add	r9, rax
	cmp	r9, rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rsi+32], r9

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdi]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r8, r11

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rbx+40]
	add	rcx, rax
	cmp	rcx, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	setb	r10b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+32]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+16]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	r10, r11
	mul	QWORD PTR [rbx+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	r10, r11
	mul	QWORD PTR [rbx+16]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	r10, r11
	mul	QWORD PTR [rbx+8]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+40]

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	r9d, r11d

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	r10, r11
	mul	QWORD PTR [rbx]
	add	rcx, rax
	cmp	rcx, rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rsi+40], rcx

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdi]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	ecx, r11d

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	r8, rdx
	cmp	r8, rdx
	adc	r10, r11

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rbx+48]
	add	r8, rax
	cmp	r8, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	adc	rdx, r11
	add	r10, rdx
	cmp	r10, rdx
	setb	cl

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+40]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+16]
	adc	rdx, r11
	add	r10, rdx
	cmp	r10, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+32]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, r11
	add	r10, rdx
	cmp	r10, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+24]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, r11
	add	r10, rdx
	cmp	r10, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+16]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+40]
	adc	rdx, r11
	add	r10, rdx
	cmp	r10, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+8]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, r11
	add	r10, rdx
	cmp	r10, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx]
	add	r8, rax
	cmp	r8, rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rsi+48], r8

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdi]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11
	add	r10, rdx
	cmp	r10, rdx
	adc	rcx, r11

; 63   : }
; 64   : 
; 65   : 
; 66   : //// Outer loop: First Half
; 67   : 
; 68   : template<int L, int Count> CAT_INLINE void Comba1(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 69   : {
; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rbx+56]
	add	r10, rax
	cmp	r10, rax
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	setb	r9b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	r8d, r11d

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+48]
	add	r10, rax
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+16]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx+40]
	add	r10, rax
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx+32]
	add	r10, rax
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx+24]
	add	r10, rax
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+40]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx+16]
	add	r10, rax
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx+8]
	add	r10, rax
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+56]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx]
	add	r10, rax
	cmp	r10, rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rsi+56], r10

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+56]
	add	rcx, rax
	cmp	rcx, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+16]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	setb	r8b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx+40]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	r8, r11
	mov	rax, QWORD PTR [rdi+32]
	mul	QWORD PTR [rbx+32]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+40]
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx+16]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+56]
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx+8]
	add	rcx, rax
	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rsi+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	ecx, r11d

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	r9, rdx
	cmp	r9, rdx
	adc	r8, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+56]
	add	r9, rax
	cmp	r9, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	setb	cl

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+48]
	add	r9, rax
	cmp	r9, rax
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+40]
	add	r9, rax
	cmp	r9, rax
	mov	rax, QWORD PTR [rdi+40]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+32]
	add	r9, rax
	cmp	r9, rax
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+24]
	add	r9, rax
	cmp	r9, rax
	mov	rax, QWORD PTR [rdi+56]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+16]
	add	r9, rax
	cmp	r9, rax
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rsi+72], r9

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rcx, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	r9d, r11d
	mul	QWORD PTR [rbx+56]
	add	r8, rax
	cmp	r8, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+32]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	setb	r9b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+48]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+40]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx+40]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx+32]
	add	r8, rax
	cmp	r8, rax
	mov	rax, QWORD PTR [rdi+56]
	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11
	mul	QWORD PTR [rbx+24]
	add	r8, rax
	cmp	r8, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rsi+80], r8

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	r8d, r11d

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rdx
	cmp	rcx, rdx
	adc	r9, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+56]
	add	rcx, rax
	cmp	rcx, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	setb	r8b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx+40]
	add	rcx, rax
	cmp	rcx, rax
	mov	rax, QWORD PTR [rdi+56]
	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	r8, r11
	mul	QWORD PTR [rbx+32]
	add	rcx, rax
	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rsi+88], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+40]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11
	add	r9, rdx
	cmp	r9, rdx
	adc	r8, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+56]
	add	r9, rax
	mov	ecx, r11d
	cmp	r9, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+48]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	setb	cl

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+48]
	add	r9, rax
	cmp	r9, rax
	mov	rax, QWORD PTR [rdi+56]
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11
	mul	QWORD PTR [rbx+40]
	add	r9, rax
	cmp	r9, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rsi+96], r9

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+48]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	rcx, r11

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+56]
	add	r8, rax
	cmp	r8, rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, r11
	add	rcx, rdx
	cmp	rcx, rdx
	setb	r11b

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+48]
	add	r8, rax
	cmp	r8, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rsi+104], r8

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+56]

; 88   : 	Comba1(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<1>());
; 89   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	add	rcx, rdx
	cmp	rcx, rdx
	adc	r11, 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+56]

; 88   : 	Comba1(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<1>());
; 89   : }

	mov	rbx, QWORD PTR [rsp+8]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rsi+112], rcx
	adc	rdx, 0
	lea	rax, QWORD PTR [rdx+r11]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rsi+120], rax

; 88   : 	Comba1(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<1>());
; 89   : }

	mov	rsi, QWORD PTR [rsp+16]
	ret	0
??$CombaMul@$07@@YAXPEB_K0PEA_K@Z ENDP			; CombaMul<8>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z PROC ; Comba1<6,1>, COMDAT

; 69   : {

$LN96:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdx]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	r11, QWORD PTR c2$[rsp]
	mov	r14, rdx
	mov	rsi, rcx
	mov	r15, r9
	mov	rbp, r8
	mul	QWORD PTR [rcx+8]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rcx]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+8], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+8]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+16], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+16]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+24]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r15], rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+24], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+32]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+16]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+24]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+32], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+32]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+8]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+40], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+32]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+24]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+32]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+40]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [r15], rax
	cmp	rax, rdx
	adc	QWORD PTR [rbx], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+48], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+40]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+24]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+56], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+32]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	r8, QWORD PTR [r15]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [r15], rax
	cmp	rax, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+40]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rsi, QWORD PTR [rsp+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rax, QWORD PTR [rbx]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbx, QWORD PTR [rsp+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rax, rdx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+88], rax

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbp, QWORD PTR [rsp+32]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	setb	dil
	mov	QWORD PTR [r11], rdi

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rdi, QWORD PTR [rsp+48]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z ENDP ; Comba1<6,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z PROC ; Comba1<8,1>, COMDAT

; 69   : {

$LN160:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdx]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	r11, QWORD PTR c2$[rsp]
	mov	r14, rdx
	mov	rsi, rcx
	mov	r15, r9
	mov	rbp, r8
	mul	QWORD PTR [rcx+8]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rcx]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+8], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+8]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+rcx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+16], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+16]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+24]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r15], rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+24], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+32]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+16]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+24]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+32], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+32]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+8]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+rcx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+40], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+16]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+24]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+32]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	mov	QWORD PTR [r15], r9
	cmp	r9, rdx
	adc	QWORD PTR [rbx], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+48]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [r15], rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+48], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+16]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+24]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+48]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [rax+r8]
	mov	QWORD PTR [r15], rcx
	cmp	rcx, rax
	mov	rax, QWORD PTR [r14+56]
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+56], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+24]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	mov	eax, edi
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+32]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+40]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+48]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+rcx]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+56]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [r15], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r15], r8
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+56]
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+88], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+48]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+56]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r15], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+96], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+104], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+56]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rsi, QWORD PTR [rsp+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbx, QWORD PTR [rsp+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rax, QWORD PTR [r11]
	cmp	rax, rdx
	setb	dil
	mov	QWORD PTR [r15], rdi

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rdi, QWORD PTR [rsp+48]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+112], rcx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+120], rax

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbp, QWORD PTR [rsp+32]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z ENDP ; Comba1<8,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0A@$00$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$00@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0A@$00$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$00@@2@Z PROC ; Comba2<0,1,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+8]
	mul	QWORD PTR [rcx]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$0A@$00$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$00@@2@Z ENDP ; Comba2<0,1,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z PROC ; Comba1<6,2>, COMDAT

; 69   : {

$LN90:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdx]
	mov	r11, QWORD PTR c2$[rsp]
	mov	r14, QWORD PTR c1$[rsp]
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rbp, r8
	mov	r15, r9
	mul	QWORD PTR [rcx+16]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	ebx, ebx
	add	QWORD PTR [r14], rdx
	mov	r8, QWORD PTR [r14]
	mov	eax, ebx
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rcx+8]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx
	mov	rax, QWORD PTR [rsi+16]
	mul	QWORD PTR [rdi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+16], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rsi]
	mul	QWORD PTR [rdi+24]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rdi+16]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [rsi+16]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+r9]
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rsi+24]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [rdx+r8]
	mov	QWORD PTR [r11], rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+24], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	cmp	rax, rdx
	adc	QWORD PTR [r15], rbx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rsi]
	mul	QWORD PTR [rdi+32]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	adc	rdx, rbx
	mov	eax, ebx
	add	QWORD PTR [r15], rdx
	mov	r8, QWORD PTR [r15]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rdi+24]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [rsi+16]
	adc	rdx, rbx
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r14], rbx
	mul	QWORD PTR [rdi+16]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rsi+24]
	adc	rdx, rbx
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rbx
	mul	QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [rsi+32]
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx
	mul	QWORD PTR [rdi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+32], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rsi]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rdi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r14], rdx
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rdi+32]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rbx
	mov	rax, QWORD PTR [rsi+16]
	mul	QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx
	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+16]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rbx
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rbx
	mov	rax, QWORD PTR [rsi+32]
	mul	QWORD PTR [rdi+8]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+rcx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx
	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+40], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rdi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+16]
	mul	QWORD PTR [rdi+32]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [rsi+24]
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rsi+32]
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+16]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rsi+40]
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [rax+r9]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [r11], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+48], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r15], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+16]
	mul	QWORD PTR [rdi+40]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	r8, QWORD PTR [r15]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r11], r9
	adc	rdx, rbx
	mov	rax, QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r14], rbx
	mul	QWORD PTR [rdi+24]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rsi+40]
	adc	rdx, rbx
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rbx
	mul	QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+56], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r14], rdx
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+32]
	mul	QWORD PTR [rdi+32]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx
	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+32]
	mul	QWORD PTR [rdi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r11], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r15], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+40]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	rax, QWORD PTR [r15]
	cmp	rax, rdx
	setb	bl

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rsi, QWORD PTR [rsp+40]
	mov	rdi, QWORD PTR [rsp+48]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	QWORD PTR [r14], rbx

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbx, QWORD PTR [rsp+24]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+88], rax

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbp, QWORD PTR [rsp+32]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z ENDP ; Comba1<6,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z PROC ; Comba1<8,2>, COMDAT

; 69   : {

$LN154:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdx]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	r14, rdx
	mov	rsi, rcx
	mov	rbp, r8
	mov	r15, r9
	mul	QWORD PTR [rcx+16]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rcx+8]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+16], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+16]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+24]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [r11], rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+24], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	cmp	rax, rdx
	adc	QWORD PTR [r15], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+32]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	adc	rdx, rdi
	mov	eax, edi
	add	QWORD PTR [r15], rdx
	mov	r8, QWORD PTR [r15]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+16]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+24]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+32], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rcx, QWORD PTR [rbx]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+32]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+8]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+40], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+16]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+24]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [r14+32]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+40]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+48]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [r11], rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+48], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r15], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	r8, QWORD PTR [r15]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+16]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+24]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+48]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [r14+56]
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+56], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rcx, QWORD PTR [rbx]
	mov	eax, edi
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+24]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+32]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+40]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [r14+48]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+24]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+rcx]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+56]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [r11], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r15], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	r8, QWORD PTR [r15]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+48]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [r14+56]
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rcx, QWORD PTR [rbx]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+88], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+48]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+56]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r11], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+96], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r15], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	r8, QWORD PTR [r15]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+48]
	add	rcx, rax
	mov	QWORD PTR [r11], rcx
	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+104], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+56]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rsi, QWORD PTR [rsp+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rax, QWORD PTR [rbx]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbx, QWORD PTR [rsp+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rax, rdx
	setb	dil
	mov	QWORD PTR [r11], rdi

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rdi, QWORD PTR [rsp+48]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+112], rcx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+120], rax

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbp, QWORD PTR [rsp+32]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z ENDP ; Comba1<8,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0?0$01@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$01@@2@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0?0$01@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$01@@2@Z PROC ; Comba2<-1,2>, COMDAT

; 47   : }

	ret	0
??$Comba2@$0?0$01@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$01@@2@Z ENDP ; Comba2<-1,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$00$00$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@22@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$00$00$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@22@Z PROC ; Comba2<1,1,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+8]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+8]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mov	rax, QWORD PTR [r11+16]
	mul	QWORD PTR [rcx]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$00$00$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@22@Z ENDP ; Comba2<1,1,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z PROC ; Comba1<6,3>, COMDAT

; 69   : {

$LN82:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdx]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	r11, QWORD PTR c2$[rsp]
	mov	r14, rdx
	mov	rsi, rcx
	mov	rbp, r8
	mov	r15, r9
	mul	QWORD PTR [rcx+24]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rcx+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	mov	QWORD PTR [rbx], r8
	mov	rax, QWORD PTR [r14+16]
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	mov	QWORD PTR [rbx], r8
	mov	rax, QWORD PTR [r14+24]
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rbx], rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+24], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+32]
	add	QWORD PTR [rbx], rax
	mov	rcx, QWORD PTR [rbx]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r9], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [rbx], r9
	mov	rax, QWORD PTR [r14+16]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [rbx], r8
	mov	rax, QWORD PTR [r14+24]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [rax+r8]
	mov	QWORD PTR [rbx], rcx
	cmp	rcx, rax
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+32], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+32]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [rbx], rdi
	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [rbx], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+8]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+rcx]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+40], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rcx, QWORD PTR [rbx]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+32]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [rbx], r9
	mov	rax, QWORD PTR [r14+24]
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	mov	QWORD PTR [rbx], r8
	mov	rax, QWORD PTR [r14+32]
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	mov	QWORD PTR [rbx], r8
	mov	rax, QWORD PTR [r14+40]
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [rax+r9]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [rbx], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+48], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+40]
	add	QWORD PTR [rbx], rax
	mov	rcx, QWORD PTR [rbx]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [rbx], r9
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+24]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [rbx], r8
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+56], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	mov	eax, edi
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+32]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [rbx], rax
	cmp	rax, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+40]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rsi, QWORD PTR [rsp+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	add	QWORD PTR [rbx], rax
	mov	rcx, QWORD PTR [rbx]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbx, QWORD PTR [rsp+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rax, QWORD PTR [r11]
	cmp	rax, rdx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+88], rax

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbp, QWORD PTR [rsp+32]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	setb	dil
	mov	QWORD PTR [r15], rdi

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rdi, QWORD PTR [rsp+48]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z ENDP ; Comba1<6,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z PROC ; Comba1<8,3>, COMDAT

; 69   : {

$LN146:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdx]
	mov	r14, QWORD PTR c1$[rsp]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rbp, r8
	mov	r15, r9
	mul	QWORD PTR [rcx+24]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	ebx, ebx
	add	QWORD PTR [r14], rdx
	mov	r8, QWORD PTR [r14]
	mov	eax, ebx
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rcx+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+16]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+24]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+24], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rbx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rsi]
	mul	QWORD PTR [rdi+32]
	add	QWORD PTR [r14], rax
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r9], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rdi+24]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+16]
	adc	rdx, rbx
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+24]
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [r8+rax]
	mov	QWORD PTR [r14], rcx
	cmp	rcx, rax
	mov	rax, QWORD PTR [rsi+32]
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+32], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rsi]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rdi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rdi+32]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+16]
	mul	QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+16]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rbx
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+32]
	mul	QWORD PTR [rdi+8]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+40], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rsi]
	mul	QWORD PTR [rdi+48]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r14], rdx
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rdi+40]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+16]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+24]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+24]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rbx
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rsi+32]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+40]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+48]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+48], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rbx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rsi]
	mul	QWORD PTR [rdi+56]
	add	QWORD PTR [r14], rax
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rdi+48]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+16]
	adc	rdx, rbx
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+40]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r14], r8
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rbx
	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rsi+32]
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+24]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+40]
	adc	rdx, rbx
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+48]
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rsi+56]
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+56], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+16]
	mul	QWORD PTR [rdi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+32]
	mul	QWORD PTR [rdi+32]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rbx
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+24]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+48]
	mul	QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+56]
	mul	QWORD PTR [rdi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+16]
	mul	QWORD PTR [rdi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r14], rdx
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+32]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+40]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+32]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rbx
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rsi+48]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+24]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+rcx]
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+56]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [rdx+r8]
	mov	QWORD PTR [r14], rax
	cmp	rax, rdx
	adc	QWORD PTR [r11], rbx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+56]
	add	QWORD PTR [r14], rax
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+32]
	mul	QWORD PTR [rdi+48]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+40]
	adc	rdx, rbx
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+40]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+48]
	adc	rdx, rbx
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rsi+56]
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+48]
	mul	QWORD PTR [rdi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+56]
	mul	QWORD PTR [rdi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+88], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r14], rdx
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+48]
	mul	QWORD PTR [rdi+48]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rcx+rdx]
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+56]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+96], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+48]
	mul	QWORD PTR [rdi+56]
	add	QWORD PTR [r14], rax
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+56]
	mul	QWORD PTR [rdi+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+104], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+56]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rsi, QWORD PTR [rsp+40]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+56]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rdi, QWORD PTR [rsp+48]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	rax, QWORD PTR [r15]
	cmp	rax, rdx
	setb	bl
	mov	QWORD PTR [r14], rbx

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbx, QWORD PTR [rsp+24]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+112], rcx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+120], rax

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbp, QWORD PTR [rsp+32]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z ENDP ; Comba1<8,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0A@$01$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$01@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0A@$01$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$01@@2@Z PROC ; Comba2<0,2,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+16]
	mul	QWORD PTR [rcx]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$0A@$01$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$01@@2@Z ENDP ; Comba2<0,2,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$01$00$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$00@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$01$00$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$00@@2@Z PROC ; Comba2<2,1,2>, COMDAT

; 40   : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+8]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+16]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	rax, QWORD PTR [rdi+16]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+8]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rdi+24]
	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$01$00$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$00@@2@Z ENDP ; Comba2<2,1,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z PROC ; Comba1<6,4>, COMDAT

; 69   : {

$LN72:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdx]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	r14, rdx
	mov	rsi, rcx
	mov	rbp, r8
	mov	r15, r9
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rcx+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	mov	rax, QWORD PTR [r14+16]
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+24]
	adc	rdx, rdi
	lea	r10, QWORD PTR [r8+rdx]
	cmp	r10, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	r8, QWORD PTR [r10+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+32], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+32]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+8]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+40], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+32]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+24]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+32]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	add	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+40]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [r15], rax
	cmp	rax, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+48], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+40]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+24]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+56], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+32]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	r8, QWORD PTR [r15]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	mov	QWORD PTR [r15], rax
	cmp	rax, rdx
	adc	QWORD PTR [rbx], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+40]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rsi, QWORD PTR [rsp+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rax, QWORD PTR [rbx]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbx, QWORD PTR [rsp+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rax, rdx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+88], rax

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbp, QWORD PTR [rsp+32]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	setb	dil
	mov	QWORD PTR [r11], rdi

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rdi, QWORD PTR [rsp+48]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z ENDP ; Comba1<6,4>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z PROC ; Comba1<8,4>, COMDAT

; 69   : {

$LN136:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdx]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	r14, rdx
	mov	rsi, rcx
	mov	rbp, r8
	mov	r15, r9
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rcx+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	mov	rax, QWORD PTR [r14+16]
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+24]
	adc	rdx, rdi
	lea	r10, QWORD PTR [r8+rdx]
	cmp	r10, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	r8, QWORD PTR [r10+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+32], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+32]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+8]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+40], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+16]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+24]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+32]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+40]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+48]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r15], rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+48], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+16]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+24]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+48]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+56]
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+56], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+24]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+32]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+40]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+48]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+56]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r15], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+48]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+88], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+48]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+rcx]
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+56]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [r15], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+96], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	cmp	rax, rdx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+48]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+104], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+56]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rsi, QWORD PTR [rsp+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbx, QWORD PTR [rsp+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rax, QWORD PTR [r11]
	cmp	rax, rdx
	setb	dil
	mov	QWORD PTR [r15], rdi

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rdi, QWORD PTR [rsp+48]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+112], rcx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+120], rax

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbp, QWORD PTR [rsp+32]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z ENDP ; Comba1<8,4>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0?0$02@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$02@@2@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0?0$02@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$02@@2@Z PROC ; Comba2<-1,3>, COMDAT

; 47   : }

	ret	0
??$Comba2@$0?0$02@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$02@@2@Z ENDP ; Comba2<-1,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$00$01$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$01@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$00$01$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$01@@2@Z PROC ; Comba2<1,2,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+16]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+8]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	mov	rax, QWORD PTR [r11+24]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mul	QWORD PTR [rcx]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$00$01$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$01@@2@Z ENDP ; Comba2<1,2,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$02$00$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$00@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$02$00$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$00@@2@Z PROC ; Comba2<3,1,3>, COMDAT

; 40   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+8]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rsi, r8
	mov	rbx, rcx
	mov	r14, r9
	mul	QWORD PTR [rcx+24]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+16]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+8]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	mov	QWORD PTR [rsi], r8
	mov	rax, QWORD PTR [rdi+32]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	r10, QWORD PTR [r9+rdx]
	cmp	r10, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r10+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$02$00$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$00@@2@Z ENDP ; Comba2<3,1,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$05$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$04@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$05$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$04@@@Z PROC ; Comba1<6,5>, COMDAT

; 69   : {

$LN60:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdx]
	mov	r11, QWORD PTR c2$[rsp]
	mov	r14, QWORD PTR c1$[rsp]
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rbp, r8
	mov	r15, r9
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	ebx, ebx
	add	QWORD PTR [r14], rdx
	mov	r8, QWORD PTR [r14]
	mov	eax, ebx
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx
	mov	rax, QWORD PTR [rsi+16]
	mul	QWORD PTR [rdi+24]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rbx
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rbx
	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rbx
	mov	rax, QWORD PTR [rsi+32]
	mul	QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx
	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+40], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rdi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+16]
	mul	QWORD PTR [rdi+32]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r11], r9
	adc	QWORD PTR [r15], rbx
	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rsi+32]
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+16]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rsi+40]
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r11], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+48], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r15], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+16]
	mul	QWORD PTR [rdi+40]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	r8, QWORD PTR [r15]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+32]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [rsi+32]
	adc	rdx, rbx
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r14], rbx
	mul	QWORD PTR [rdi+24]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rsi+40]
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rbx
	mul	QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+56], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r14], rdx
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+32]
	mul	QWORD PTR [rdi+32]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+rcx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx
	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+32]
	mul	QWORD PTR [rdi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [rdx+r8]
	mov	QWORD PTR [r11], rax
	cmp	rax, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r15], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+40]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rsi, QWORD PTR [rsp+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+40]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rdi, QWORD PTR [rsp+48]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	rax, QWORD PTR [r15]
	cmp	rax, rdx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+88], rax

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbp, QWORD PTR [rsp+32]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	setb	bl
	mov	QWORD PTR [r14], rbx

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbx, QWORD PTR [rsp+24]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$05$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$04@@@Z ENDP ; Comba1<6,5>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z PROC ; Comba1<8,5>, COMDAT

; 69   : {

$LN124:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdx]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	r14, rdx
	mov	rsi, rcx
	mov	rbp, r8
	mov	r15, r9
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+40], rcx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r11], r9
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+24]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [r14+32]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+40]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+48]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [r11], rax

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+48], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r15], rdi

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [r14]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	r8, QWORD PTR [r15]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+16]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+24]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [rax+r8]
	mov	QWORD PTR [r11], rcx
	cmp	rcx, rax
	adc	rdx, rdi
	mov	rax, QWORD PTR [r14+32]
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+16]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+48]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [r14+56]
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+56], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rcx, QWORD PTR [rbx]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+24]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+32]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+40]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [r14+48]
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+24]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+rcx]
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+56]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	mov	QWORD PTR [r11], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	cmp	rax, rdx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r15], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	r8, QWORD PTR [r15]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+48]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [r14+56]
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rcx, QWORD PTR [rbx]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+88], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+48]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+rcx]
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [r14+56]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [r11], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+96], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r15], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	r8, QWORD PTR [r15]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+104], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+56]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rsi, QWORD PTR [rsp+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rax, QWORD PTR [rbx]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbx, QWORD PTR [rsp+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rax, rdx
	setb	dil
	mov	QWORD PTR [r11], rdi

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rdi, QWORD PTR [rsp+48]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+112], rcx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+120], rax

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbp, QWORD PTR [rsp+32]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z ENDP ; Comba1<8,5>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0A@$02$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$02@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0A@$02$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$02@@2@Z PROC ; Comba2<0,3,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+24]
	mul	QWORD PTR [rcx]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$0A@$02$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$02@@2@Z ENDP ; Comba2<0,3,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$01$01$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@22@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$01$01$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@22@Z PROC ; Comba2<2,2,2>, COMDAT

; 40   : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+16]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rsi, r8
	mov	rbx, rcx
	mov	r14, r9
	mul	QWORD PTR [rcx+16]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+8]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx
	mov	rax, QWORD PTR [rdi+32]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$01$01$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@22@Z ENDP ; Comba2<2,2,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$00$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$00@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$00$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$00@@2@Z PROC ; Comba2<4,1,4>, COMDAT

; 40   : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+8]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+16]
	mul	QWORD PTR [rcx+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+24]
	mul	QWORD PTR [rbx+16]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	adc	rdx, 0
	lea	rcx, QWORD PTR [r9+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+32]
	mul	QWORD PTR [rbx+8]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	adc	rdx, 0
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$03$00$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$00@@2@Z ENDP ; Comba2<4,1,4>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@3@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@3@Z PROC ; Comba1<6>, COMDAT

; 77   : {

$LN46:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+8]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	r11, QWORD PTR c2$[rsp]

; 77   : {

	mov	rbp, rdx
	mov	rsi, rcx
	mov	r15, r8
	mov	r14, r9

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+16]
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	mov	QWORD PTR [rbx], r8
	mov	rax, QWORD PTR [rbp+24]
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	r10, QWORD PTR [rdx+r8]
	cmp	r10, rdx
	mov	QWORD PTR [rbx], r10
	mov	rax, QWORD PTR [rbp+32]
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r9]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r10]
	cmp	r8, rdx
	mov	QWORD PTR [rbx], r8
	mov	rax, QWORD PTR [rbp+40]
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [rbx], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+48], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+16]
	mul	QWORD PTR [rsi+40]
	add	QWORD PTR [rbx], rax
	mov	rcx, QWORD PTR [rbx]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+24]
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [rbx], r9
	mov	rax, QWORD PTR [rbp+32]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+24]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [rbx], r8
	mov	rax, QWORD PTR [rbp+40]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+56], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r14], rdx
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+32]
	mul	QWORD PTR [rsi+32]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+32]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [rbx], rax
	cmp	rax, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]

; 78   : 	Comba3(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<L-2>());
; 79   : }

	mov	rbp, QWORD PTR [rsp+32]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	add	QWORD PTR [rbx], rax
	mov	rcx, QWORD PTR [rbx]

; 78   : 	Comba3(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<L-2>());
; 79   : }

	mov	rbx, QWORD PTR [rsp+24]
	mov	rsi, QWORD PTR [rsp+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+80], rcx
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rax, QWORD PTR [r11]
	cmp	rax, rdx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [r15+88], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	setb	dil
	mov	QWORD PTR [r14], rdi

; 78   : 	Comba3(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<L-2>());
; 79   : }

	mov	rdi, QWORD PTR [rsp+48]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@3@Z ENDP ; Comba1<6>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z PROC ; Comba1<8,6>, COMDAT

; 69   : {

$LN110:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdx]
	mov	r14, QWORD PTR c1$[rsp]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rbp, r8
	mov	r15, r9
	mul	QWORD PTR [rcx+48]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	ebx, ebx
	add	QWORD PTR [r14], rdx
	mov	r8, QWORD PTR [r14]
	mov	eax, ebx
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rcx+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+16]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rbx
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rsi+24]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+24]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+32]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+40]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+48]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [r14], rax
	cmp	rax, rdx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+48], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rbx

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rsi]
	mul	QWORD PTR [rdi+56]
	add	QWORD PTR [r14], rax
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rax
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	mov	eax, ebx
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]
	mul	QWORD PTR [rdi+48]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+16]
	adc	rdx, rbx
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+40]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+24]
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rsi+32]
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+24]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+40]
	adc	rdx, rbx
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+16]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+48]
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rsi+56]
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+56], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+16]
	mul	QWORD PTR [rdi+48]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+32]
	mul	QWORD PTR [rdi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rbx
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+24]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+48]
	mul	QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+56]
	mul	QWORD PTR [rdi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+16]
	mul	QWORD PTR [rdi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r14], rdx
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+32]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+r9]
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+40]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+32]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rbx
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rsi+48]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+24]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+rcx]
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+56]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+56]
	add	QWORD PTR [r14], rax
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+32]
	mul	QWORD PTR [rdi+48]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+40]
	adc	rdx, rbx
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+40]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+48]
	adc	rdx, rbx
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rsi+56]
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	mov	eax, ebx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+48]
	mul	QWORD PTR [rdi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+56]
	mul	QWORD PTR [rdi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+88], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r14], rdx
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+48]
	mul	QWORD PTR [rdi+48]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+rcx]
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+56]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+40]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+96], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+48]
	mul	QWORD PTR [rdi+56]
	add	QWORD PTR [r14], rax
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+56]
	mul	QWORD PTR [rdi+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+104], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+56]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rsi, QWORD PTR [rsp+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+56]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rdi, QWORD PTR [rsp+48]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	rax, QWORD PTR [r15]
	cmp	rax, rdx
	setb	bl
	mov	QWORD PTR [r14], rbx

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbx, QWORD PTR [rsp+24]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+112], rcx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+120], rax

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbp, QWORD PTR [rsp+32]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z ENDP ; Comba1<8,6>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0?0$03@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$03@@2@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0?0$03@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$03@@2@Z PROC ; Comba2<-1,4>, COMDAT

; 47   : }

	ret	0
??$Comba2@$0?0$03@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$03@@2@Z ENDP ; Comba2<-1,4>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$00$02$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$02@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$00$02$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$02@@2@Z PROC ; Comba2<1,3,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+24]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+8]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [r11+32]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mul	QWORD PTR [rcx]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$00$02$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$02@@2@Z ENDP ; Comba2<1,3,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$02$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$01@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$02$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$01@@2@Z PROC ; Comba2<3,2,3>, COMDAT

; 40   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+16]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+24]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+24]
	mul	QWORD PTR [rcx+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+32]
	mul	QWORD PTR [rbx+8]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	adc	rdx, 0
	lea	r10, QWORD PTR [r9+rdx]
	cmp	r10, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r10+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$02$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$01@@2@Z ENDP ; Comba2<3,2,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba3@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z PROC ; Comba3<6,4>, COMDAT

; 53   : {

$LN44:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+8]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rbp, rdx
	mov	rsi, rcx
	mov	r15, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+16]
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	mov	QWORD PTR [rbx], r8
	mov	rax, QWORD PTR [rbp+24]
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+24]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	adc	rdx, rdi
	lea	r10, QWORD PTR [rdx+r8]
	cmp	r10, rdx
	mov	QWORD PTR [rbx], r10
	mov	rax, QWORD PTR [rbp+32]
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r9]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r10]
	cmp	r8, rdx
	mov	QWORD PTR [rbx], r8
	mov	rax, QWORD PTR [rbp+40]
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [rbx], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+48], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+16]
	mul	QWORD PTR [rsi+40]
	add	QWORD PTR [rbx], rax
	mov	rcx, QWORD PTR [rbx]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+24]
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [rbx], r9
	mov	rax, QWORD PTR [rbp+32]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+24]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [rbx], r8
	mov	rax, QWORD PTR [rbp+40]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+56], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r14], rdx
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+32]
	mul	QWORD PTR [rsi+32]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+64], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+32]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [rbx], rax
	cmp	rax, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbp, QWORD PTR [rsp+32]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	add	QWORD PTR [rbx], rax
	mov	rcx, QWORD PTR [rbx]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbx, QWORD PTR [rsp+24]
	mov	rsi, QWORD PTR [rsp+40]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+80], rcx
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rax, QWORD PTR [r11]
	cmp	rax, rdx

; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [r15+88], rax

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	setb	dil
	mov	QWORD PTR [r14], rdi

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rdi, QWORD PTR [rsp+48]
	pop	r15
	pop	r14
	ret	0
??$Comba3@$05$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$03@@@Z ENDP ; Comba3<6,4>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$04$00$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$00@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$04$00$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$00@@2@Z PROC ; Comba2<5,1,5>, COMDAT

; 40   : {

$LN16:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+8]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	r14, r9
	mov	rsi, r8
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	rax, QWORD PTR [rdi+16]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rdi+24]
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+24]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	adc	rdx, 0
	lea	rcx, QWORD PTR [r9+rdx]
	cmp	rcx, rdx
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rdi+32]
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+16]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	adc	rdx, 0
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rdi+40]
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+8]
	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rdi+48]
	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$04$00$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$00@@2@Z ENDP ; Comba2<5,1,5>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$07$06@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$06@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$07$06@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$06@@@Z PROC ; Comba1<8,7>, COMDAT

; 69   : {

$LN94:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 70   : 	CAT_LEG_COMBA2(a[Count], b[0], c0, c1, c2);

	mov	rax, QWORD PTR [rdx]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	r14, rdx
	mov	rsi, rcx
	mov	r15, r9
	mov	rbp, r8
	mul	QWORD PTR [rcx+56]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rcx+48]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	mov	rax, QWORD PTR [r14+16]
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+24]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+32]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+32]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+48]
	adc	rdx, rdi
	lea	r10, QWORD PTR [r8+rdx]
	cmp	r10, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+8]
	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+56]
	adc	rdx, rdi
	lea	r8, QWORD PTR [r10+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 71   : 	Comba2(a, b, c0, c1, c2, CombaT<Count-1>(), CombaT<1>(), CombaT<Count-1>());
; 72   : 	out[Count] = c0;

	mov	QWORD PTR [rbp+56], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+8]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+24]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+16]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	mov	QWORD PTR [r15], r9
	cmp	r9, rdx
	adc	QWORD PTR [rbx], rdi
	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+40]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+48]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+56]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r15], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+24]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r15], r9
	mov	rax, QWORD PTR [r14+40]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+48]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx
	mov	rax, QWORD PTR [r14+56]
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+24]
	add	rcx, rax
	mov	QWORD PTR [r15], rcx
	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi
	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+88], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+40]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+48]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r15], r8
	mov	rax, QWORD PTR [r14+56]
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r15], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+96], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+48]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r15], rax
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [r14+56]
	mul	QWORD PTR [rsi+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r15], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+104], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [r14+56]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rsi, QWORD PTR [rsp+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbx, QWORD PTR [rsp+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rax, QWORD PTR [r11]
	cmp	rax, rdx
	setb	dil
	mov	QWORD PTR [r15], rdi

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rdi, QWORD PTR [rsp+48]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+112], rcx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+120], rax

; 73   : 	Comba1(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count+1>());
; 74   : }

	mov	rbp, QWORD PTR [rsp+32]
	pop	r15
	pop	r14
	ret	0
??$Comba1@$07$06@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$06@@@Z ENDP ; Comba1<8,7>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0A@$03$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$03@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0A@$03$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$03@@2@Z PROC ; Comba2<0,4,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+32]
	mul	QWORD PTR [rcx]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$0A@$03$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$03@@2@Z ENDP ; Comba2<0,4,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$01$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$02@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$01$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$02@@2@Z PROC ; Comba2<2,3,2>, COMDAT

; 40   : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+24]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+16]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+32]
	mul	QWORD PTR [rcx+8]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$01$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$02@@2@Z ENDP ; Comba2<2,3,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@V?$CombaT@$02@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@V?$CombaT@$02@@@Z PROC ; Comba2<4,2,3>, COMDAT

; 40   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+16]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	rax, QWORD PTR [rdi+24]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rdi+32]
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+16]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	adc	rdx, 0
	lea	r10, QWORD PTR [r9+rdx]
	cmp	r10, rdx
	mov	QWORD PTR [r14], r10
	mov	rax, QWORD PTR [rdi+40]
	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+8]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r10+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$03$01$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@V?$CombaT@$02@@@Z ENDP ; Comba2<4,2,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba3@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z PROC ; Comba3<6,3>, COMDAT

; 53   : {

$LN32:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+16]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	rbp, rdx
	mov	rsi, rcx
	mov	r15, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+24]
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	mov	rax, QWORD PTR [rbp+32]
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	mov	rax, QWORD PTR [rbp+40]
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+16]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+56], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+32]
	mul	QWORD PTR [rsi+32]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rdi
	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r14], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+64], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+32]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	add	QWORD PTR [r14], rdx
	mov	r8, QWORD PTR [r14]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [r14], rax
	cmp	rax, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbp, QWORD PTR [rsp+32]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+40]
	add	QWORD PTR [r14], rax
	mov	rcx, QWORD PTR [r14]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rsi, QWORD PTR [rsp+40]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+80], rcx
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rax, QWORD PTR [rbx]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbx, QWORD PTR [rsp+24]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rax, rdx

; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [r15+88], rax

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	setb	dil
	mov	QWORD PTR [r11], rdi

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rdi, QWORD PTR [rsp+48]
	pop	r15
	pop	r14
	ret	0
??$Comba3@$05$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$02@@@Z ENDP ; Comba3<6,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$01$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$01$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@2@Z PROC ; Comba2<4,2,4>, COMDAT

; 40   : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+16]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	r14, r9
	mov	rsi, r8
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	rax, QWORD PTR [rdi+24]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rdi+32]
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+16]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	adc	rdx, 0
	lea	rcx, QWORD PTR [r9+rdx]
	cmp	rcx, rdx
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rdi+40]
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+8]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	adc	rdx, 0
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rdi+48]
	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$03$01$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$01@@2@Z ENDP ; Comba2<4,2,4>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$05$00$05@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$00@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$05$00$05@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$00@@2@Z PROC ; Comba2<6,1,6>, COMDAT

; 40   : {

$LN18:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+8]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rsi, r8
	mov	rbx, rcx
	mov	r14, r9
	mul	QWORD PTR [rcx+48]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+16]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+32]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	mov	QWORD PTR [rsi], r8
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, 0
	lea	rcx, QWORD PTR [r9+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+24]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	QWORD PTR [rsi], r9
	mov	rax, QWORD PTR [rdi+40]
	adc	rdx, 0
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+16]
	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+8]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	mov	QWORD PTR [rsi], r8
	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	r10, QWORD PTR [r9+rdx]
	cmp	r10, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r10+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$05$00$05@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$00@@2@Z ENDP ; Comba2<6,1,6>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba1@$07@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@3@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba1@$07@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@3@Z PROC ; Comba1<8>, COMDAT

; 77   : {

$LN76:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+8]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rbx, QWORD PTR c1$[rsp]

; 77   : {

	mov	rbp, rdx
	mov	rsi, rcx
	mov	r15, r8
	mov	r14, r9

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rcx+56]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+16]
	mul	QWORD PTR [rcx+48]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+24]
	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+32]
	mul	QWORD PTR [rsi+32]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+48]
	mul	QWORD PTR [rsi+16]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+56]
	mul	QWORD PTR [rsi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+64], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+16]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+24]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [rbp+32]
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rbp+40]
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [rbp+48]
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+24]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rbp+56]
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	cmp	rax, rdx
	mov	QWORD PTR [r11], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r14], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+24]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r14], rdx
	mov	r8, QWORD PTR [r14]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+32]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [rbp+40]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rbp+48]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	adc	rdx, rdi
	mov	rax, QWORD PTR [rbp+56]
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+80], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rcx, QWORD PTR [rbx]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+48]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+56]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+88], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+48]
	mul	QWORD PTR [rsi+48]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rbp+56]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	mov	QWORD PTR [r11], rax
	cmp	rax, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+96], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+48]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r14], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r14], rdx
	mov	r8, QWORD PTR [r14]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+56]
	mul	QWORD PTR [rsi+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+104], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+56]

; 78   : 	Comba3(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<L-2>());
; 79   : }

	mov	rbp, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]

; 78   : 	Comba3(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<L-2>());
; 79   : }

	mov	rsi, QWORD PTR [rsp+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rax, QWORD PTR [rbx]

; 78   : 	Comba3(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<L-2>());
; 79   : }

	mov	rbx, QWORD PTR [rsp+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }
; 44   : 
; 45   : template<int I, int J> CAT_INLINE void Comba2(const Leg * /*a*/, const Leg * /*b*/, Leg &/*c0*/, Leg &/*c1*/, Leg &/*c2*/, CombaT<I>, CombaT<J>, CombaT<-1>)
; 46   : {
; 47   : }
; 48   : 
; 49   : 
; 50   : //// Outer loop: Second Half
; 51   : 
; 52   : template<int L, int Count> CAT_INLINE void Comba3(const Leg *a, const Leg *b, Leg *out, Leg &c0, Leg &c1, Leg &c2, CombaT<L>, CombaT<Count>)
; 53   : {
; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rax, rdx
	setb	dil
	mov	QWORD PTR [r11], rdi

; 78   : 	Comba3(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<L-2>());
; 79   : }

	mov	rdi, QWORD PTR [rsp+48]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+112], rcx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }
; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [r15+120], rax

; 78   : 	Comba3(a, b, out, c0, c1, c2, CombaT<L>(), CombaT<L-2>());
; 79   : }

	pop	r15
	pop	r14
	ret	0
??$Comba1@$07@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@3@Z ENDP ; Comba1<8>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0?0$04@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$04@@2@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0?0$04@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$04@@2@Z PROC ; Comba2<-1,5>, COMDAT

; 47   : }

	ret	0
??$Comba2@$0?0$04@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$04@@2@Z ENDP ; Comba2<-1,5>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$00$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$03@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$00$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$03@@2@Z PROC ; Comba2<1,4,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+32]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+8]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mov	rax, QWORD PTR [r11+40]
	mul	QWORD PTR [rcx]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$00$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$03@@2@Z ENDP ; Comba2<1,4,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$02$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@2V?$CombaT@$01@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$02$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@2V?$CombaT@$01@@@Z PROC ; Comba2<3,3,2>, COMDAT

; 40   : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+24]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+24]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	rax, QWORD PTR [rdi+32]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rdi+40]
	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+8]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$02$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@2V?$CombaT@$01@@@Z ENDP ; Comba2<3,3,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@V?$CombaT@$01@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@V?$CombaT@$01@@@Z PROC ; Comba2<4,3,2>, COMDAT

; 40   : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+24]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rsi, r8
	mov	rbx, rcx
	mov	r14, r9
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx
	mov	rax, QWORD PTR [rdi+40]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+16]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$03$02$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@V?$CombaT@$01@@@Z ENDP ; Comba2<4,3,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z
_TEXT	SEGMENT
a$ = 16
b$ = 24
out$ = 32
c0$ = 40
c1$ = 48
c2$ = 56
__formal$dead$ = 64
__formal$dead$ = 72
??$Comba3@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z PROC ; Comba3<6,2>, COMDAT

; 53   : {

$LN22:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+24]
	mov	rsi, QWORD PTR c1$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rbp, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r10, rax
	adc	rdx, 0
	xor	r11d, r11d
	add	QWORD PTR [rsi], rdx
	mov	r8, QWORD PTR [rsi]
	mov	eax, r11d
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r9], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+32]
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r9], r11
	mov	rax, QWORD PTR [rdi+40]
	mul	QWORD PTR [rbx+24]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r9], r11

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+64], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+32]
	mul	QWORD PTR [rbx+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	eax, r11d
	adc	rdx, r11
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+40]
	mul	QWORD PTR [rbx+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, r11
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [r9], rax
	cmp	rax, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r14], r11

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+40]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rdi, QWORD PTR [rsp+40]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+40]
	add	QWORD PTR [r9], rax
	mov	rcx, QWORD PTR [r9]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbx, QWORD PTR [rsp+16]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx
	adc	rdx, r11
	add	QWORD PTR [r14], rdx
	mov	rax, QWORD PTR [r14]
	cmp	rax, rdx

; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+88], rax

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbp, QWORD PTR [rsp+24]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	setb	r11b
	mov	QWORD PTR [rsi], r11

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rsi, QWORD PTR [rsp+32]
	pop	r14
	ret	0
??$Comba3@$05$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$01@@@Z ENDP ; Comba3<6,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$02$02$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@22@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$02$02$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@22@Z PROC ; Comba2<3,3,3>, COMDAT

; 40   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+24]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+24]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	rax, QWORD PTR [rdi+32]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rdi+40]
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+8]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	adc	rdx, 0
	lea	r10, QWORD PTR [r9+rdx]
	cmp	r10, rdx
	mov	QWORD PTR [r14], r10
	mov	rax, QWORD PTR [rdi+48]
	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r10+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$02$02$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@22@Z ENDP ; Comba2<3,3,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$04$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$01@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$04$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$01@@2@Z PROC ; Comba2<5,2,5>, COMDAT

; 40   : {

$LN16:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+16]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rsi, r8
	mov	rbx, rcx
	mov	r14, r9
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+24]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+24]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	mov	QWORD PTR [rsi], r8
	mov	rax, QWORD PTR [rdi+40]
	adc	rdx, 0
	lea	rcx, QWORD PTR [r9+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+16]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	QWORD PTR [rsi], r9
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, 0
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+8]
	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx
	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$04$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$01@@2@Z ENDP ; Comba2<5,2,5>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba3@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z PROC ; Comba3<8,6>, COMDAT

; 53   : {

$LN74:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+8]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	rbp, rdx
	mov	rsi, rcx
	mov	r15, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+56]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+16]
	mul	QWORD PTR [rcx+48]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+24]
	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+32]
	mul	QWORD PTR [rsi+32]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+24]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+48]
	mul	QWORD PTR [rsi+16]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+56]
	mul	QWORD PTR [rsi+8]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+64], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+16]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+24]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [rbp+32]
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rbp+40]
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+32]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	mov	QWORD PTR [r11], rcx
	mov	rax, QWORD PTR [rbp+48]
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+24]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rbp+56]
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r11], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r14], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+24]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r14], rdx
	mov	r8, QWORD PTR [r14]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+32]
	mul	QWORD PTR [rsi+48]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	mov	QWORD PTR [r11], r9
	mov	rax, QWORD PTR [rbp+40]
	adc	rdx, rdi
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+40]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rbp+48]
	adc	rdx, rdi
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	adc	rdx, rdi
	mov	rax, QWORD PTR [rbp+56]
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+80], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rcx, QWORD PTR [rbx]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+48]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+56]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+88], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [rax+r8]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+48]
	mul	QWORD PTR [rsi+48]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rbp+56]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [rdx+r8]
	mov	QWORD PTR [r11], rax
	cmp	rax, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+96], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+48]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r14], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r14], rdx
	mov	r8, QWORD PTR [r14]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+56]
	mul	QWORD PTR [rsi+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+104], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+56]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbp, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rsi, QWORD PTR [rsp+40]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rax, QWORD PTR [rbx]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbx, QWORD PTR [rsp+24]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rax, rdx
	setb	dil
	mov	QWORD PTR [r11], rdi

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rdi, QWORD PTR [rsp+48]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+112], rcx

; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [r15+120], rax

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	pop	r15
	pop	r14
	ret	0
??$Comba3@$07$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$05@@@Z ENDP ; Comba3<8,6>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0A@$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$04@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0A@$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$04@@2@Z PROC ; Comba2<0,5,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mul	QWORD PTR [rcx]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$0A@$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$04@@2@Z ENDP ; Comba2<0,5,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$01$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@V?$CombaT@$00@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$01$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@V?$CombaT@$00@@@Z PROC ; Comba2<2,4,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+32]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+16]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	mov	rax, QWORD PTR [r11+40]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mul	QWORD PTR [rcx+8]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$01$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@V?$CombaT@$00@@@Z ENDP ; Comba2<2,4,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$02$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@V?$CombaT@$00@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$02$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@V?$CombaT@$00@@@Z PROC ; Comba2<3,4,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+32]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+24]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [r11+40]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mul	QWORD PTR [rcx+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$02$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@V?$CombaT@$00@@@Z ENDP ; Comba2<3,4,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$00@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$00@@@Z PROC ; Comba2<4,4,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+32]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mov	rax, QWORD PTR [r11+40]
	mul	QWORD PTR [rcx+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$03$03$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$00@@@Z ENDP ; Comba2<4,4,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z
_TEXT	SEGMENT
a$ = 16
b$ = 24
out$ = 32
c0$ = 40
c1$ = 48
c2$ = 56
__formal$dead$ = 64
__formal$dead$ = 72
??$Comba3@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z PROC ; Comba3<6,1>, COMDAT

; 53   : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+32]
	mov	r11, QWORD PTR c1$[rsp]
	mov	rsi, rdx
	mov	rbp, r8
	mov	rdi, rcx
	mov	r14, r9
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r10, rax
	adc	rdx, 0
	xor	ebx, ebx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	mov	eax, ebx
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r9], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [r11], rax
	cmp	rax, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], rbx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+40]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rsi, QWORD PTR [rsp+32]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+40]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rdi, QWORD PTR [rsp+40]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rcx, rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx
	adc	rdx, rbx
	add	QWORD PTR [r9], rdx
	mov	rax, QWORD PTR [r9]
	cmp	rax, rdx

; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+88], rax

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbp, QWORD PTR [rsp+24]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	setb	bl
	mov	QWORD PTR [r14], rbx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbx, QWORD PTR [rsp+16]
	pop	r14
	ret	0
??$Comba3@$05$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$00@@@Z ENDP ; Comba3<6,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$01$03$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$01$03$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@2@Z PROC ; Comba2<2,4,2>, COMDAT

; 40   : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+32]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+16]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	rax, QWORD PTR [rdi+40]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+8]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rdi+48]
	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$01$03$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$03@@2@Z ENDP ; Comba2<2,4,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@2@Z PROC ; Comba2<4,3,4>, COMDAT

; 40   : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+24]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rsi, r8
	mov	rbx, rcx
	mov	r14, r9
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+32]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx
	mov	rax, QWORD PTR [rdi+40]
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+16]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	mov	QWORD PTR [rsi], r8
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, 0
	lea	rcx, QWORD PTR [r9+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+8]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	QWORD PTR [rsi], r9
	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$03$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$02@@2@Z ENDP ; Comba2<4,3,4>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$05$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$01@@V?$CombaT@$04@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$05$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$01@@V?$CombaT@$04@@@Z PROC ; Comba2<6,2,5>, COMDAT

; 40   : {

$LN16:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+16]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+48]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+24]
	mul	QWORD PTR [rcx+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+32]
	mul	QWORD PTR [rbx+32]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	adc	rdx, 0
	lea	rcx, QWORD PTR [r9+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+40]
	mul	QWORD PTR [rbx+24]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	adc	rdx, 0
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+48]
	mul	QWORD PTR [rbx+16]
	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+8]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$05$01$04@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$01@@V?$CombaT@$04@@@Z ENDP ; Comba2<6,2,5>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba3@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z PROC ; Comba3<8,5>, COMDAT

; 53   : {

$LN58:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+16]
	mov	r14, QWORD PTR c1$[rsp]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rsi, rdx
	mov	rdi, rcx
	mov	rbp, r8
	mov	r15, r9
	mul	QWORD PTR [rcx+56]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	ebx, ebx
	add	QWORD PTR [r14], rdx
	mov	r8, QWORD PTR [r14]
	mov	eax, ebx
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rcx+48]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+32]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+40]
	lea	r9, QWORD PTR [rcx+rax]
	cmp	r9, rax
	adc	rdx, rbx
	lea	rcx, QWORD PTR [r8+rdx]
	cmp	rcx, rdx
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rsi+40]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+32]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+48]
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+24]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+56]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+16]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+72], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rbx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+24]
	mul	QWORD PTR [rdi+56]
	add	QWORD PTR [r14], rax
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+32]
	mul	QWORD PTR [rdi+48]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rsi+40]
	adc	rdx, rbx
	lea	rcx, QWORD PTR [rdx+r8]
	cmp	rcx, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+40]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+48]
	adc	rdx, rbx
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+32]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rsi+56]
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx
	mul	QWORD PTR [rdi+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+80], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	rcx, QWORD PTR [r15]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+48]
	lea	r8, QWORD PTR [r9+rax]
	cmp	r8, rax
	adc	rdx, rbx
	lea	r9, QWORD PTR [rdx+rcx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+48]
	mul	QWORD PTR [rdi+40]
	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [r9+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx
	mov	rax, QWORD PTR [rsi+56]
	mul	QWORD PTR [rdi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r14], rbx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+88], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+40]
	mul	QWORD PTR [rdi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r14], rdx
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+48]
	mul	QWORD PTR [rdi+48]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rbx
	lea	r8, QWORD PTR [rdx+rcx]
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rsi+56]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rbx
	mul	QWORD PTR [rdi+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rbx
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+96], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], rbx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+48]
	mul	QWORD PTR [rdi+56]
	add	QWORD PTR [r14], rax
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rax
	mov	eax, ebx
	adc	rdx, rbx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r15], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+56]
	mul	QWORD PTR [rdi+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+104], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+56]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rsi, QWORD PTR [rsp+40]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r15], rbx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+56]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rdi, QWORD PTR [rsp+48]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	adc	rdx, rbx
	add	QWORD PTR [r15], rdx
	mov	rax, QWORD PTR [r15]
	cmp	rax, rdx
	setb	bl
	mov	QWORD PTR [r14], rbx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbx, QWORD PTR [rsp+24]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+112], rcx

; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+120], rax

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbp, QWORD PTR [rsp+32]
	pop	r15
	pop	r14
	ret	0
??$Comba3@$07$04@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$04@@@Z ENDP ; Comba3<8,5>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0?0$05@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$05@@2@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0?0$05@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$05@@2@Z PROC ; Comba2<-1,6>, COMDAT

; 47   : }

	ret	0
??$Comba2@$0?0$05@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$05@@2@Z ENDP ; Comba2<-1,6>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$00$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$00$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z PROC ; Comba2<1,5,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mul	QWORD PTR [rcx+8]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$00$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z ENDP ; Comba2<1,5,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$01$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$01$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z PROC ; Comba2<2,5,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mul	QWORD PTR [rcx+16]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$01$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z ENDP ; Comba2<2,5,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$02$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$02$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z PROC ; Comba2<3,5,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mul	QWORD PTR [rcx+24]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$02$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z ENDP ; Comba2<3,5,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z PROC ; Comba2<4,5,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$03$04$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$04@@V?$CombaT@$0A@@@@Z ENDP ; Comba2<4,5,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$05$0A@@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$0A@@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
out$ = 24
c0$ = 32
c1$ = 40
c2$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba3@$05$0A@@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$0A@@@@Z PROC ; Comba3<6,0>, COMDAT

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mov	r11, r8
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	mov	rax, QWORD PTR c1$[rsp]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r11+80], r10
	adc	rdx, 0
	xor	ecx, ecx
	add	QWORD PTR [rax], rdx
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR c2$[rsp]
	cmp	r8, rdx

; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [r11+88], r8

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	setb	cl
	mov	QWORD PTR [rax], rcx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	ret	0
??$Comba3@$05$0A@@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$0A@@@@Z ENDP ; Comba3<6,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$00$04$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$04@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$00$04$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$04@@2@Z PROC ; Comba2<1,5,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+8]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	mov	rax, QWORD PTR [r11+48]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mul	QWORD PTR [rcx]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$00$04$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$04@@2@Z ENDP ; Comba2<1,5,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$02$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$02$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@2@Z PROC ; Comba2<3,4,3>, COMDAT

; 40   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+32]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rsi, r8
	mov	rbx, rcx
	mov	r14, r9
	mul	QWORD PTR [rcx+24]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+40]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+8]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	mov	QWORD PTR [rsi], r8
	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	r10, QWORD PTR [r9+rdx]
	cmp	r10, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r10+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$02$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$03@@2@Z ENDP ; Comba2<3,4,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$04$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$02@@V?$CombaT@$03@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$04$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$02@@V?$CombaT@$03@@@Z PROC ; Comba2<5,3,4>, COMDAT

; 40   : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+24]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+32]
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+40]
	mul	QWORD PTR [rbx+24]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	adc	rdx, 0
	lea	rcx, QWORD PTR [r9+rdx]
	cmp	rcx, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+48]
	mul	QWORD PTR [rbx+16]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	adc	rdx, 0
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+8]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$04$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$02@@V?$CombaT@$03@@@Z ENDP ; Comba2<5,3,4>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$05$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$02@@V?$CombaT@$03@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$05$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$02@@V?$CombaT@$03@@@Z PROC ; Comba2<6,3,4>, COMDAT

; 40   : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+24]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	r14, r9
	mov	rsi, r8
	mul	QWORD PTR [rcx+48]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	rax, QWORD PTR [rdi+32]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rdi+40]
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+32]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	adc	rdx, 0
	lea	rcx, QWORD PTR [r9+rdx]
	cmp	rcx, rdx
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rdi+48]
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+24]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	adc	rdx, 0
	lea	r8, QWORD PTR [rcx+rdx]
	cmp	r8, rdx
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rdi+56]
	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+16]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r9+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$05$02$03@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$02@@V?$CombaT@$03@@@Z ENDP ; Comba2<6,3,4>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba3@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z PROC ; Comba3<8,4>, COMDAT

; 53   : {

$LN44:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+24]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	rbp, rdx
	mov	rsi, rcx
	mov	r15, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+56]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+32]
	mul	QWORD PTR [rcx+48]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	mov	rax, QWORD PTR [rbp+40]
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+40]
	lea	r9, QWORD PTR [rax+rcx]
	cmp	r9, rax
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rbp+48]
	adc	rdx, rdi
	lea	r10, QWORD PTR [rdx+r8]
	cmp	r10, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+32]
	lea	rcx, QWORD PTR [rax+r9]
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx
	mov	rax, QWORD PTR [rbp+56]
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r10]
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mul	QWORD PTR [rsi+24]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+80], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+48]
	lea	r8, QWORD PTR [rax+r9]
	cmp	r8, rax
	adc	rdx, rdi
	lea	r9, QWORD PTR [rcx+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r14], rdi
	mov	rax, QWORD PTR [rbp+48]
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rdx+r9]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rdi
	mov	rax, QWORD PTR [rbp+56]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r14], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+88], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r14], rdx
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+48]
	mul	QWORD PTR [rsi+48]
	lea	r10, QWORD PTR [rax+r9]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	mov	QWORD PTR [r14], r8
	mov	rax, QWORD PTR [rbp+56]
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [rax+r10]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+96], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [rbx], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+48]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r14], rax
	mov	rcx, QWORD PTR [r14]
	cmp	rcx, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+56]
	mul	QWORD PTR [rsi+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+104], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+56]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbp, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rsi, QWORD PTR [rsp+40]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbx, QWORD PTR [rsp+24]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rax, QWORD PTR [r11]
	cmp	rax, rdx
	setb	dil
	mov	QWORD PTR [r14], rdi

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rdi, QWORD PTR [rsp+48]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+112], rcx

; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [r15+120], rax

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	pop	r15
	pop	r14
	ret	0
??$Comba3@$07$03@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$03@@@Z ENDP ; Comba3<8,4>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0A@$05@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0A@$05@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z PROC ; Comba2<0,6>, COMDAT

; 47   : }

	ret	0
??$Comba2@$0A@$05@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z ENDP ; Comba2<0,6>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$00$05@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$00$05@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z PROC ; Comba2<1,6>, COMDAT

; 47   : }

	ret	0
??$Comba2@$00$05@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z ENDP ; Comba2<1,6>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$01$05@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$01$05@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z PROC ; Comba2<2,6>, COMDAT

; 47   : }

	ret	0
??$Comba2@$01$05@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z ENDP ; Comba2<2,6>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$02$05@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$02$05@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z PROC ; Comba2<3,6>, COMDAT

; 47   : }

	ret	0
??$Comba2@$02$05@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z ENDP ; Comba2<3,6>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$05@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$05@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z PROC ; Comba2<4,6>, COMDAT

; 47   : }

	ret	0
??$Comba2@$03$05@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$05@@V?$CombaT@$0?0@@@Z ENDP ; Comba2<4,6>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
out$ = 24
c0$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba3@$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$0?0@@@Z PROC ; Comba3<6>, COMDAT

; 62   : 	out[2*L - 1] = c0;

	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [r8+88], rax

; 63   : }

	ret	0
??$Comba3@$05@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$05@@V?$CombaT@$0?0@@@Z ENDP ; Comba3<6>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0A@$05$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$05@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0A@$05$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$05@@2@Z PROC ; Comba2<0,6,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+48]
	mul	QWORD PTR [rcx]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$0A@$05$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$05@@2@Z ENDP ; Comba2<0,6,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$01$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$04@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$01$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$04@@2@Z PROC ; Comba2<2,5,2>, COMDAT

; 40   : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rsi, r8
	mov	rbx, rcx
	mov	r14, r9
	mul	QWORD PTR [rcx+16]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+8]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx
	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$01$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$04@@2@Z ENDP ; Comba2<2,5,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$02@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$02@@@Z PROC ; Comba2<4,4,3>, COMDAT

; 40   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+32]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+40]
	mul	QWORD PTR [rcx+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+48]
	mul	QWORD PTR [rbx+16]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	adc	rdx, 0
	lea	r10, QWORD PTR [r9+rdx]
	cmp	r10, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+8]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r10+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$03$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$03@@2V?$CombaT@$02@@@Z ENDP ; Comba2<4,4,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$04$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$03@@V?$CombaT@$02@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$04$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$03@@V?$CombaT@$02@@@Z PROC ; Comba2<5,4,3>, COMDAT

; 40   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+32]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	rax, QWORD PTR [rdi+40]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rdi+48]
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+24]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	adc	rdx, 0
	lea	r10, QWORD PTR [r9+rdx]
	cmp	r10, rdx
	mov	QWORD PTR [r14], r10
	mov	rax, QWORD PTR [rdi+56]
	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+16]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r10+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$04$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$03@@V?$CombaT@$02@@@Z ENDP ; Comba2<5,4,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$05$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$03@@V?$CombaT@$02@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$05$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$03@@V?$CombaT@$02@@@Z PROC ; Comba2<6,4,3>, COMDAT

; 40   : {

$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+32]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rsi, r8
	mov	rbx, rcx
	mov	r14, r9
	mul	QWORD PTR [rcx+48]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+40]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+32]
	lea	r8, QWORD PTR [rcx+rax]
	cmp	r8, rax
	mov	QWORD PTR [rsi], r8
	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	r10, QWORD PTR [r9+rdx]
	cmp	r10, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r10+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$05$03$02@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$03@@V?$CombaT@$02@@@Z ENDP ; Comba2<6,4,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z
_TEXT	SEGMENT
a$ = 24
b$ = 32
out$ = 40
c0$ = 48
c1$ = 56
c2$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$Comba3@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z PROC ; Comba3<8,3>, COMDAT

; 53   : {

$LN32:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	push	r15

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+32]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rbx, QWORD PTR c1$[rsp]
	mov	rbp, rdx
	mov	rsi, rcx
	mov	r15, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+56]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	adc	rdx, 0
	xor	edi, edi
	add	QWORD PTR [rbx], rdx
	mov	r8, QWORD PTR [rbx]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r11], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rcx+48]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+48]
	mul	QWORD PTR [rsi+40]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi
	mov	rax, QWORD PTR [rbp+56]
	mul	QWORD PTR [rsi+32]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r11], rdi

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+88], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+40]
	mul	QWORD PTR [rsi+56]
	lea	r9, QWORD PTR [r8+rax]
	cmp	r9, rax
	mov	eax, edi
	adc	rdx, rdi
	add	QWORD PTR [r11], rdx
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+48]
	mul	QWORD PTR [rsi+48]
	lea	r10, QWORD PTR [r9+rax]
	cmp	r10, rax
	adc	rdx, rdi
	lea	r8, QWORD PTR [rcx+rdx]
	mov	QWORD PTR [r11], r8
	mov	rax, QWORD PTR [rbp+56]
	cmp	r8, rdx
	adc	QWORD PTR [r14], rdi
	mul	QWORD PTR [rsi+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, rdi
	lea	rax, QWORD PTR [r8+rdx]
	mov	QWORD PTR [r11], rax
	cmp	rax, rdx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+96], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r14], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+48]
	mul	QWORD PTR [rsi+56]
	add	QWORD PTR [r11], rax
	mov	rcx, QWORD PTR [r11]
	cmp	rcx, rax
	adc	rdx, rdi
	add	QWORD PTR [r14], rdx
	mov	r8, QWORD PTR [r14]
	mov	eax, edi
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [rbx], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+56]
	mul	QWORD PTR [rsi+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+104], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rbp+56]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbp, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rdi
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [rbx], rdi

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rsi+56]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rsi, QWORD PTR [rsp+40]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx
	adc	rdx, rdi
	add	QWORD PTR [rbx], rdx
	mov	rax, QWORD PTR [rbx]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbx, QWORD PTR [rsp+24]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	cmp	rax, rdx
	setb	dil
	mov	QWORD PTR [r11], rdi

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rdi, QWORD PTR [rsp+48]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r15+112], rcx

; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [r15+120], rax

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	pop	r15
	pop	r14
	ret	0
??$Comba3@$07$02@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$02@@@Z ENDP ; Comba3<8,3>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0?0$06@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$06@@2@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0?0$06@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$06@@2@Z PROC ; Comba2<-1,7>, COMDAT

; 47   : }

	ret	0
??$Comba2@$0?0$06@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$06@@2@Z ENDP ; Comba2<-1,7>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$00$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$05@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$00$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$05@@2@Z PROC ; Comba2<1,6,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+48]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+8]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [r11+56]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mul	QWORD PTR [rcx]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$00$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$05@@2@Z ENDP ; Comba2<1,6,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$02$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$04@@V?$CombaT@$01@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$02$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$04@@V?$CombaT@$01@@@Z PROC ; Comba2<3,5,2>, COMDAT

; 40   : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+24]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+48]
	mul	QWORD PTR [rcx+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+8]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$02$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$04@@V?$CombaT@$01@@@Z ENDP ; Comba2<3,5,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$04@@V?$CombaT@$01@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$04@@V?$CombaT@$01@@@Z PROC ; Comba2<4,5,2>, COMDAT

; 40   : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	rax, QWORD PTR [rdi+48]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	mov	QWORD PTR [r14], r9
	mov	rax, QWORD PTR [rdi+56]
	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+16]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$03$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$04@@V?$CombaT@$01@@@Z ENDP ; Comba2<4,5,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$04$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$04@@2V?$CombaT@$01@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$04$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$04@@2V?$CombaT@$01@@@Z PROC ; Comba2<5,5,2>, COMDAT

; 40   : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rsi, r8
	mov	rbx, rcx
	mov	r14, r9
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [rdi+48]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx
	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mul	QWORD PTR [rbx+24]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$04$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$04@@2V?$CombaT@$01@@@Z ENDP ; Comba2<5,5,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$05$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$04@@V?$CombaT@$01@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$05$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$04@@V?$CombaT@$01@@@Z PROC ; Comba2<6,5,2>, COMDAT

; 40   : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mov	r11, QWORD PTR c2$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rsi, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+48]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+48]
	mul	QWORD PTR [rcx+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, 0
	lea	r9, QWORD PTR [r8+rdx]
	cmp	r9, rdx
	adc	QWORD PTR [r11], 0
	mov	rax, QWORD PTR [rdi+56]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+24]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mul	QWORD PTR [rbx+32]

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rsi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r9+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [r14], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	r14, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r11], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$05$04$01@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$04@@V?$CombaT@$01@@@Z ENDP ; Comba2<6,5,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z
_TEXT	SEGMENT
a$ = 16
b$ = 24
out$ = 32
c0$ = 40
c1$ = 48
c2$ = 56
__formal$dead$ = 64
__formal$dead$ = 72
??$Comba3@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z PROC ; Comba3<8,2>, COMDAT

; 53   : {

$LN22:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+40]
	mov	rsi, QWORD PTR c1$[rsp]
	mov	rdi, rdx
	mov	rbx, rcx
	mov	rbp, r8
	mov	r14, r9
	mul	QWORD PTR [rcx+56]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r10, rax
	adc	rdx, 0
	xor	r11d, r11d
	add	QWORD PTR [rsi], rdx
	mov	r8, QWORD PTR [rsi]
	mov	eax, r11d
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r9], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+48]
	mul	QWORD PTR [rcx+48]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	adc	rdx, r11
	add	r8, rdx
	mov	QWORD PTR [rsi], r8
	mov	rax, QWORD PTR [rdi+56]
	cmp	r8, rdx
	adc	QWORD PTR [r9], r11
	mul	QWORD PTR [rbx+40]
	add	rcx, rax
	cmp	rcx, rax
	adc	rdx, r11
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rsi], rax

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+96], rcx

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], r11

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+48]
	mul	QWORD PTR [rbx+56]
	add	QWORD PTR [rsi], rax
	mov	rcx, QWORD PTR [rsi]
	cmp	rcx, rax
	mov	eax, r11d
	adc	rdx, r11
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r14], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+56]
	mul	QWORD PTR [rbx+48]
	add	rcx, rax
	cmp	rcx, rax
	mov	QWORD PTR [rsi], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+104], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdi+56]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rdi, QWORD PTR [rsp+40]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, r11
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r14], r11

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rbx+56]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbx, QWORD PTR [rsp+16]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r9], rcx
	adc	rdx, r11
	add	QWORD PTR [r14], rdx
	mov	rax, QWORD PTR [r14]
	cmp	rax, rdx
	setb	r11b
	mov	QWORD PTR [rsi], r11

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rsi, QWORD PTR [rsp+32]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+112], rcx

; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+120], rax

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbp, QWORD PTR [rsp+24]
	pop	r14
	ret	0
??$Comba3@$07$01@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$01@@@Z ENDP ; Comba3<8,2>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0A@$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$06@@2@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0A@$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$06@@2@Z PROC ; Comba2<0,7,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+56]
	mul	QWORD PTR [rcx]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$0A@$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$06@@2@Z ENDP ; Comba2<0,7,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$01$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$05@@V?$CombaT@$00@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$01$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$05@@V?$CombaT@$00@@@Z PROC ; Comba2<2,6,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+48]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+16]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mov	rax, QWORD PTR [r11+56]
	mul	QWORD PTR [rcx+8]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$01$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$05@@V?$CombaT@$00@@@Z ENDP ; Comba2<2,6,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$02$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$05@@V?$CombaT@$00@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$02$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$05@@V?$CombaT@$00@@@Z PROC ; Comba2<3,6,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+48]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+24]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	mov	rax, QWORD PTR [r11+56]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mul	QWORD PTR [rcx+16]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$02$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$05@@V?$CombaT@$00@@@Z ENDP ; Comba2<3,6,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$05@@V?$CombaT@$00@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$05@@V?$CombaT@$00@@@Z PROC ; Comba2<4,6,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+48]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	mov	rax, QWORD PTR [r11+56]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mul	QWORD PTR [rcx+24]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$03$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$05@@V?$CombaT@$00@@@Z ENDP ; Comba2<4,6,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$04$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$05@@V?$CombaT@$00@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$04$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$05@@V?$CombaT@$00@@@Z PROC ; Comba2<5,6,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+48]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mov	rax, QWORD PTR [r11+56]
	mul	QWORD PTR [rcx+32]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$04$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$05@@V?$CombaT@$00@@@Z ENDP ; Comba2<5,6,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$05$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$05@@2V?$CombaT@$00@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$05$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$05@@2V?$CombaT@$00@@@Z PROC ; Comba2<6,6,1>, COMDAT

; 40   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+48]
	mov	r11, rdx
	mov	rbx, r8
	mov	rdi, r9
	mul	QWORD PTR [rcx+48]
	add	QWORD PTR [r8], rax
	mov	r10, QWORD PTR [r8]
	cmp	r10, rax
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	mov	r8, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	mov	rax, QWORD PTR [r11+56]
	cmp	r8, rdx
	adc	QWORD PTR [r9], 0
	mul	QWORD PTR [rcx+40]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [rbx], rcx

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rbx, QWORD PTR [rsp+8]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, 0
	lea	rax, QWORD PTR [r8+rdx]
	cmp	rax, rdx
	mov	QWORD PTR [rdi], rax

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	mov	rdi, QWORD PTR [rsp+16]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	QWORD PTR [r9], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$05$05$00@@YAXPEB_K0AEA_K11V?$CombaT@$05@@2V?$CombaT@$00@@@Z ENDP ; Comba2<6,6,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z
_TEXT	SEGMENT
a$ = 16
b$ = 24
out$ = 32
c0$ = 40
c1$ = 48
c2$ = 56
__formal$dead$ = 64
__formal$dead$ = 72
??$Comba3@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z PROC ; Comba3<8,1>, COMDAT

; 53   : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+48]
	mov	r11, QWORD PTR c1$[rsp]
	mov	rsi, rdx
	mov	rbp, r8
	mov	rdi, rcx
	mov	r14, r9
	mul	QWORD PTR [rcx+56]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	mov	r9, QWORD PTR c2$[rsp]
	cmp	r10, rax
	adc	rdx, 0
	xor	ebx, ebx
	add	QWORD PTR [r11], rdx
	mov	r8, QWORD PTR [r11]
	mov	eax, ebx
	cmp	r8, rdx
	setb	al
	mov	QWORD PTR [r9], rax

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+56]
	mul	QWORD PTR [rcx+48]
	lea	rcx, QWORD PTR [r10+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r14], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+104], rcx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rsi+56]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rsi, QWORD PTR [rsp+32]

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	adc	rdx, rbx
	add	r8, rdx
	cmp	r8, rdx
	adc	QWORD PTR [r9], rbx

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mul	QWORD PTR [rdi+56]

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rdi, QWORD PTR [rsp+40]

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	lea	rcx, QWORD PTR [r8+rax]
	cmp	rcx, rax
	mov	QWORD PTR [r11], rcx
	adc	rdx, rbx
	add	QWORD PTR [r9], rdx
	mov	rax, QWORD PTR [r9]
	cmp	rax, rdx
	setb	bl
	mov	QWORD PTR [r14], rbx

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbx, QWORD PTR [rsp+16]

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [rbp+112], rcx

; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [rbp+120], rax

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	mov	rbp, QWORD PTR [rsp+24]
	pop	r14
	ret	0
??$Comba3@$07$00@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$00@@@Z ENDP ; Comba3<8,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0?0$07@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$07@@2@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0?0$07@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$07@@2@Z PROC ; Comba2<-1,8>, COMDAT

; 47   : }

	ret	0
??$Comba2@$0?0$07@@YAXPEB_K0AEA_K11V?$CombaT@$0?0@@V?$CombaT@$07@@2@Z ENDP ; Comba2<-1,8>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$00$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$00$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z PROC ; Comba2<1,7,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+56]
	mul	QWORD PTR [rcx+8]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$00$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z ENDP ; Comba2<1,7,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$01$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$01$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z PROC ; Comba2<2,7,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+56]
	mul	QWORD PTR [rcx+16]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$01$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z ENDP ; Comba2<2,7,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$02$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$02$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z PROC ; Comba2<3,7,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+56]
	mul	QWORD PTR [rcx+24]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$02$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z ENDP ; Comba2<3,7,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z PROC ; Comba2<4,7,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+56]
	mul	QWORD PTR [rcx+32]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$03$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z ENDP ; Comba2<4,7,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$04$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$04$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z PROC ; Comba2<5,7,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+56]
	mul	QWORD PTR [rcx+40]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$04$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z ENDP ; Comba2<5,7,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$05$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
c0$ = 24
c1$ = 32
c2$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$05$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z PROC ; Comba2<6,7,0>, COMDAT

; 41   : 	CAT_LEG_COMBA3(a[I], b[J], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+56]
	mul	QWORD PTR [rcx+48]
	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	mov	rax, QWORD PTR c2$[rsp]
	adc	rdx, 0
	add	QWORD PTR [r9], rdx
	cmp	QWORD PTR [r9], rdx
	adc	QWORD PTR [rax], 0

; 42   : 	Comba2(a, b, c0, c1, c2, CombaT<I-1>(), CombaT<J+1>(), CombaT<Count-1>());
; 43   : }

	ret	0
??$Comba2@$05$06$0A@@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$06@@V?$CombaT@$0A@@@@Z ENDP ; Comba2<6,7,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$07$0A@@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$0A@@@@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
out$ = 24
c0$ = 32
c1$ = 40
c2$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba3@$07$0A@@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$0A@@@@Z PROC ; Comba3<8,0>, COMDAT

; 54   : 	CAT_LEG_COMBA2(a[L-1], b[L-1 - Count], c0, c1, c2);

	mov	rax, QWORD PTR [rdx+56]
	mov	r11, r8
	mul	QWORD PTR [rcx+56]
	add	QWORD PTR [r9], rax
	mov	r10, QWORD PTR [r9]
	cmp	r10, rax
	mov	rax, QWORD PTR c1$[rsp]
	adc	rdx, 0
	xor	ecx, ecx
	add	QWORD PTR [rax], rdx
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR c2$[rsp]
	cmp	r8, rdx
	setb	cl
	mov	QWORD PTR [rax], rcx

; 55   : 	Comba2(a, b, c0, c1, c2, CombaT<L-2>(), CombaT<L - Count>(), CombaT<Count-1>());
; 56   : 	out[2*L - Count - 2] = c0;

	mov	QWORD PTR [r11+112], r10

; 59   : 
; 60   : template<int L> CAT_INLINE void Comba3(const Leg * /*a*/, const Leg * /*b*/, Leg *out, Leg &c0, Leg &/*c1*/, Leg &/*c2*/, CombaT<L>, CombaT<-1>)
; 61   : {
; 62   : 	out[2*L - 1] = c0;

	mov	QWORD PTR [r11+120], r8

; 57   : 	Comba3(a, b, out, c1, c2, c0, CombaT<L>(), CombaT<Count-1>());
; 58   : }

	ret	0
??$Comba3@$07$0A@@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$0A@@@@Z ENDP ; Comba3<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$0A@$07@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$0A@$07@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z PROC ; Comba2<0,8>, COMDAT

; 47   : }

	ret	0
??$Comba2@$0A@$07@@YAXPEB_K0AEA_K11V?$CombaT@$0A@@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ENDP ; Comba2<0,8>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$00$07@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$00$07@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z PROC ; Comba2<1,8>, COMDAT

; 47   : }

	ret	0
??$Comba2@$00$07@@YAXPEB_K0AEA_K11V?$CombaT@$00@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ENDP ; Comba2<1,8>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$01$07@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$01$07@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z PROC ; Comba2<2,8>, COMDAT

; 47   : }

	ret	0
??$Comba2@$01$07@@YAXPEB_K0AEA_K11V?$CombaT@$01@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ENDP ; Comba2<2,8>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$02$07@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$02$07@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z PROC ; Comba2<3,8>, COMDAT

; 47   : }

	ret	0
??$Comba2@$02$07@@YAXPEB_K0AEA_K11V?$CombaT@$02@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ENDP ; Comba2<3,8>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$03$07@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$03$07@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z PROC ; Comba2<4,8>, COMDAT

; 47   : }

	ret	0
??$Comba2@$03$07@@YAXPEB_K0AEA_K11V?$CombaT@$03@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ENDP ; Comba2<4,8>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$04$07@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$04$07@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z PROC ; Comba2<5,8>, COMDAT

; 47   : }

	ret	0
??$Comba2@$04$07@@YAXPEB_K0AEA_K11V?$CombaT@$04@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ENDP ; Comba2<5,8>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba2@$05$07@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba2@$05$07@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z PROC ; Comba2<6,8>, COMDAT

; 47   : }

	ret	0
??$Comba2@$05$07@@YAXPEB_K0AEA_K11V?$CombaT@$05@@V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ENDP ; Comba2<6,8>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\combamul.inc
;	COMDAT ??$Comba3@$07@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$0?0@@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
out$ = 24
c0$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
__formal$dead$ = 56
__formal$dead$ = 64
??$Comba3@$07@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$0?0@@@Z PROC ; Comba3<8>, COMDAT

; 62   : 	out[2*L - 1] = c0;

	mov	rax, QWORD PTR [r9]
	mov	QWORD PTR [r8+120], rax

; 63   : }

	ret	0
??$Comba3@$07@@YAXPEB_K0PEA_KAEA_K22V?$CombaT@$07@@V?$CombaT@$0?0@@@Z ENDP ; Comba3<8>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\include\cat\math\bitmath.hpp
;	COMDAT ?BSR64@cat@@YAI_K@Z
_TEXT	SEGMENT
x$ = 8
?BSR64@cat@@YAI_K@Z PROC				; cat::BSR64, COMDAT

; 281  : #if defined(CAT_COMPILER_MSVC) && !defined(CAT_DEBUG) && defined(CAT_WORD_64)
; 282  : 
; 283  : 	u32 index;
; 284  :     _BitScanReverse64((unsigned long*)&index, x);

	bsr	rax, rcx

; 285  :     return index;
; 286  : 
; 287  : #elif defined(CAT_ASM_ATT) && defined(CAT_WORD_64) && defined(CAT_ISA_X86)
; 288  : 
; 289  : 	u32 retval;
; 290  : 
; 291  :     CAT_ASM_BEGIN
; 292  : 		"BSRq %1, %%rax"
; 293  : 		: "=a" (retval)
; 294  : 		: "r" (x)
; 295  : 		: "cc"
; 296  :     CAT_ASM_END
; 297  : 
; 298  :     return retval;
; 299  : 
; 300  : #else
; 301  : 
; 302  : #define CAT_NO_INTRINSIC_BSR64
; 303  : 
; 304  : 	// Adapted from the Stanford Bit Twiddling Hacks collection
; 305  :     register u32 shift, r;
; 306  : 
; 307  :     r = (x > 0xFFFFFFFF) << 5; x >>= r;
; 308  :     shift = (x > 0xFFFF) << 4; x >>= shift; r |= shift;
; 309  :     shift = (x > 0xFF) << 3; x >>= shift; r |= shift;
; 310  :     shift = (x > 0xF) << 2; x >>= shift; r |= shift;
; 311  :     shift = (x > 0x3) << 1; x >>= shift; r |= shift;
; 312  :     r |= (u32)(x >> 1);
; 313  :     return r;
; 314  : 
; 315  : #endif
; 316  : }

	ret	0
?BSR64@cat@@YAI_K@Z ENDP				; cat::BSR64
_TEXT	ENDS
END
