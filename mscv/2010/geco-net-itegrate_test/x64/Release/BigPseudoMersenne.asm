; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	bpm_sqr_4:PROC
EXTRN	bpm_mulx_4:PROC
EXTRN	bpm_mul_4:PROC
EXTRN	bpm_sub_4:PROC
EXTRN	bpm_add_4:PROC
PUBLIC	?MrReduceProduct@BigPseudoMersenne@cat@@IEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrReduceProduct
PUBLIC	?MrReduceProductX@BigPseudoMersenne@cat@@IEAAX_KPEA_K@Z ; cat::BigPseudoMersenne::MrReduceProductX
PUBLIC	?CopyModulus@BigPseudoMersenne@cat@@QEAAXPEA_K@Z ; cat::BigPseudoMersenne::CopyModulus
PUBLIC	??0BigPseudoMersenne@cat@@QEAA@HHH@Z		; cat::BigPseudoMersenne::BigPseudoMersenne
PUBLIC	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
PUBLIC	?MrInvert@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrInvert
PUBLIC	?MrReduce@BigPseudoMersenne@cat@@QEAAXPEA_K@Z	; cat::BigPseudoMersenne::MrReduce
PUBLIC	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
PUBLIC	?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z ; cat::BigPseudoMersenne::MrMultiplyX
PUBLIC	?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrNegate
PUBLIC	?MrAddX@BigPseudoMersenne@cat@@QEAAXPEA_K_K@Z	; cat::BigPseudoMersenne::MrAddX
PUBLIC	?MrAdd@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrAdd
PUBLIC	?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrSubtract
PUBLIC	?MrDouble@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrDouble
PUBLIC	?MrSubtractX@BigPseudoMersenne@cat@@QEAAXPEA_K_K@Z ; cat::BigPseudoMersenne::MrSubtractX
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MrReduceProduct@BigPseudoMersenne@cat@@IEAAXPEB_K0PEA_K@Z DD imagerel $LN52
	DD	imagerel $LN52+157
	DD	imagerel $unwind$?MrReduceProduct@BigPseudoMersenne@cat@@IEAAXPEB_K0PEA_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0BigPseudoMersenne@cat@@QEAA@HHH@Z DD imagerel $LN9
	DD	imagerel $LN9+104
	DD	imagerel $unwind$??0BigPseudoMersenne@cat@@QEAA@HHH@Z
$pdata$?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z DD imagerel $LN59
	DD	imagerel $LN59+61
	DD	imagerel $unwind$?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z
$pdata$1$?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z DD imagerel $LN59+61
	DD	imagerel $LN59+181
	DD	imagerel $chain$1$?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z
$pdata$2$?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z DD imagerel $LN59+181
	DD	imagerel $LN59+278
	DD	imagerel $chain$2$?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z
$pdata$?MrInvert@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN38
	DD	imagerel $LN38+532
	DD	imagerel $unwind$?MrInvert@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z
$pdata$?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN59
	DD	imagerel $LN59+55
	DD	imagerel $unwind$?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z
$pdata$1$?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN59+55
	DD	imagerel $LN59+172
	DD	imagerel $chain$1$?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z
$pdata$2$?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN59+172
	DD	imagerel $LN59+278
	DD	imagerel $chain$2$?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z
$pdata$?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z DD imagerel $LN62
	DD	imagerel $LN62+51
	DD	imagerel $unwind$?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z
$pdata$0$?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z DD imagerel $LN62+51
	DD	imagerel $LN62+151
	DD	imagerel $chain$0$?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z
$pdata$1$?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z DD imagerel $LN62+151
	DD	imagerel $LN62+247
	DD	imagerel $chain$1$?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z
$pdata$?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN20
	DD	imagerel $LN20+148
	DD	imagerel $unwind$?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z
$pdata$?MrAdd@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z DD imagerel $LN26
	DD	imagerel $LN26+98
	DD	imagerel $unwind$?MrAdd@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z
$pdata$?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z DD imagerel $LN28
	DD	imagerel $LN28+142
	DD	imagerel $unwind$?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z
$pdata$?MrDouble@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z DD imagerel $LN34
	DD	imagerel $LN34+153
	DD	imagerel $unwind$?MrDouble@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z
pdata	ENDS
xdata	SEGMENT
$unwind$??0BigPseudoMersenne@cat@@QEAA@HHH@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z DD 040b01H
	DD	0a640bH
	DD	0e007520bH
$chain$1$?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z DD 040d21H
	DD	09740dH
	DD	083405H
	DD	imagerel $LN59
	DD	imagerel $LN59+61
	DD	imagerel $unwind$?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z
$chain$2$?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z DD 021H
	DD	imagerel $LN59
	DD	imagerel $LN59+61
	DD	imagerel $unwind$?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z
$unwind$?MrInvert@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
$unwind$?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z DD 040b01H
	DD	0a640bH
	DD	0e007520bH
$chain$1$?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z DD 040d21H
	DD	09740dH
	DD	083405H
	DD	imagerel $LN59
	DD	imagerel $LN59+55
	DD	imagerel $unwind$?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z
$chain$2$?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z DD 021H
	DD	imagerel $LN59
	DD	imagerel $LN59+55
	DD	imagerel $unwind$?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z
$unwind$?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
$chain$0$?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z DD 020521H
	DD	066405H
	DD	imagerel $LN62
	DD	imagerel $LN62+51
	DD	imagerel $unwind$?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z
$chain$1$?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z DD 021H
	DD	imagerel $LN62
	DD	imagerel $LN62+51
	DD	imagerel $unwind$?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z
$unwind$?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z DD 040a01H
	DD	02740aH
	DD	013405H
$unwind$?MrAdd@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$?MrDouble@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MrReduceProduct@BigPseudoMersenne@cat@@IEAAXPEB_K0PEA_K@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtractx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtractx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtractx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc
_TEXT	SEGMENT
this$ = 8
inout$ = 16
x$dead$ = 24
?MrSubtractX@BigPseudoMersenne@cat@@QEAAXPEA_K_K@Z PROC	; cat::BigPseudoMersenne::MrSubtractX
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtractx.inc

; 34   :     Leg t = inout[0];

	mov	r8, QWORD PTR [rdx]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc

; 34   : {

	mov	r10, rdx
	mov	r9, rcx
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtractx.inc

; 35   :     inout[0] = t - x;

	lea	rax, QWORD PTR [r8-2]
	mov	QWORD PTR [rdx], rax

; 36   : 
; 37   :     // If the initial difference did not borrow in, return 0
; 38   :     if (t >= x) return 0;

	cmp	r8, 2
	jae	$LN37@MrSubtract

; 39   : 
; 40   :     // Ripple the borrow in as far as needed
; 41   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	r8d, 1
	cmp	DWORD PTR [rcx+4], r8d
	jle	SHORT $LL2@MrSubtract
	add	rdx, 8
	npad	6
$LL9@MrSubtract:
	mov	rcx, QWORD PTR [rdx]

; 42   :         if (inout[ii]--) return 0;

	lea	rax, QWORD PTR [rcx-1]
	mov	QWORD PTR [rdx], rax
	test	rcx, rcx
	jne	SHORT $LN37@MrSubtract

; 39   : 
; 40   :     // Ripple the borrow in as far as needed
; 41   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	r8d
	add	rdx, 8
	cmp	r8d, DWORD PTR [r9+4]
	jl	SHORT $LL9@MrSubtract
	npad	4
$LL2@MrSubtract:

; 34   :     Leg t = inout[0];

	mov	rcx, QWORD PTR [r10]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc

; 37   :         while (SubtractX(inout, modulus_c));

	mov	rdx, QWORD PTR [r9+40]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtractx.inc

; 35   :     inout[0] = t - x;

	mov	rax, rcx
	sub	rax, rdx
	mov	QWORD PTR [r10], rax

; 36   : 
; 37   :     // If the initial difference did not borrow in, return 0
; 38   :     if (t >= x) return 0;

	cmp	rcx, rdx
	jae	SHORT $LN37@MrSubtract

; 39   : 
; 40   :     // Ripple the borrow in as far as needed
; 41   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	r8d, 1
	cmp	DWORD PTR [r9+4], r8d
	jle	SHORT $LL2@MrSubtract
	lea	rax, QWORD PTR [r10+8]
	npad	11
$LL16@MrSubtract:
	mov	rdx, QWORD PTR [rax]

; 42   :         if (inout[ii]--) return 0;

	lea	rcx, QWORD PTR [rdx-1]
	mov	QWORD PTR [rax], rcx
	test	rdx, rdx
	jne	SHORT $LN37@MrSubtract

; 39   : 
; 40   :     // Ripple the borrow in as far as needed
; 41   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	r8d
	add	rax, 8
	cmp	r8d, DWORD PTR [r9+4]
	jl	SHORT $LL16@MrSubtract
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc

; 37   :         while (SubtractX(inout, modulus_c));

	jmp	SHORT $LL2@MrSubtract
$LN37@MrSubtract:

; 38   : }

	ret	0
?MrSubtractX@BigPseudoMersenne@cat@@QEAAXPEA_K_K@Z ENDP	; cat::BigPseudoMersenne::MrSubtractX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\double.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\double.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc
_TEXT	SEGMENT
this$ = 8
in$ = 16
out$ = 24
?MrDouble@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z PROC	; cat::BigPseudoMersenne::MrDouble

; 56   : {

$LN34:
	mov	QWORD PTR [rsp+8], rbx
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\double.inc

; 35   :     Leg last = in[0];

	mov	r10, QWORD PTR [rdx]

; 37   : 
; 38   :     // Shift up the rest by 1 bit; actually pretty fast this way!
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ebx, 1
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 56   : {

	mov	r9, rcx
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\double.inc

; 36   :     out[0] = last << 1;

	lea	rax, QWORD PTR [r10+r10]
	mov	QWORD PTR [r8], rax

; 37   : 
; 38   :     // Shift up the rest by 1 bit; actually pretty fast this way!
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	cmp	DWORD PTR [rcx+4], ebx
	jle	SHORT $LN6@MrDouble
	lea	r11, QWORD PTR [r8+8]
	sub	rdx, r8
	npad	13
$LL8@MrDouble:

; 40   :     {
; 41   :         Leg next = in[ii];

	mov	rcx, QWORD PTR [rdx+r11]

; 42   :         out[ii] = (next << 1) | (last >> (CAT_LEG_BITS-1));

	shr	r10, 63					; 0000003fH
	inc	ebx
	lea	rax, QWORD PTR [rcx+rcx]
	lea	r11, QWORD PTR [r11+8]
	or	r10, rax
	mov	QWORD PTR [r11-8], r10

; 43   :         last = next;

	mov	r10, rcx
	cmp	ebx, DWORD PTR [r9+4]
	jl	SHORT $LL8@MrDouble
$LN6@MrDouble:

; 44   :     }
; 45   : 
; 46   :     return (u8)(last >> (CAT_LEG_BITS-1));

	shr	r10, 63					; 0000003fH
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 58   :     if (Double(in, out))

	test	r10b, r10b
	je	SHORT $LN32@MrDouble
	npad	5
$LL2@MrDouble:

; 59   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [r9+40]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	jae	SHORT $LN32@MrDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [r9+4], ecx
	jle	SHORT $LL2@MrDouble
	lea	rax, QWORD PTR [r8+8]
	npad	5
$LL14@MrDouble:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN32@MrDouble

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [r9+4]
	jl	SHORT $LL14@MrDouble
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 59   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL2@MrDouble
$LN32@MrDouble:

; 60   : }

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
?MrDouble@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ENDP	; cat::BigPseudoMersenne::MrDouble
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtract.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtractx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtractx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc
_TEXT	SEGMENT
this$ = 48
in_a$ = 56
in_b$ = 64
out$ = 72
?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z PROC ; cat::BigPseudoMersenne::MrSubtract

; 41   : {

$LN28:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 42   : #if defined(CAT_USE_LEGS_ASM64)
; 43   :     if (library_legs == 4)

	mov	ecx, DWORD PTR [rcx+4]
	mov	rdi, r9
	cmp	ecx, 4
	jne	SHORT $LN4@MrSubtract

; 44   :     {
; 45   :         bpm_sub_4(modulus_c, in_a, in_b, out);

	mov	rcx, QWORD PTR [rbx+40]
	call	bpm_sub_4
$LN26@MrSubtract:

; 53   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN4@MrSubtract:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtract.inc

; 34   :     return Subtract(library_legs, in_a, in_b, out);

	call	?Subtract@BigRTL@cat@@KAEHPEB_K0PEA_K@Z	; cat::BigRTL::Subtract
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc

; 51   :     if (Subtract(in_a, in_b, out))

	test	al, al
	je	SHORT $LN26@MrSubtract
	npad	11
$LL2@MrSubtract:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtractx.inc

; 34   :     Leg t = inout[0];

	mov	rcx, QWORD PTR [rdi]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc

; 52   :         while (SubtractX(out, modulus_c));

	mov	rdx, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\subtractx.inc

; 35   :     inout[0] = t - x;

	mov	rax, rcx
	sub	rax, rdx
	mov	QWORD PTR [rdi], rax

; 36   : 
; 37   :     // If the initial difference did not borrow in, return 0
; 38   :     if (t >= x) return 0;

	cmp	rcx, rdx
	jae	SHORT $LN26@MrSubtract

; 39   : 
; 40   :     // Ripple the borrow in as far as needed
; 41   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	r8d, 1
	cmp	DWORD PTR [rbx+4], r8d
	jle	SHORT $LL2@MrSubtract
	lea	rax, QWORD PTR [rdi+8]
	npad	11
$LL12@MrSubtract:
	mov	rdx, QWORD PTR [rax]

; 42   :         if (inout[ii]--) return 0;

	lea	rcx, QWORD PTR [rdx-1]
	mov	QWORD PTR [rax], rcx
	test	rdx, rdx
	jne	SHORT $LN26@MrSubtract

; 39   : 
; 40   :     // Ripple the borrow in as far as needed
; 41   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	r8d
	add	rax, 8
	cmp	r8d, DWORD PTR [rbx+4]
	jl	SHORT $LL12@MrSubtract
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrsubtract.inc

; 52   :         while (SubtractX(out, modulus_c));

	jmp	SHORT $LL2@MrSubtract
?MrSubtract@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ENDP ; cat::BigPseudoMersenne::MrSubtract
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc
_TEXT	SEGMENT
this$ = 48
in_a$ = 56
in_b$ = 64
out$ = 72
?MrAdd@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z PROC	; cat::BigPseudoMersenne::MrAdd

; 41   : {

$LN26:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 42   : #if defined(CAT_USE_LEGS_ASM64)
; 43   :     if (library_legs == 4)

	cmp	DWORD PTR [rcx+4], 4
	mov	rdi, r9
	mov	rbx, rcx
	jne	SHORT $LN4@MrAdd

; 44   :     {
; 45   :         bpm_add_4(modulus_c, in_a, in_b, out);

	mov	rcx, QWORD PTR [rcx+40]
	call	bpm_add_4
$LN24@MrAdd:

; 53   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN4@MrAdd:

; 46   :         return;
; 47   :     }
; 48   : #endif
; 49   : 
; 50   :     // If the addition overflowed, add C
; 51   :     if (Add(in_a, in_b, out))

	call	?Add@BigRTL@cat@@QEAAEPEB_K0PEA_K@Z	; cat::BigRTL::Add
	test	al, al
	je	SHORT $LN24@MrAdd
$LL2@MrAdd:

; 52   :         while (AddX(out, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	SHORT $LN24@MrAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL2@MrAdd
	lea	rax, QWORD PTR [rdi+8]
	npad	3
$LL10@MrAdd:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN24@MrAdd

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL10@MrAdd
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 52   :         while (AddX(out, modulus_c));

	jmp	SHORT $LL2@MrAdd
?MrAdd@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ENDP	; cat::BigPseudoMersenne::MrAdd
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc
_TEXT	SEGMENT
this$ = 8
inout$ = 16
x$dead$ = 24
?MrAddX@BigPseudoMersenne@cat@@QEAAXPEA_K_K@Z PROC	; cat::BigPseudoMersenne::MrAddX
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	inc	QWORD PTR [rdx]
	cmp	QWORD PTR [rdx], 1
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 34   : {

	mov	r8, rcx
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	jae	SHORT $LN24@MrAddX

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [r8+4], ecx
	jle	SHORT $LL2@MrAddX
	lea	rax, QWORD PTR [rdx+8]
	npad	5
$LL9@MrAddX:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN24@MrAddX

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [r8+4]
	jl	SHORT $LL9@MrAddX
$LL2@MrAddX:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 37   :         while (AddX(inout, modulus_c));

	mov	rax, QWORD PTR [r8+40]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdx], rax
	cmp	QWORD PTR [rdx], rax
	jae	SHORT $LN24@MrAddX

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [r8+4], ecx
	jle	SHORT $LL2@MrAddX
	lea	rax, QWORD PTR [rdx+8]
	npad	4
$LL16@MrAddX:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN24@MrAddX

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [r8+4]
	jl	SHORT $LL16@MrAddX
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mradd.inc

; 37   :         while (AddX(inout, modulus_c));

	jmp	SHORT $LL2@MrAddX
$LN24@MrAddX:

; 38   : }

	ret	0
?MrAddX@BigPseudoMersenne@cat@@QEAAXPEA_K_K@Z ENDP	; cat::BigPseudoMersenne::MrAddX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\addsub\mrnegate.inc
_TEXT	SEGMENT
this$ = 8
in$ = 16
out$ = 24
?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z PROC	; cat::BigPseudoMersenne::MrNegate

; 33   : {

$LN20:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi

; 34   :     // It's like SubtractX: out = m - in = ~in-c+1 = ~in - (c-1)
; 35   :     Leg t = ~in[0];

	mov	r10, QWORD PTR [rdx]

; 36   :     Leg x = modulus_c - 1;

	mov	r9, QWORD PTR [rcx+40]
	mov	rdi, r8
	not	r10
	dec	r9
	mov	rbx, rdx

; 37   :     out[0] = t - x;

	mov	rax, r10
	mov	r11, rcx
	sub	rax, r9
	mov	QWORD PTR [r8], rax

; 38   : 
; 39   :     int ii = 1;

	mov	eax, 1

; 40   : 
; 41   :     // If the initial difference borrowed in,
; 42   :     if (t < x)

	cmp	r10, r9
	jae	SHORT $LN18@MrNegate

; 43   :     {
; 44   :         // Ripple the borrow in as far as needed
; 45   :         while (ii < library_legs)

	cmp	DWORD PTR [rcx+4], eax
	jle	SHORT $LN18@MrNegate
	mov	r9, rdx
	add	r8, 8
	sub	r9, rdi
$LL6@MrNegate:

; 46   :         {
; 47   :             t = ~in[ii];

	mov	rdx, QWORD PTR [r9+r8]

; 48   :             out[ii++] = t - 1;

	inc	eax
	lea	r8, QWORD PTR [r8+8]
	not	rdx
	lea	rcx, QWORD PTR [rdx-1]
	mov	QWORD PTR [r8-8], rcx

; 49   :             if (t) break;

	test	rdx, rdx
	jne	SHORT $LN18@MrNegate

; 43   :     {
; 44   :         // Ripple the borrow in as far as needed
; 45   :         while (ii < library_legs)

	cmp	eax, DWORD PTR [r11+4]
	jl	SHORT $LL6@MrNegate
$LN18@MrNegate:

; 50   :         }
; 51   :     }
; 52   : 
; 53   :     // Invert remaining bits
; 54   :     for (; ii < library_legs; ++ii)

	cmp	eax, DWORD PTR [r11+4]
	jge	SHORT $LN1@MrNegate
	movsxd	rcx, eax
	sub	rbx, rdi
	lea	rdx, QWORD PTR [rdi+rcx*8]
$LL3@MrNegate:

; 55   :         out[ii] = ~in[ii];

	mov	rcx, QWORD PTR [rdx+rbx]
	inc	eax
	lea	rdx, QWORD PTR [rdx+8]
	not	rcx
	mov	QWORD PTR [rdx-8], rcx
	cmp	eax, DWORD PTR [r11+4]
	jl	SHORT $LL3@MrNegate
$LN1@MrNegate:

; 56   : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
?MrNegate@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ENDP	; cat::BigPseudoMersenne::MrNegate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrmultiplyx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrmultiplyx.inc
_TEXT	SEGMENT
this$ = 48
in_a$ = 56
in_b$ = 64
out$ = 72
?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z PROC ; cat::BigPseudoMersenne::MrMultiplyX

; 34   : {

$LN62:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	r10, rcx

; 35   : #if defined(CAT_USE_LEGS_ASM64)
; 36   :     if (library_legs == 4)

	movsxd	rcx, DWORD PTR [rcx+4]
	mov	rdi, r8
	mov	rbx, rdx
	cmp	ecx, 4
	jne	SHORT $LN1@MrMultiply

; 37   :     {
; 38   :         bpm_mulx_4(modulus_c, in_a, in_b, out);

	mov	rcx, QWORD PTR [r10+40]
	call	bpm_mulx_4
$LN58@MrMultiply:

; 46   : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN1@MrMultiply:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyx.inc

; 41   :     CAT_LEG_MUL(in_a[0], in_b, p_hi, output[0]);

	mov	rax, r8
	mov	QWORD PTR [rsp+48], rsi

; 42   : 
; 43   :     for (int ii = 1; ii < legs; ++ii)

	mov	rsi, rcx
	mul	QWORD PTR [rdx]
	mov	QWORD PTR [r9], rax
	cmp	rcx, 1
	jle	SHORT $LN6@MrMultiply
	sub	rbx, r9

; 34   :     return MultiplyX(library_legs, in_a, in_b, out);

	lea	r11, QWORD PTR [r9+8]
	dec	rsi
$LL8@MrMultiply:

; 44   :         CAT_LEG_MULADD(in_a[ii], in_b, p_hi, p_hi, output[ii]);

	mov	r8, rdx
	mov	rax, rdi
	lea	r11, QWORD PTR [r11+8]
	mul	QWORD PTR [rbx+r11-8]
	lea	rcx, QWORD PTR [rax+r8]
	cmp	rcx, r8
	mov	QWORD PTR [r11-8], rcx
	adc	rdx, 0
	dec	rsi
	jne	SHORT $LL8@MrMultiply
$LN6@MrMultiply:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc

; 36   :     CAT_LEG_MULADD(overflow, modulus_c, inout[0], p_hi, p_lo);

	mov	rax, QWORD PTR [r10+40]
	mov	rsi, QWORD PTR [rsp+48]
	mul	rdx
	add	rax, QWORD PTR [r9]
	cmp	rax, QWORD PTR [r9]

; 37   : 
; 38   :     inout[0] = p_lo;

	mov	QWORD PTR [r9], rax
	adc	rdx, 0

; 39   : 
; 40   :     // If the initial sum carried out,
; 41   :     if ((inout[1] += p_hi) < p_hi)

	add	QWORD PTR [r9+8], rdx
	cmp	QWORD PTR [r9+8], rdx
	jae	SHORT $LN58@MrMultiply

; 42   :     {
; 43   :         // Ripple the carry out as far as needed
; 44   :         for (int ii = 2; ii < library_legs; ++ii)

	mov	ecx, 2
	cmp	DWORD PTR [r10+4], ecx
	jle	SHORT $LL12@MrMultiply
	lea	rax, QWORD PTR [r9+16]
$LL16@MrMultiply:

; 45   :             if (++inout[ii]) return;

	inc	QWORD PTR [rax]
	jne	$LN58@MrMultiply

; 42   :     {
; 43   :         // Ripple the carry out as far as needed
; 44   :         for (int ii = 2; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [r10+4]
	jl	SHORT $LL16@MrMultiply
	npad	5
$LL12@MrMultiply:

; 47   : 		while (AddX(inout, modulus_c));

	mov	rax, QWORD PTR [r10+40]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [r9], rax
	cmp	QWORD PTR [r9], rax
	jae	$LN58@MrMultiply

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [r10+4], ecx
	jle	SHORT $LL12@MrMultiply
	lea	rax, QWORD PTR [r9+8]
	npad	1
$LL23@MrMultiply:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN58@MrMultiply

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [r10+4]
	jl	SHORT $LL23@MrMultiply
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc

; 47   : 		while (AddX(inout, modulus_c));

	jmp	SHORT $LL12@MrMultiply
?MrMultiplyX@BigPseudoMersenne@cat@@QEAAXPEB_K_KPEA_K@Z ENDP ; cat::BigPseudoMersenne::MrMultiplyX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrsquare.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrsquare.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrsquare.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrsquare.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrsquare.inc
_TEXT	SEGMENT
this$ = 64
in$ = 72
out$ = 80
?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z PROC	; cat::BigPseudoMersenne::MrSquare

; 34   : {

$LN59:
	mov	QWORD PTR [rsp+24], rsi
	push	r14
	sub	rsp, 48					; 00000030H

; 35   : #if defined(CAT_USE_LEGS_ASM64)
; 36   :     if (library_legs == 4)

	mov	r9d, DWORD PTR [rcx+4]
	mov	r14, r8
	mov	rsi, rcx
	cmp	r9d, 4
	jne	SHORT $LN1@MrSquare

; 37   :     {
; 38   :         bpm_sqr_4(modulus_c, in, out);

	mov	rcx, QWORD PTR [rcx+40]
	call	bpm_sqr_4
$LN55@MrSquare:

; 49   : }

	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
$LN1@MrSquare:

; 43   :     Leg *T_hi = Get(pm_regs - 2);

	mov	ecx, DWORD PTR [rcx+24]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	mov	r8, QWORD PTR [rsi+8]
	mov	QWORD PTR [rsp+64], rbx
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrsquare.inc

; 43   :     Leg *T_hi = Get(pm_regs - 2);

	lea	eax, DWORD PTR [rcx-2]
	mov	QWORD PTR [rsp+72], rdi
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r9d
	cdqe
	lea	rdi, QWORD PTR [r8+rax*8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrsquare.inc

; 44   :     Leg *T_lo = Get(pm_regs - 3);

	lea	eax, DWORD PTR [rcx-3]

; 46   :     Square(in, T_lo);

	mov	rcx, rsi
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r9d
	cdqe
	lea	rbx, QWORD PTR [r8+rax*8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrsquare.inc

; 46   :     Square(in, T_lo);

	mov	r8, rbx
	call	?Square@BigRTL@cat@@QEAAXPEB_KPEA_K@Z	; cat::BigRTL::Square
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc

; 34   :     return MultiplyXAdd(library_legs, in_a, in_b, in_c, out);

	mov	r8, QWORD PTR [rsi+40]
	mov	ecx, DWORD PTR [rsi+4]
	mov	r9, rbx
	mov	rdx, rdi
	mov	QWORD PTR [rsp+32], r14
	call	?MultiplyXAdd@BigRTL@cat@@KA_KHPEB_K_K0PEA_K@Z ; cat::BigRTL::MultiplyXAdd
	mov	rdi, QWORD PTR [rsp+72]
	mov	rbx, QWORD PTR [rsp+64]
	mov	rcx, rax
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc

; 36   :     CAT_LEG_MULADD(overflow, modulus_c, inout[0], p_hi, p_lo);

	mov	rax, QWORD PTR [rsi+40]
	mul	rcx
	add	rax, QWORD PTR [r14]
	cmp	rax, QWORD PTR [r14]

; 37   : 
; 38   :     inout[0] = p_lo;

	mov	QWORD PTR [r14], rax
	adc	rdx, 0

; 39   : 
; 40   :     // If the initial sum carried out,
; 41   :     if ((inout[1] += p_hi) < p_hi)

	add	QWORD PTR [r14+8], rdx
	cmp	QWORD PTR [r14+8], rdx
	jae	$LN55@MrSquare

; 42   :     {
; 43   :         // Ripple the carry out as far as needed
; 44   :         for (int ii = 2; ii < library_legs; ++ii)

	mov	ecx, 2
	cmp	DWORD PTR [rsi+4], ecx
	jle	SHORT $LL13@MrSquare
	lea	rax, QWORD PTR [r14+16]
	npad	6
$LL17@MrSquare:

; 45   :             if (++inout[ii]) return;

	inc	QWORD PTR [rax]
	jne	$LN55@MrSquare

; 42   :     {
; 43   :         // Ripple the carry out as far as needed
; 44   :         for (int ii = 2; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rsi+4]
	jl	SHORT $LL17@MrSquare
	npad	12
$LL13@MrSquare:

; 47   : 		while (AddX(inout, modulus_c));

	mov	rax, QWORD PTR [rsi+40]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [r14], rax
	cmp	QWORD PTR [r14], rax
	jae	$LN55@MrSquare

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rsi+4], ecx
	jle	SHORT $LL13@MrSquare
	lea	rax, QWORD PTR [r14+8]
	npad	2
$LL24@MrSquare:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN55@MrSquare

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rsi+4]
	jl	SHORT $LL24@MrSquare
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc

; 47   : 		while (AddX(inout, modulus_c));

	jmp	SHORT $LL13@MrSquare
?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ENDP	; cat::BigPseudoMersenne::MrSquare
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduce.inc
_TEXT	SEGMENT
this$ = 8
inout$ = 16
?MrReduce@BigPseudoMersenne@cat@@QEAAXPEA_K@Z PROC	; cat::BigPseudoMersenne::MrReduce

; 34   :     // Subtract the modulus once if the input is greater or equal to it
; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	movsxd	r10, DWORD PTR [rcx+4]
	mov	r8d, 1
	mov	r9d, r8d
	cmp	r8, r10
	jge	SHORT $LN3@MrReduce
$LL5@MrReduce:

; 36   :         if (~inout[ii]) return;

	mov	rax, QWORD PTR [rdx+r9*8]
	not	rax
	test	rax, rax
	jne	SHORT $LN18@MrReduce

; 34   :     // Subtract the modulus once if the input is greater or equal to it
; 35   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	r9
	cmp	r9, r10
	jl	SHORT $LL5@MrReduce
$LN3@MrReduce:

; 37   : 
; 38   :     if (inout[0] >= (0 - modulus_c))

	mov	r9, QWORD PTR [rcx+40]
	mov	r10, QWORD PTR [rdx]
	mov	rax, r9
	neg	rax
	cmp	r10, rax
	jb	SHORT $LN18@MrReduce
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	lea	rax, QWORD PTR [r10+r9]
	mov	QWORD PTR [rdx], rax
	cmp	rax, r9
	jae	SHORT $LN18@MrReduce

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	cmp	DWORD PTR [rcx+4], r8d
	jle	SHORT $LN18@MrReduce
	lea	rax, QWORD PTR [rdx+8]
	npad	2
$LL11@MrReduce:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN18@MrReduce

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	r8d
	add	rax, 8
	cmp	r8d, DWORD PTR [rcx+4]
	jl	SHORT $LL11@MrReduce
$LN18@MrReduce:
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduce.inc

; 40   : }

	ret	0
?MrReduce@BigPseudoMersenne@cat@@QEAAXPEA_K@Z ENDP	; cat::BigPseudoMersenne::MrReduce
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc
_TEXT	SEGMENT
this$ = 64
in$ = 72
out$ = 80
?MrInvert@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z PROC	; cat::BigPseudoMersenne::MrInvert

; 33   : {

$LN38:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	movsxd	r11, DWORD PTR [rcx+4]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc

; 37   :     Leg *T = Get(pm_regs - 4);

	mov	r9d, DWORD PTR [rcx+24]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	mov	r10, QWORD PTR [rcx+8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc

; 37   :     Leg *T = Get(pm_regs - 4);

	lea	eax, DWORD PTR [r9-4]
	mov	r15, r8
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	mov	r8, r11
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc

; 33   : {

	mov	rdi, rcx
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	shl	r8, 3
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc

; 33   : {

	mov	rbp, rdx
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r11d
	cdqe
	lea	r14, QWORD PTR [r10+rax*8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc

; 38   :     Leg *S = Get(pm_regs - 5);

	lea	eax, DWORD PTR [r9-5]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r11d
	cdqe
	lea	rbx, QWORD PTR [r10+rax*8]

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	mov	rcx, rbx
	call	memcpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc

; 46   :     while (ctr--)

	mov	esi, 15
	npad	3
$LL8@MrInvert:

; 47   :     {
; 48   :         MrSquare(S, S);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 49   :         MrMultiply(S, in, S);

	mov	r9, rbx
	mov	r8, rbp
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
	dec	esi
	jne	SHORT $LL8@MrInvert
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rdi+4]
	mov	rdx, rbx
	mov	rcx, r14
	shl	r8, 3
	call	memcpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc

; 56   :     int one_frames = (RegBytes()*8 - w*2) / w;

	mov	eax, DWORD PTR [rdi+4]
	shl	eax, 6
	sub	eax, 32					; 00000020H
	cdq
	and	edx, 15
	add	eax, edx
	sar	eax, 4
	mov	esi, eax

; 57   :     while (one_frames--)

	test	eax, eax
	je	$LN28@MrInvert
$LL6@MrInvert:

; 58   :     {
; 59   :         // Just multiply once re-using the first result, every 16 bits
; 60   :         MrSquare(S, S); MrSquare(S, S); MrSquare(S, S); MrSquare(S, S);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 61   :         MrSquare(S, S); MrSquare(S, S); MrSquare(S, S); MrSquare(S, S);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 62   :         MrSquare(S, S); MrSquare(S, S); MrSquare(S, S); MrSquare(S, S);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 63   :         MrSquare(S, S); MrSquare(S, S); MrSquare(S, S); MrSquare(S, S);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare
	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 64   :         MrMultiply(S, T, S);

	mov	r9, rbx
	mov	r8, r14
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
	dec	esi
	jne	$LL6@MrInvert
$LN28@MrInvert:

; 65   :     }
; 66   : 
; 67   :     // For the final leg just do bitwise exponentiation
; 68   :     // NOTE: Makes use of the fact that the window size is a power of two
; 69   :     Leg m_low = 0 - (modulus_c + 2);

	mov	r14, -2

; 70   :     for (Leg bit = (Leg)1 << (w - 1); bit; bit >>= 1)

	mov	esi, 32768				; 00008000H
	sub	r14, QWORD PTR [rdi+40]
	npad	5
$LL4@MrInvert:

; 71   :     {
; 72   :         MrSquare(S, S);

	mov	r8, rbx
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrSquare@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ; cat::BigPseudoMersenne::MrSquare

; 73   : 
; 74   :         if (m_low & bit)

	test	rsi, r14
	je	SHORT $LN3@MrInvert

; 75   :             MrMultiply(S, in, S);

	mov	r9, rbx
	mov	r8, rbp
	mov	rdx, rbx
	mov	rcx, rdi
	call	?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigPseudoMersenne::MrMultiply
$LN3@MrInvert:

; 70   :     for (Leg bit = (Leg)1 << (w - 1); bit; bit >>= 1)

	shr	rsi, 1
	jne	SHORT $LL4@MrInvert
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	movsxd	r8, DWORD PTR [rdi+4]
	mov	rdx, rbx
	mov	rcx, r15
	shl	r8, 3
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\expm\mrinvert.inc

; 79   : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 70   :     memcpy(out_reg, in_reg, library_legs * sizeof(Leg));

	jmp	memcpy
?MrInvert@BigPseudoMersenne@cat@@QEAAXPEB_KPEA_K@Z ENDP	; cat::BigPseudoMersenne::MrInvert
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrmultiply.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrmultiply.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrmultiply.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrmultiply.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrmultiply.inc
_TEXT	SEGMENT
this$ = 64
in_a$ = 72
in_b$ = 80
out$ = 88
?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z PROC ; cat::BigPseudoMersenne::MrMultiply

; 34   : {

$LN59:
	mov	QWORD PTR [rsp+24], rsi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	r14, r9

; 35   : #if defined(CAT_USE_LEGS_ASM64)
; 36   :     if (library_legs == 4)

	mov	r9d, DWORD PTR [rcx+4]
	mov	r10, r8
	mov	rsi, rcx
	cmp	r9d, 4
	jne	SHORT $LN1@MrMultiply

; 37   :     {
; 38   :         bpm_mul_4(modulus_c, in_a, in_b, out);

	mov	rcx, QWORD PTR [rcx+40]
	mov	r9, r14
	call	bpm_mul_4
$LN55@MrMultiply:

; 49   : }

	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
$LN1@MrMultiply:

; 43   :     Leg *T_hi = Get(pm_regs - 2);

	mov	ecx, DWORD PTR [rcx+24]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	mov	r8, QWORD PTR [rsi+8]
	mov	QWORD PTR [rsp+64], rbx
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrmultiply.inc

; 43   :     Leg *T_hi = Get(pm_regs - 2);

	lea	eax, DWORD PTR [rcx-2]
	mov	QWORD PTR [rsp+72], rdi
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r9d
	cdqe
	lea	rdi, QWORD PTR [r8+rax*8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrmultiply.inc

; 44   :     Leg *T_lo = Get(pm_regs - 3);

	lea	eax, DWORD PTR [rcx-3]

; 46   :     Multiply(in_a, in_b, T_lo);

	mov	rcx, rsi
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, r9d
	cdqe
	lea	rbx, QWORD PTR [r8+rax*8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\mul\mrmultiply.inc

; 46   :     Multiply(in_a, in_b, T_lo);

	mov	r8, r10
	mov	r9, rbx
	call	?Multiply@BigRTL@cat@@QEAAXPEB_K0PEA_K@Z ; cat::BigRTL::Multiply
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc

; 34   :     return MultiplyXAdd(library_legs, in_a, in_b, in_c, out);

	mov	r8, QWORD PTR [rsi+40]
	mov	ecx, DWORD PTR [rsi+4]
	mov	r9, rbx
	mov	rdx, rdi
	mov	QWORD PTR [rsp+32], r14
	call	?MultiplyXAdd@BigRTL@cat@@KA_KHPEB_K_K0PEA_K@Z ; cat::BigRTL::MultiplyXAdd
	mov	rdi, QWORD PTR [rsp+72]
	mov	rbx, QWORD PTR [rsp+64]
	mov	rcx, rax
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc

; 36   :     CAT_LEG_MULADD(overflow, modulus_c, inout[0], p_hi, p_lo);

	mov	rax, QWORD PTR [rsi+40]
	mul	rcx
	add	rax, QWORD PTR [r14]
	cmp	rax, QWORD PTR [r14]

; 37   : 
; 38   :     inout[0] = p_lo;

	mov	QWORD PTR [r14], rax
	adc	rdx, 0

; 39   : 
; 40   :     // If the initial sum carried out,
; 41   :     if ((inout[1] += p_hi) < p_hi)

	add	QWORD PTR [r14+8], rdx
	cmp	QWORD PTR [r14+8], rdx
	jae	$LN55@MrMultiply

; 42   :     {
; 43   :         // Ripple the carry out as far as needed
; 44   :         for (int ii = 2; ii < library_legs; ++ii)

	mov	ecx, 2
	cmp	DWORD PTR [rsi+4], ecx
	jle	SHORT $LL13@MrMultiply
	lea	rax, QWORD PTR [r14+16]
$LL17@MrMultiply:

; 45   :             if (++inout[ii]) return;

	inc	QWORD PTR [rax]
	jne	$LN55@MrMultiply

; 42   :     {
; 43   :         // Ripple the carry out as far as needed
; 44   :         for (int ii = 2; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rsi+4]
	jl	SHORT $LL17@MrMultiply
	npad	9
$LL13@MrMultiply:

; 47   : 		while (AddX(inout, modulus_c));

	mov	rax, QWORD PTR [rsi+40]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [r14], rax
	cmp	QWORD PTR [r14], rax
	jae	$LN55@MrMultiply

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rsi+4], ecx
	jle	SHORT $LL13@MrMultiply
	lea	rax, QWORD PTR [r14+8]
	npad	2
$LL24@MrMultiply:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	$LN55@MrMultiply

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rsi+4]
	jl	SHORT $LL24@MrMultiply
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc

; 47   : 		while (AddX(inout, modulus_c));

	jmp	SHORT $LL13@MrMultiply
?MrMultiply@BigPseudoMersenne@cat@@QEAAXPEB_K0PEA_K@Z ENDP ; cat::BigPseudoMersenne::MrMultiply
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigpseudomersenne.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigpseudomersenne.cpp
_TEXT	SEGMENT
this$ = 48
regs$dead$ = 56
bits$ = 64
C$ = 72
??0BigPseudoMersenne@cat@@QEAA@HHH@Z PROC		; cat::BigPseudoMersenne::BigPseudoMersenne

; 35   : {

$LN9:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	movsxd	rbx, r9d
	mov	rdi, rcx
	call	??0BigRTL@cat@@QEAA@HH@Z		; cat::BigRTL::BigRTL
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigrtl.cpp

; 65   :     return &library_memory[library_legs * reg_index];

	imul	eax, DWORD PTR [rdi+4], 175		; 000000afH
	movsxd	rdx, eax
	mov	rax, QWORD PTR [rdi+8]
	lea	rcx, QWORD PTR [rax+rdx*8]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigpseudomersenne.cpp

; 36   :     pm_regs = regs + PM_OVERHEAD;

	mov	DWORD PTR [rdi+24], 176			; 000000b0H

; 37   :     modulus_c = C;

	mov	QWORD PTR [rdi+40], rbx

; 38   : 
; 39   :     // Reserve a register to contain the full modulus
; 40   :     CachedModulus = Get(pm_regs - 1);

	mov	QWORD PTR [rdi+32], rcx
	mov	r8, rbx

; 43   : 
; 44   : void CAT_FASTCALL BigPseudoMersenne::CopyModulus(Leg *out)
; 45   : {
; 46   :     // Set low leg to -C, set all bits on the rest
; 47   :     out[0] = 0 - modulus_c;
; 48   :     memset(&out[1], 0xFF, (library_legs-1) * sizeof(Leg));

	mov	edx, 255				; 000000ffH
	neg	r8
	add	rcx, 8
	mov	QWORD PTR [rcx-8], r8
	mov	eax, DWORD PTR [rdi+4]
	dec	eax
	movsxd	r8, eax
	shl	r8, 3
	call	memset

; 41   :     CopyModulus(CachedModulus);
; 42   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0BigPseudoMersenne@cat@@QEAA@HHH@Z ENDP		; cat::BigPseudoMersenne::BigPseudoMersenne
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\bigpseudomersenne.cpp
_TEXT	SEGMENT
this$ = 8
out$ = 16
?CopyModulus@BigPseudoMersenne@cat@@QEAAXPEA_K@Z PROC	; cat::BigPseudoMersenne::CopyModulus

; 46   :     // Set low leg to -C, set all bits on the rest
; 47   :     out[0] = 0 - modulus_c;

	mov	rax, QWORD PTR [rcx+40]
	neg	rax
	mov	QWORD PTR [rdx], rax

; 48   :     memset(&out[1], 0xFF, (library_legs-1) * sizeof(Leg));

	mov	eax, DWORD PTR [rcx+4]
	lea	rcx, QWORD PTR [rdx+8]
	dec	eax
	mov	edx, 255				; 000000ffH
	movsxd	r8, eax
	shl	r8, 3
	jmp	memset
?CopyModulus@BigPseudoMersenne@cat@@QEAAXPEA_K@Z ENDP	; cat::BigPseudoMersenne::CopyModulus
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc
;	COMDAT ?MrReduceProductX@BigPseudoMersenne@cat@@IEAAX_KPEA_K@Z
_TEXT	SEGMENT
this$ = 8
overflow$ = 16
inout$ = 24
?MrReduceProductX@BigPseudoMersenne@cat@@IEAAX_KPEA_K@Z PROC ; cat::BigPseudoMersenne::MrReduceProductX, COMDAT

; 34   :     // Pseudo-Mersenne reduction
; 35   :     Leg p_hi, p_lo;
; 36   :     CAT_LEG_MULADD(overflow, modulus_c, inout[0], p_hi, p_lo);

	mov	rax, QWORD PTR [rcx+40]
	mov	r10, rcx
	mul	rdx
	add	rax, QWORD PTR [r8]
	cmp	rax, QWORD PTR [r8]

; 37   : 
; 38   :     inout[0] = p_lo;

	mov	QWORD PTR [r8], rax
	adc	rdx, 0

; 39   : 
; 40   :     // If the initial sum carried out,
; 41   :     if ((inout[1] += p_hi) < p_hi)

	add	QWORD PTR [r8+8], rdx
	cmp	QWORD PTR [r8+8], rdx
	jae	SHORT $LN21@MrReducePr

; 42   :     {
; 43   :         // Ripple the carry out as far as needed
; 44   :         for (int ii = 2; ii < library_legs; ++ii)

	mov	ecx, 2
	cmp	DWORD PTR [r10+4], ecx
	jle	SHORT $LL2@MrReducePr
	lea	rax, QWORD PTR [r8+16]
$LL6@MrReducePr:

; 45   :             if (++inout[ii]) return;

	inc	QWORD PTR [rax]
	jne	SHORT $LN21@MrReducePr

; 42   :     {
; 43   :         // Ripple the carry out as far as needed
; 44   :         for (int ii = 2; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [r10+4]
	jl	SHORT $LL6@MrReducePr
$LL2@MrReducePr:

; 47   : 		while (AddX(inout, modulus_c));

	mov	rax, QWORD PTR [r10+40]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [r8], rax
	cmp	QWORD PTR [r8], rax
	jae	SHORT $LN21@MrReducePr

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [r10+4], ecx
	jle	SHORT $LL2@MrReducePr
	lea	rax, QWORD PTR [r8+8]
	npad	4
$LL13@MrReducePr:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN21@MrReducePr

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [r10+4]
	jl	SHORT $LL13@MrReducePr
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc

; 47   : 		while (AddX(inout, modulus_c));

	jmp	SHORT $LL2@MrReducePr
$LN21@MrReducePr:

; 48   :     }
; 49   : }

	ret	0
?MrReduceProductX@BigPseudoMersenne@cat@@IEAAX_KPEA_K@Z ENDP ; cat::BigPseudoMersenne::MrReduceProductX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc
;	COMDAT ?MrReduceProduct@BigPseudoMersenne@cat@@IEAAXPEB_K0PEA_K@Z
_TEXT	SEGMENT
this$ = 64
in_hi$ = 72
in_lo$ = 80
output$ = 88
?MrReduceProduct@BigPseudoMersenne@cat@@IEAAXPEB_K0PEA_K@Z PROC ; cat::BigPseudoMersenne::MrReduceProduct, COMDAT

; 53   : {

$LN52:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, r9
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc

; 34   :     return MultiplyXAdd(library_legs, in_a, in_b, in_c, out);

	mov	QWORD PTR [rsp+32], r9
	mov	r9, r8
	mov	r8, QWORD PTR [rcx+40]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc

; 53   : {

	mov	rbx, rcx
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\mul\multiplyxadd.inc

; 34   :     return MultiplyXAdd(library_legs, in_a, in_b, in_c, out);

	mov	ecx, DWORD PTR [rcx+4]
	call	?MultiplyXAdd@BigRTL@cat@@KA_KHPEB_K_K0PEA_K@Z ; cat::BigRTL::MultiplyXAdd
	mov	rdx, rax
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc

; 36   :     CAT_LEG_MULADD(overflow, modulus_c, inout[0], p_hi, p_lo);

	mov	rax, QWORD PTR [rbx+40]
	mul	rdx
	add	rax, QWORD PTR [rdi]
	cmp	rax, QWORD PTR [rdi]

; 37   : 
; 38   :     inout[0] = p_lo;

	mov	QWORD PTR [rdi], rax
	adc	rdx, 0

; 39   : 
; 40   :     // If the initial sum carried out,
; 41   :     if ((inout[1] += p_hi) < p_hi)

	add	QWORD PTR [rdi+8], rdx
	cmp	QWORD PTR [rdi+8], rdx
	jae	SHORT $LN48@MrReducePr

; 42   :     {
; 43   :         // Ripple the carry out as far as needed
; 44   :         for (int ii = 2; ii < library_legs; ++ii)

	mov	ecx, 2
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL6@MrReducePr
	lea	rax, QWORD PTR [rdi+16]
$LL10@MrReducePr:

; 45   :             if (++inout[ii]) return;

	inc	QWORD PTR [rax]
	jne	SHORT $LN48@MrReducePr

; 42   :     {
; 43   :         // Ripple the carry out as far as needed
; 44   :         for (int ii = 2; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL10@MrReducePr
$LL6@MrReducePr:

; 47   : 		while (AddX(inout, modulus_c));

	mov	rax, QWORD PTR [rbx+40]
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\rtl\addsub\addx.inc

; 35   :     if ((inout[0] += x) >= x)

	add	QWORD PTR [rdi], rax
	cmp	QWORD PTR [rdi], rax
	jae	SHORT $LN48@MrReducePr

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	mov	ecx, 1
	cmp	DWORD PTR [rbx+4], ecx
	jle	SHORT $LL6@MrReducePr
	lea	rax, QWORD PTR [rdi+8]
	npad	3
$LL17@MrReducePr:

; 40   :         if (++inout[ii]) return 0;

	inc	QWORD PTR [rax]
	jne	SHORT $LN48@MrReducePr

; 36   :         return 0;
; 37   : 
; 38   :     // Ripple the carry out as far as needed
; 39   :     for (int ii = 1; ii < library_legs; ++ii)

	inc	ecx
	add	rax, 8
	cmp	ecx, DWORD PTR [rbx+4]
	jl	SHORT $LL17@MrReducePr
; File c:\users\jakez\desktop\libcatid\libcatid-master\src\math\mersenne\reduce\mrreduceproduct.inc

; 47   : 		while (AddX(inout, modulus_c));

	jmp	SHORT $LL6@MrReducePr
$LN48@MrReducePr:

; 54   : 	// Pseudo-Mersenne reduction
; 55   : 	Leg overflow = MultiplyXAdd(in_hi, modulus_c, in_lo, output);
; 56   : 
; 57   : 	MrReduceProductX(overflow, output);
; 58   : }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?MrReduceProduct@BigPseudoMersenne@cat@@IEAAXPEB_K0PEA_K@Z ENDP ; cat::BigPseudoMersenne::MrReduceProduct
_TEXT	ENDS
END
